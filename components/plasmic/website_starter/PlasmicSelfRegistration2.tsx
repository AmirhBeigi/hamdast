// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: Q-DZlWM8_2v4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Tooltip from "../../Tooltip"; // plasmic-import: H631TCEpl2Nh/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicSelfRegistration2.module.css"; // plasmic-import: Q-DZlWM8_2v4/css

createPlasmicElementProxy;

export type PlasmicSelfRegistration2__VariantMembers = {};
export type PlasmicSelfRegistration2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfRegistration2__VariantsArgs;
export const PlasmicSelfRegistration2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSelfRegistration2__ArgsType = {};
type ArgPropType = keyof PlasmicSelfRegistration2__ArgsType;
export const PlasmicSelfRegistration2__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfRegistration2__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  tooltip?: Flex__<typeof Tooltip>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  input9?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  input11?: Flex__<typeof AntdInput>;
};

export interface DefaultSelfRegistration2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfRegistration2__RenderFunc(props: {
  variants: PlasmicSelfRegistration2__VariantsArgs;
  args: PlasmicSelfRegistration2__ArgsType;
  overrides: PlasmicSelfRegistration2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "formStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hyVqq)}>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__v9Xce)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <Embed
              className={classNames("__wab_instance", sty.embedHtml__hePL)}
              code={
                '<script type="text/javascript">\r\n  !function(){var i="WgsGXv",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n</script>'
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__dvVu)}>
              {(() => {
                try {
                  return $state.formStep == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__meYNx
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\u0647\u0646\u0648\u0632 \u067e\u0646\u0644 \u0646\u062f\u0627\u0631\u06cc\u061f \u0627\u06cc\u0646\u200c\u062c\u0627 \u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u06a9\u0646"
                    : "\u0647\u0646\u0648\u0632 \u067e\u0646\u0644 \u0646\u062f\u0627\u0631\u06cc\u061f \u0627\u06cc\u0646\u200c\u062c\u0627 \u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u06a9\u0646"}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.formStep == 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tk5
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\n\n\u0647\u0646\u0648\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u06cc \u0646\u0634\u062f\u06cc\u061f  \u06a9\u0627\u0641\u06cc\u0647 \u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u06a9\u0646\u06cc"
                    : "\u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u06a9\u0647 \u0642\u0631\u0627\u0631\u0647 \u062f\u0631 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0628\u0628\u06cc\u0646\u06cc \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.formStep == 2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cfU6X
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "\n\n\u0647\u0646\u0648\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646\u06cc \u0646\u0634\u062f\u06cc\u061f  \u06a9\u0627\u0641\u06cc\u0647 \u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u06a9\u0646\u06cc"
                    : "\u062d\u0627\u0644\u0627 \u06a9\u062f \u0645\u0646\u062d\u0635\u0631\u0628\u0641\u0631\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627\u06cc\u06cc \u06a9\u0647 \u062f\u0627\u0631\u06cc \u0631\u0648 \u062f\u0631 \u0628\u062e\u0634 \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u0647\u0631 \u0633\u0627\u06cc\u062a \u0648\u0627\u0631\u062f \u06a9\u0646"}
                </div>
              ) : null}
            </div>
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $state.formStep == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xJmCc)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__a8MxH
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xg2Q1
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"name"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u062f\u0648\u0633\u062a \u062f\u0627\u0631\u06cc\u0645 \u0627\u0633\u0645\u062a\u0648 \u0628\u062f\u0648\u0646\u06cc\u0645!"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          disabled: false,
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: "\u0646\u0627\u0645",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__fMcPr
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xiuMe
                          )}
                        >
                          {""}
                        </div>
                      }
                      name={"lastName"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u0644\u0637\u0641\u0627 \u0641\u0627\u0645\u06cc\u0644\u06cc\u062a \u0631\u0648 \u0647\u0645 \u0648\u0627\u0631\u062f \u06a9\u0646"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__en7Zf)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__h6Baq
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] =
                            $state.form.value.name.length > 1 &&
                            $state.form.value.lastName.length > 1
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formStep"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xuPRj
                          )}
                        >
                          {"\u0628\u0639\u062f\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.formStep == 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rLnJ3)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__y3Nw
                      )}
                      label={""}
                      name={"propertyName"}
                      rules={[
                        {
                          ruleType: "required",
                          message:
                            "\u0628\u062f\u0648\u0646 \u0627\u0633\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u06a9\u0647 \u0646\u0645\u06cc\u200c\u0634\u0647!"
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u0646\u0627\u0645 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qzrPu
                      )}
                      hidden={false}
                      initialValue={``}
                      label={""}
                      name={"phoneNumber"}
                      rules={[
                        { ruleType: "required", message: `` },

                        { ruleType: "min", length: 11, message: `` },

                        {
                          ruleType: "advanced",
                          custom: (rule, value) => {
                            return /^09/.test($state.form.value.phoneNumber);
                          },
                          message:
                            "\u0627\u06cc\u0646 \u0634\u0645\u0627\u0631\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a!"
                        }
                      ]}
                      validateTrigger={["onBlur"]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3NwT)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__tQkPi
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] =
                            $state.form.value.phoneNumber.length >= 11 &&
                            $state.form.value.propertyName.length > 1
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formStep"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0NzA
                          )}
                        >
                          {"\u0628\u0639\u062f\u06cc"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__hoBoj
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["formStep"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oe67X
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.formStep == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xhcq8)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xR3V
                      )}
                      label={""}
                      name={"jabamaPPID"}
                      rules={[]}
                    >
                      <Tooltip
                        data-plasmic-name={"tooltip"}
                        data-plasmic-override={overrides.tooltip}
                        className={classNames("__wab_instance", sty.tooltip)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dpvGe
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#203647" }}
                            >
                              {""}
                            </span>
                          </React.Fragment>
                        </div>
                      </Tooltip>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__ttaRg
                      )}
                      label={"\u062a\u0633\u062a"}
                      name={"jajigaPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__nHw6Q
                      )}
                      label={""}
                      name={"shabPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input7", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0634\u0628",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xy3Uo
                      )}
                      hidden={false}
                      label={""}
                      name={"MizbonPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input8),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input8", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input8",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input8.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input8"}
                            data-plasmic-override={overrides.input8}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__a5FOg
                      )}
                      hidden={false}
                      label={""}
                      name={"OtaghakPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input9),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input9", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___5KS7T
                      )}
                      hidden={false}
                      label={""}
                      name={"MihmanshoPPID"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input10),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input10", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__tOwav
                      )}
                      hidden={false}
                      label={""}
                      name={"HomsaPPID"}
                      rules={[
                        {
                          ruleType: "advanced",
                          custom: (rule, value) => {
                            return parseInt(
                              $state.form.value.jabamaPPID.replace(
                                /[۰-۹]/g,
                                function (d) {
                                  return String.fromCharCode(
                                    d.charCodeAt(0) -
                                      "۰".charCodeAt(0) +
                                      "0".charCodeAt(0)
                                  );
                                }
                              )
                            );
                          }
                        }
                      ]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input11),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input11", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder:
                            "\u06a9\u062f \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u062a \u062f\u0631 \u0647\u0648\u0645\u0633\u0627",
                          size: "large",
                          value: generateStateValueProp($state, [
                            "input11",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input11.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input11"}
                            data-plasmic-override={overrides.input11}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gozqc)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__hRfz6
                        )}
                        disabled={false}
                        ghost={false}
                        onClick={async () => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://rentamon-n8n.darkube.app/webhook-test/register",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.form.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            username: "0910",
                                            first_name: "alireza",
                                            last_name: "nik",
                                            profile: { profile_pic: "jpg" },
                                            properties: [
                                              {
                                                property_name: "property 1",
                                                property_pic_link: "jpg",
                                                platform_properties: [
                                                  {
                                                    website: 2,
                                                    platform_property_id: "123"
                                                  }
                                                ]
                                              },
                                              {
                                                property_name: "property 2",
                                                property_pic_link: "jpg",
                                                platform_properties: [
                                                  {
                                                    website: 3,
                                                    platform_property_id: "123"
                                                  }
                                                ]
                                              },
                                              {
                                                property_name: "property 3",
                                                property_pic_link: "jpg",
                                                platform_properties: [
                                                  {
                                                    website: 4,
                                                    platform_property_id: "123"
                                                  }
                                                ]
                                              }
                                            ],
                                            tokens: [
                                              {
                                                phone_number: "12345",
                                                token: {
                                                  TOKEN: "ab,cd",
                                                  AUTHTOKEN: "ab,cd",
                                                  CLIENTTOKEN: "ab,cd"
                                                },
                                                website: 2
                                              },
                                              {
                                                phone_number: "12345",
                                                token: {
                                                  TOKEN: "ab,cd",
                                                  AUTHTOKEN: "ab,cd",
                                                  CLIENTTOKEN: "ab,cd"
                                                },
                                                website: 3
                                              },
                                              {
                                                phone_number: "12345",
                                                token: {
                                                  TOKEN: "ab,cd",
                                                  AUTHTOKEN: "ab,cd",
                                                  CLIENTTOKEN: "ab,cd"
                                                },
                                                website: 4
                                              }
                                            ],
                                            balance: 2000000
                                          };
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return "https://rentamon.com/panels";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["invokeGlobalAction2"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0645\u0628\u0627\u0631\u06a9\u0647! \u0627\u0644\u0622\u0646 \u0645\u06cc\u200c\u0631\u06cc\u0645 \u062f\u0627\u062e\u0644 \u067e\u0646\u0644"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tFfJp
                          )}
                        >
                          {"\u0627\u0631\u0633\u0627\u0644"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__kQpU8
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateFormStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["formStep"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormStep"] != null &&
                            typeof $steps["updateFormStep"] === "object" &&
                            typeof $steps["updateFormStep"].then === "function"
                          ) {
                            $steps["updateFormStep"] = await $steps[
                              "updateFormStep"
                            ];
                          }
                        }}
                        submitsForm={false}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Ammi
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc"}
                        </div>
                      </AntdButton>
                    </div>
                  </div>
                ) : null}
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "input",
    "input2",
    "input4",
    "input3",
    "tooltip",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "input10",
    "input11"
  ],
  form: [
    "form",
    "input",
    "input2",
    "input4",
    "input3",
    "tooltip",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9",
    "input10",
    "input11"
  ],
  input: ["input"],
  input2: ["input2"],
  input4: ["input4"],
  input3: ["input3"],
  tooltip: ["tooltip"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  input8: ["input8"],
  input9: ["input9"],
  input10: ["input10"],
  input11: ["input11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input4: typeof AntdInput;
  input3: typeof AntdInput;
  tooltip: typeof Tooltip;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  input9: typeof AntdInput;
  input10: typeof AntdInput;
  input11: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfRegistration2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfRegistration2__VariantsArgs;
    args?: PlasmicSelfRegistration2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfRegistration2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfRegistration2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfRegistration2__ArgProps,
          internalVariantPropNames: PlasmicSelfRegistration2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfRegistration2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfRegistration2";
  } else {
    func.displayName = `PlasmicSelfRegistration2.${nodeName}`;
  }
  return func;
}

export const PlasmicSelfRegistration2 = Object.assign(
  // Top-level PlasmicSelfRegistration2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    input3: makeNodeComponent("input3"),
    tooltip: makeNodeComponent("tooltip"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    input11: makeNodeComponent("input11"),

    // Metadata about props expected for PlasmicSelfRegistration2
    internalVariantProps: PlasmicSelfRegistration2__VariantProps,
    internalArgProps: PlasmicSelfRegistration2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfRegistration2;
/* prettier-ignore-end */
