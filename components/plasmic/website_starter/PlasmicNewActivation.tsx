// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: vITsvNxG_t4v

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import Checkbox from "../../Checkbox"; // plasmic-import: kNwK3iA1B39P/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNewActivation.module.css"; // plasmic-import: vITsvNxG_t4v/css

createPlasmicElementProxy;

export type PlasmicNewActivation__VariantMembers = {};
export type PlasmicNewActivation__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewActivation__VariantsArgs;
export const PlasmicNewActivation__VariantProps = new Array<VariantPropType>();

export type PlasmicNewActivation__ArgsType = {};
type ArgPropType = keyof PlasmicNewActivation__ArgsType;
export const PlasmicNewActivation__ArgProps = new Array<ArgPropType>();

export type PlasmicNewActivation__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  form?: Flex__<typeof FormWrapper>;
  platforms?: Flex__<typeof FormItemWrapper>;
  jabamaCheckbox?: Flex__<typeof Checkbox>;
  jajigaCheckbox2?: Flex__<typeof Checkbox>;
  shabCheckbox3?: Flex__<typeof Checkbox>;
  otaghakCheckbox4?: Flex__<typeof Checkbox>;
  mihmanshoCheckbox5?: Flex__<typeof Checkbox>;
  homsaCheckbox6?: Flex__<typeof Checkbox>;
  mizboonCheckbox7?: Flex__<typeof Checkbox>;
  submitButton?: Flex__<typeof AntdButton>;
  jabamaVerticalStack?: Flex__<"div">;
  input5?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  jajigaVerticalStack?: Flex__<"div">;
  input7?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  shabVerticalStack?: Flex__<"div">;
  input9?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
};

export interface DefaultNewActivationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewActivation__RenderFunc(props: {
  variants: PlasmicNewActivation__VariantsArgs;
  args: PlasmicNewActivation__ArgsType;
  overrides: PlasmicNewActivation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jabamaCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jajigaCheckbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shabCheckbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otaghakCheckbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mihmanshoCheckbox5.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "homsaCheckbox6.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mizboonCheckbox7.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iu94T
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___902C5
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "apiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest",
              "data"
            ])}
            url={"https://gateway.rentamon.com/webhook/active1"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rubIc
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      "اتصال " +
                      $state.apiRequest.data[0].property_name +
                      " به پلتفرم‌ها"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0627\u062a\u0635\u0627\u0644 \u0648\u06cc\u0644\u0627\u062a \u0628\u0647 \u067e\u0644\u062a\u0641\u0631\u0645\u200c\u0647\u0627";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </ApiRequest>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <FormItemWrapper
                  data-plasmic-name={"platforms"}
                  data-plasmic-override={overrides.platforms}
                  className={classNames("__wab_instance", sty.platforms)}
                  initialValue={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tnUak
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `${$state.apiRequest.data[0].property_name} در چه پلتفرم‌هایی فعاله؟`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0648\u06cc\u0644\u0627\u062a \u062f\u0631 \u0686\u0647 \u067e\u0644\u062a\u0641\u0631\u0645\u200c\u0647\u0627\u06cc\u06cc \u0641\u0639\u0627\u0644\u0647\u061f";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  name={`name${undefined}`}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nlymy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uvS)}
                    >
                      <Checkbox
                        data-plasmic-name={"jabamaCheckbox"}
                        data-plasmic-override={overrides.jabamaCheckbox}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaCheckbox
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "jabamaCheckbox",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "jabamaCheckbox",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pdwPq
                          )}
                        >
                          {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                        </div>
                      </Checkbox>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xm29X)}
                    >
                      <Checkbox
                        data-plasmic-name={"jajigaCheckbox2"}
                        data-plasmic-override={overrides.jajigaCheckbox2}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaCheckbox2
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "jajigaCheckbox2",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "jajigaCheckbox2",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__d5RE5
                          )}
                        >
                          {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                        </div>
                      </Checkbox>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nrgc5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Zwu2
                      )}
                    >
                      <Checkbox
                        data-plasmic-name={"shabCheckbox3"}
                        data-plasmic-override={overrides.shabCheckbox3}
                        className={classNames(
                          "__wab_instance",
                          sty.shabCheckbox3
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "shabCheckbox3",
                            "isChecked"
                          ]) ?? false
                        }
                        name={``}
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "shabCheckbox3",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ii5Md
                          )}
                        >
                          {"\u0634\u0628"}
                        </div>
                      </Checkbox>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zFpDp)}
                    >
                      <Checkbox
                        data-plasmic-name={"otaghakCheckbox4"}
                        data-plasmic-override={overrides.otaghakCheckbox4}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakCheckbox4
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "otaghakCheckbox4",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "otaghakCheckbox4",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___59GeI
                          )}
                        >
                          {"\u0627\u062a\u0627\u0642\u06a9"}
                        </div>
                      </Checkbox>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0CNnE)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ahGnb)}
                    >
                      <Checkbox
                        data-plasmic-name={"mihmanshoCheckbox5"}
                        data-plasmic-override={overrides.mihmanshoCheckbox5}
                        className={classNames(
                          "__wab_instance",
                          sty.mihmanshoCheckbox5
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "mihmanshoCheckbox5",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "mihmanshoCheckbox5",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lOuc4
                          )}
                        >
                          {
                            "\u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648"
                          }
                        </div>
                      </Checkbox>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__keIr)}
                    >
                      <Checkbox
                        data-plasmic-name={"homsaCheckbox6"}
                        data-plasmic-override={overrides.homsaCheckbox6}
                        className={classNames(
                          "__wab_instance",
                          sty.homsaCheckbox6
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "homsaCheckbox6",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "homsaCheckbox6",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hf5WI
                          )}
                        >
                          {"\u0647\u0648\u0645\u0633\u0627"}
                        </div>
                      </Checkbox>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__juEr0)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xuC1D)}
                    >
                      <Checkbox
                        data-plasmic-name={"mizboonCheckbox7"}
                        data-plasmic-override={overrides.mizboonCheckbox7}
                        className={classNames(
                          "__wab_instance",
                          sty.mizboonCheckbox7
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "mizboonCheckbox7",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "mizboonCheckbox7",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rx5Nj
                          )}
                        >
                          {"\u0645\u06cc\u0632\u0628\u0648\u0646"}
                        </div>
                      </Checkbox>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wlXp6)}
                    />
                  </div>
                  <AntdButton
                    data-plasmic-name={"submitButton"}
                    data-plasmic-override={overrides.submitButton}
                    className={classNames("__wab_instance", sty.submitButton)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["active2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://gateway.rentamon.com/webhook/active2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      body: {
                                        jabama: $state.jabamaCheckbox.isChecked
                                          ? 2
                                          : null,
                                        jajiga: $state.jajigaCheckbox2.isChecked
                                          ? 3
                                          : null,
                                        shab: $state.shabCheckbox3.isChecked
                                          ? 4
                                          : null,
                                        otaghak: $state.otaghakCheckbox4
                                          .isChecked
                                          ? 6
                                          : null,
                                        mihmansho: $state.mihmanshoCheckbox5
                                          .isChecked
                                          ? 7
                                          : null,
                                        homsa: $state.homsaCheckbox6.isChecked
                                          ? 8
                                          : null,
                                        mizboon: $state.mizboonCheckbox7
                                          .isChecked
                                          ? 5
                                          : null
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["active2"] != null &&
                        typeof $steps["active2"] === "object" &&
                        typeof $steps["active2"].then === "function"
                      ) {
                        $steps["active2"] = await $steps["active2"];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f! \u062d\u0627\u0644\u0627 \u0628\u0627\u06cc\u062f \u062f\u0631 \u0645\u0631\u062d\u0644\u0647 \u0628\u0639\u062f \u0627\u062a\u0635\u0627\u0644 \u0647\u0631 \u0633\u0627\u06cc\u062a \u0631\u0648 \u0628\u0631\u0642\u0631\u0627\u0631 \u06a9\u0646\u06cc.",
                                "bottom-center",
                                6000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    submitsForm={false}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c7CUk
                      )}
                    >
                      {"\u062b\u0628\u062a"}
                    </div>
                  </AntdButton>
                </FormItemWrapper>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dG63L
                  )}
                >
                  {
                    "\u2705\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.\n\u062d\u0627\u0644\u0627 \u0628\u0627\u06cc\u062f \u062f\u0631 \u0645\u0631\u062d\u0644\u0647 \u0628\u0639\u062f \u0627\u062a\u0635\u0627\u0644 \u0647\u0631 \u0633\u0627\u06cc\u062a \u0631\u0648 \u0628\u0631\u0642\u0631\u0627\u0631 \u06a9\u0646\u06cc."
                  }
                </div>
                <div
                  data-plasmic-name={"jabamaVerticalStack"}
                  data-plasmic-override={overrides.jabamaVerticalStack}
                  className={classNames(
                    projectcss.all,
                    sty.jabamaVerticalStack
                  )}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__sKGoo
                    )}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Qabr
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                        }
                      </div>
                    }
                    name={"jabamaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input5),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input5", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input5",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input5.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input5"}
                          data-plasmic-override={overrides.input5}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__dlBrb
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/jabama-send-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.jabamaphone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tB7Bi
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__avCWg
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rr7As
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jabamaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input8),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input8", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input8",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input8.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input8"}
                          data-plasmic-override={overrides.input8}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__mGiwY
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/jabama-verify-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.jabamaphone,
                                        otp: $state.form.value.jabamaOTP
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cQivN
                        )}
                      >
                        {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                </div>
                <div
                  data-plasmic-name={"jajigaVerticalStack"}
                  data-plasmic-override={overrides.jajigaVerticalStack}
                  className={classNames(
                    projectcss.all,
                    sty.jajigaVerticalStack
                  )}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__zjTmv
                    )}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__noIQz
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                        }
                      </div>
                    }
                    name={"jajigaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input7),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input7", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input7",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input7.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input7"}
                          data-plasmic-override={overrides.input7}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__bbILh
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/jajiga-send-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.jajigaphone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e2Q4E
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__ag5Gd
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7G9Yk
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u062c\u06cc\u06af\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jajigaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input6),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input6", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input6",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input6.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input6"}
                          data-plasmic-override={overrides.input6}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__mXShh
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/jajiga-verify-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.jajigaphone,
                                        otp: $state.form.value.jajigaOTP
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___54Y
                        )}
                      >
                        {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                </div>
                <div
                  data-plasmic-name={"shabVerticalStack"}
                  data-plasmic-override={overrides.shabVerticalStack}
                  className={classNames(projectcss.all, sty.shabVerticalStack)}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__xG7G1
                    )}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nDm7E
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0634\u0628:"
                        }
                      </div>
                    }
                    name={"shabphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input9),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input9", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input9",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input9.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input9"}
                          data-plasmic-override={overrides.input9}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__fyVcB
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/shab-send-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.shabphone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lUjRk
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___6Ii
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8F4D
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0634\u0628 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"shabOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input10),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input10", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input10",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input10.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input10"}
                          data-plasmic-override={overrides.input10}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__xhShw
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/shab-verify-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.shabphone,
                                        otp: $state.form.value.shabOTP
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eoJfg
                        )}
                      >
                        {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                </div>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "form",
    "platforms",
    "jabamaCheckbox",
    "jajigaCheckbox2",
    "shabCheckbox3",
    "otaghakCheckbox4",
    "mihmanshoCheckbox5",
    "homsaCheckbox6",
    "mizboonCheckbox7",
    "submitButton",
    "jabamaVerticalStack",
    "input5",
    "input8",
    "jajigaVerticalStack",
    "input7",
    "input6",
    "shabVerticalStack",
    "input9",
    "input10"
  ],
  apiRequest: ["apiRequest"],
  form: [
    "form",
    "platforms",
    "jabamaCheckbox",
    "jajigaCheckbox2",
    "shabCheckbox3",
    "otaghakCheckbox4",
    "mihmanshoCheckbox5",
    "homsaCheckbox6",
    "mizboonCheckbox7",
    "submitButton",
    "jabamaVerticalStack",
    "input5",
    "input8",
    "jajigaVerticalStack",
    "input7",
    "input6",
    "shabVerticalStack",
    "input9",
    "input10"
  ],
  platforms: [
    "platforms",
    "jabamaCheckbox",
    "jajigaCheckbox2",
    "shabCheckbox3",
    "otaghakCheckbox4",
    "mihmanshoCheckbox5",
    "homsaCheckbox6",
    "mizboonCheckbox7",
    "submitButton"
  ],
  jabamaCheckbox: ["jabamaCheckbox"],
  jajigaCheckbox2: ["jajigaCheckbox2"],
  shabCheckbox3: ["shabCheckbox3"],
  otaghakCheckbox4: ["otaghakCheckbox4"],
  mihmanshoCheckbox5: ["mihmanshoCheckbox5"],
  homsaCheckbox6: ["homsaCheckbox6"],
  mizboonCheckbox7: ["mizboonCheckbox7"],
  submitButton: ["submitButton"],
  jabamaVerticalStack: ["jabamaVerticalStack", "input5", "input8"],
  input5: ["input5"],
  input8: ["input8"],
  jajigaVerticalStack: ["jajigaVerticalStack", "input7", "input6"],
  input7: ["input7"],
  input6: ["input6"],
  shabVerticalStack: ["shabVerticalStack", "input9", "input10"],
  input9: ["input9"],
  input10: ["input10"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  form: typeof FormWrapper;
  platforms: typeof FormItemWrapper;
  jabamaCheckbox: typeof Checkbox;
  jajigaCheckbox2: typeof Checkbox;
  shabCheckbox3: typeof Checkbox;
  otaghakCheckbox4: typeof Checkbox;
  mihmanshoCheckbox5: typeof Checkbox;
  homsaCheckbox6: typeof Checkbox;
  mizboonCheckbox7: typeof Checkbox;
  submitButton: typeof AntdButton;
  jabamaVerticalStack: "div";
  input5: typeof AntdInput;
  input8: typeof AntdInput;
  jajigaVerticalStack: "div";
  input7: typeof AntdInput;
  input6: typeof AntdInput;
  shabVerticalStack: "div";
  input9: typeof AntdInput;
  input10: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewActivation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewActivation__VariantsArgs;
    args?: PlasmicNewActivation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewActivation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewActivation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewActivation__ArgProps,
          internalVariantPropNames: PlasmicNewActivation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewActivation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewActivation";
  } else {
    func.displayName = `PlasmicNewActivation.${nodeName}`;
  }
  return func;
}

export const PlasmicNewActivation = Object.assign(
  // Top-level PlasmicNewActivation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    form: makeNodeComponent("form"),
    platforms: makeNodeComponent("platforms"),
    jabamaCheckbox: makeNodeComponent("jabamaCheckbox"),
    jajigaCheckbox2: makeNodeComponent("jajigaCheckbox2"),
    shabCheckbox3: makeNodeComponent("shabCheckbox3"),
    otaghakCheckbox4: makeNodeComponent("otaghakCheckbox4"),
    mihmanshoCheckbox5: makeNodeComponent("mihmanshoCheckbox5"),
    homsaCheckbox6: makeNodeComponent("homsaCheckbox6"),
    mizboonCheckbox7: makeNodeComponent("mizboonCheckbox7"),
    submitButton: makeNodeComponent("submitButton"),
    jabamaVerticalStack: makeNodeComponent("jabamaVerticalStack"),
    input5: makeNodeComponent("input5"),
    input8: makeNodeComponent("input8"),
    jajigaVerticalStack: makeNodeComponent("jajigaVerticalStack"),
    input7: makeNodeComponent("input7"),
    input6: makeNodeComponent("input6"),
    shabVerticalStack: makeNodeComponent("shabVerticalStack"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),

    // Metadata about props expected for PlasmicNewActivation
    internalVariantProps: PlasmicNewActivation__VariantProps,
    internalArgProps: PlasmicNewActivation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewActivation;
/* prettier-ignore-end */
