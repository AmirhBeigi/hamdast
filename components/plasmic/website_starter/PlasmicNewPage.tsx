// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: qnoSvk5APDQU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: fYS4AeYPi-91/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: qnoSvk5APDQU/css

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  topContainer?: Flex__<"section">;
  mainSection?: Flex__<"section">;
  properties?: Flex__<typeof ApiRequest>;
  selectProperty?: Flex__<typeof Select>;
  shabContainer?: Flex__<"div">;
  fragmentSwitch?: Flex__<typeof Switch>;
  jajigaContainer?: Flex__<"div">;
  fragmentSwitch2?: Flex__<typeof Switch>;
  jabamaContainer?: Flex__<"div">;
  fragmentSwitch3?: Flex__<typeof Switch>;
  homsaContainer?: Flex__<"div">;
  fragmentSwitch4?: Flex__<typeof Switch>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return localStorage.getItem("IsShabInstant") === "true";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectProperty.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0648\u06cc\u0644\u0627 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"
      },
      {
        path: "fragmentSwitch2.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return localStorage.getItem("IsShabInstant") === "true";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch3.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return localStorage.getItem("IsShabInstant") === "true";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch4.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return localStorage.getItem("IsShabInstant") === "true";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "properties.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "properties.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "properties.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"topContainer"}
            data-plasmic-override={overrides.topContainer}
            className={classNames(projectcss.all, sty.topContainer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qkgw
              )}
            >
              {
                "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u26a1\ufe0f"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ngkPi
              )}
            >
              {"\u062a\u0627 \u06f3\u06f0 \u0645\u0647\u0631"}
            </div>
          </section>
          <section
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <ApiRequest
              data-plasmic-name={"properties"}
              data-plasmic-override={overrides.properties}
              className={classNames("__wab_instance", sty.properties)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xsnPs
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yosUl
                  )}
                >
                  {"Loading..."}
                </div>
              }
              method={"GET"}
              onError={generateStateOnChangeProp($state, [
                "properties",
                "error"
              ])}
              onLoading={generateStateOnChangeProp($state, [
                "properties",
                "loading"
              ])}
              onSuccess={generateStateOnChangeProp($state, [
                "properties",
                "data"
              ])}
              url={"https://dev.rentamon.com/webhook/property-status"}
            >
              <Select
                data-plasmic-name={"selectProperty"}
                data-plasmic-override={overrides.selectProperty}
                className={classNames("__wab_instance", sty.selectProperty)}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "selectProperty",
                    "value"
                  ])(eventArgs[0]);
                }}
                options={(() => {
                  try {
                    return $state.properties.data.map(
                      property => property.property_name
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [
                        { value: "option1", label: "Option 1" },
                        { value: "option2", label: "Option 2" }
                      ];
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, [
                  "selectProperty",
                  "value"
                ])}
              />

              <div className={classNames(projectcss.all, sty.freeBox__gWfWp)}>
                {(() => {
                  try {
                    return $state.properties.data
                      .find(
                        property =>
                          property.property_name === $state.selectProperty.value
                      )
                      .website_ids.some(website => website.website_id === 4);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"shabContainer"}
                    data-plasmic-override={overrides.shabContainer}
                    className={classNames(projectcss.all, sty.shabContainer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sSoSg)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__mFudq)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image.png",
                          fullWidth: 88,
                          fullHeight: 88,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jbz7
                        )}
                      >
                        {"\u0634\u0628"}
                      </div>
                    </div>
                    {(() => {
                      const child$Props = {
                        checked: generateStateValueProp($state, [
                          "fragmentSwitch",
                          "checked"
                        ]),
                        className: classNames(
                          "__wab_instance",
                          sty.fragmentSwitch
                        ),
                        disabled: false,
                        onCheckedChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentSwitch",
                            "checked"
                          ]).apply(null, eventArgs);
                          (async checked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return localStorage.setItem(
                                        "IsShabInstant",
                                        $state.fragmentSwitch.checked
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://dev.rentamon.com/webhook/shab-instant",
                                      undefined,
                                      (() => {
                                        try {
                                          return $state.fragmentSwitch.checked
                                            ? {
                                                action: "set_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              }
                                            : {
                                                action: "unset_instant",
                                                property_id:
                                                  $state.properties.data.find(
                                                    property =>
                                                      property.property_name ===
                                                      $state.selectProperty
                                                        .value
                                                  ).property_id
                                              };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              dates: "1403-05-30",
                                              property_id: 1,
                                              action: "unset_instant"
                                            };
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded",
                                              Authorization: `Bearer ${
                                                document.cookie
                                                  .split("; ")
                                                  .find(row =>
                                                    row.startsWith(
                                                      "usso_access_token"
                                                    )
                                                  )
                                                  .split("=")[1]
                                              }`
                                            },
                                            withCredentials: true
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              withCredentials: true,
                                              headers: {
                                                "Content-Type":
                                                  "application/x-www-form-urlencoded"
                                              }
                                            };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "checked",
                            plasmicStateName: "fragmentSwitch.checked"
                          }
                        ],
                        [],
                        undefined ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "fragmentSwitch.checked",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return (() => {
                                    return (
                                      localStorage.getItem("IsShabInstant") ===
                                      "true"
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        []
                      );
                      return (
                        <Switch
                          data-plasmic-name={"fragmentSwitch"}
                          data-plasmic-override={overrides.fragmentSwitch}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"jajigaContainer"}
                  data-plasmic-override={overrides.jajigaContainer}
                  className={classNames(projectcss.all, sty.jajigaContainer)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fMwrK)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yrAV)}
                      displayHeight={"44px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"44px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/jajigaWebp.webp",
                        fullWidth: 192,
                        fullHeight: 192,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__txOIf
                      )}
                    >
                      {"\u062c\u0627\u062c\u06cc\u06af\u0627"}
                    </div>
                  </div>
                  {(() => {
                    const child$Props = {
                      checked: generateStateValueProp($state, [
                        "fragmentSwitch2",
                        "checked"
                      ]),
                      className: classNames(
                        "__wab_instance",
                        sty.fragmentSwitch2
                      ),
                      disabled: false,
                      onCheckedChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch2",
                          "checked"
                        ]).apply(null, eventArgs);
                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return localStorage.setItem(
                                      "IsShabInstant",
                                      $state.fragmentSwitch2.checked
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://dev.rentamon.com/webhook/shab-instant",
                                    undefined,
                                    (() => {
                                      try {
                                        return $ctx.properties.find(
                                          property =>
                                            property.property_name ===
                                            $state.selectProperty.value
                                        ).property_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            dates: "1403-05-30",
                                            property_id: 1,
                                            action: "unset_instant"
                                          };
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type":
                                              "application/x-www-form-urlencoded",
                                            Authorization: `Bearer ${
                                              document.cookie
                                                .split("; ")
                                                .find(row =>
                                                  row.startsWith(
                                                    "usso_access_token"
                                                  )
                                                )
                                                .split("=")[1]
                                            }`
                                          },
                                          withCredentials: true
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            withCredentials: true,
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded"
                                            }
                                          };
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "checked",
                          plasmicStateName: "fragmentSwitch2.checked"
                        }
                      ],
                      [],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "fragmentSwitch2.checked",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (() => {
                                  return (
                                    localStorage.getItem("IsShabInstant") ===
                                    "true"
                                  );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <Switch
                        data-plasmic-name={"fragmentSwitch2"}
                        data-plasmic-override={overrides.fragmentSwitch2}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <div
                  data-plasmic-name={"jabamaContainer"}
                  data-plasmic-override={overrides.jabamaContainer}
                  className={classNames(projectcss.all, sty.jabamaContainer)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bG0B)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__lelMq)}
                      displayHeight={"44px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"44px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/jabamaWebp.webp",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ycA87
                      )}
                    >
                      {"\u062c\u0627\u0628\u0627\u0645\u0627"}
                    </div>
                  </div>
                  {(() => {
                    const child$Props = {
                      checked: generateStateValueProp($state, [
                        "fragmentSwitch3",
                        "checked"
                      ]),
                      className: classNames(
                        "__wab_instance",
                        sty.fragmentSwitch3
                      ),
                      disabled: false,
                      onCheckedChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch3",
                          "checked"
                        ]).apply(null, eventArgs);
                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return localStorage.setItem(
                                      "IsShabInstant",
                                      $state.fragmentSwitch3.checked
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://dev.rentamon.com/webhook/shab-instant",
                                    undefined,
                                    (() => {
                                      try {
                                        return $ctx.properties.find(
                                          property =>
                                            property.property_name ===
                                            $state.selectProperty.value
                                        ).property_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            dates: "1403-05-30",
                                            property_id: 1,
                                            action: "unset_instant"
                                          };
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type":
                                              "application/x-www-form-urlencoded",
                                            Authorization: `Bearer ${
                                              document.cookie
                                                .split("; ")
                                                .find(row =>
                                                  row.startsWith(
                                                    "usso_access_token"
                                                  )
                                                )
                                                .split("=")[1]
                                            }`
                                          },
                                          withCredentials: true
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            withCredentials: true,
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded"
                                            }
                                          };
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "checked",
                          plasmicStateName: "fragmentSwitch3.checked"
                        }
                      ],
                      [],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "fragmentSwitch3.checked",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (() => {
                                  return (
                                    localStorage.getItem("IsShabInstant") ===
                                    "true"
                                  );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <Switch
                        data-plasmic-name={"fragmentSwitch3"}
                        data-plasmic-override={overrides.fragmentSwitch3}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <div
                  data-plasmic-name={"homsaContainer"}
                  data-plasmic-override={overrides.homsaContainer}
                  className={classNames(projectcss.all, sty.homsaContainer)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dEi8S)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__oPsp5)}
                      displayHeight={"44px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"44px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/homsaWebp.webp",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wuhmp
                      )}
                    >
                      {"\u0647\u0648\u0645\u0633\u0627"}
                    </div>
                  </div>
                  {(() => {
                    const child$Props = {
                      checked: generateStateValueProp($state, [
                        "fragmentSwitch4",
                        "checked"
                      ]),
                      className: classNames(
                        "__wab_instance",
                        sty.fragmentSwitch4
                      ),
                      disabled: false,
                      onCheckedChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentSwitch4",
                          "checked"
                        ]).apply(null, eventArgs);
                        (async checked => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return localStorage.setItem(
                                      "IsShabInstant",
                                      $state.fragmentSwitch4.checked
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://dev.rentamon.com/webhook/shab-instant",
                                    undefined,
                                    (() => {
                                      try {
                                        return $ctx.properties.find(
                                          property =>
                                            property.property_name ===
                                            $state.selectProperty.value
                                        ).property_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            dates: "1403-05-30",
                                            property_id: 1,
                                            action: "unset_instant"
                                          };
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type":
                                              "application/x-www-form-urlencoded",
                                            Authorization: `Bearer ${
                                              document.cookie
                                                .split("; ")
                                                .find(row =>
                                                  row.startsWith(
                                                    "usso_access_token"
                                                  )
                                                )
                                                .split("=")[1]
                                            }`
                                          },
                                          withCredentials: true
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return {
                                            withCredentials: true,
                                            headers: {
                                              "Content-Type":
                                                "application/x-www-form-urlencoded"
                                            }
                                          };
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "checked",
                          plasmicStateName: "fragmentSwitch4.checked"
                        }
                      ],
                      [],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "fragmentSwitch4.checked",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (() => {
                                  return (
                                    localStorage.getItem("IsShabInstant") ===
                                    "true"
                                  );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <Switch
                        data-plasmic-name={"fragmentSwitch4"}
                        data-plasmic-override={overrides.fragmentSwitch4}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </div>
            </ApiRequest>
          </section>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__epNe8)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml___64Fi)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "iv4wnfjr7k");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topContainer",
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "fragmentSwitch",
    "jajigaContainer",
    "fragmentSwitch2",
    "jabamaContainer",
    "fragmentSwitch3",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  topContainer: ["topContainer"],
  mainSection: [
    "mainSection",
    "properties",
    "selectProperty",
    "shabContainer",
    "fragmentSwitch",
    "jajigaContainer",
    "fragmentSwitch2",
    "jabamaContainer",
    "fragmentSwitch3",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  properties: [
    "properties",
    "selectProperty",
    "shabContainer",
    "fragmentSwitch",
    "jajigaContainer",
    "fragmentSwitch2",
    "jabamaContainer",
    "fragmentSwitch3",
    "homsaContainer",
    "fragmentSwitch4"
  ],
  selectProperty: ["selectProperty"],
  shabContainer: ["shabContainer", "fragmentSwitch"],
  fragmentSwitch: ["fragmentSwitch"],
  jajigaContainer: ["jajigaContainer", "fragmentSwitch2"],
  fragmentSwitch2: ["fragmentSwitch2"],
  jabamaContainer: ["jabamaContainer", "fragmentSwitch3"],
  fragmentSwitch3: ["fragmentSwitch3"],
  homsaContainer: ["homsaContainer", "fragmentSwitch4"],
  fragmentSwitch4: ["fragmentSwitch4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  topContainer: "section";
  mainSection: "section";
  properties: typeof ApiRequest;
  selectProperty: typeof Select;
  shabContainer: "div";
  fragmentSwitch: typeof Switch;
  jajigaContainer: "div";
  fragmentSwitch2: typeof Switch;
  jabamaContainer: "div";
  fragmentSwitch3: typeof Switch;
  homsaContainer: "div";
  fragmentSwitch4: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topContainer: makeNodeComponent("topContainer"),
    mainSection: makeNodeComponent("mainSection"),
    properties: makeNodeComponent("properties"),
    selectProperty: makeNodeComponent("selectProperty"),
    shabContainer: makeNodeComponent("shabContainer"),
    fragmentSwitch: makeNodeComponent("fragmentSwitch"),
    jajigaContainer: makeNodeComponent("jajigaContainer"),
    fragmentSwitch2: makeNodeComponent("fragmentSwitch2"),
    jabamaContainer: makeNodeComponent("jabamaContainer"),
    fragmentSwitch3: makeNodeComponent("fragmentSwitch3"),
    homsaContainer: makeNodeComponent("homsaContainer"),
    fragmentSwitch4: makeNodeComponent("fragmentSwitch4"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
