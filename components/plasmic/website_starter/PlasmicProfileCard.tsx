// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: NwDoivbA9vcj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicProfileCard.module.css"; // plasmic-import: NwDoivbA9vcj/css

createPlasmicElementProxy;

export type PlasmicProfileCard__VariantMembers = {};
export type PlasmicProfileCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileCard__VariantsArgs;
export const PlasmicProfileCard__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileCard__ArgsType = {
  propImage?: string;
  fullName?: string;
  prop1?: string;
  prop2?: string;
};
type ArgPropType = keyof PlasmicProfileCard__ArgsType;
export const PlasmicProfileCard__ArgProps = new Array<ArgPropType>(
  "propImage",
  "fullName",
  "prop1",
  "prop2"
);

export type PlasmicProfileCard__OverridesType = {
  root2?: Flex__<"div">;
  name?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  image?: Flex__<typeof PlasmicImg__>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
};

export interface DefaultProfileCardProps {
  propImage?: string;
  fullName?: string;
  prop1?: string;
  prop2?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileCard__RenderFunc(props: {
  variants: PlasmicProfileCard__VariantsArgs;
  args: PlasmicProfileCard__ArgsType;
  overrides: PlasmicProfileCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root2"}
      data-plasmic-override={overrides.root2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root2
      )}
      dir={"rtl"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__s4Ai0)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__ektWr)}
          dir={"rtl"}
        >
          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name
            )}
            dir={"rtl"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `${$ctx.fetchedData.list[0].first_name} ${$ctx.fetchedData.list[0].last_name}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <DataFetcher
          data-plasmic-name={"httpRestApiFetcher"}
          data-plasmic-override={overrides.httpRestApiFetcher}
          className={classNames("__wab_instance", sty.httpRestApiFetcher)}
          dataName={"fetchedData"}
          errorDisplay={
            <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
          }
          errorName={"fetchError"}
          headers={{
            "Content-Type": "application/json",
            Accept: "application/json",
            "xc-token": "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ"
          }}
          loadingDisplay={
            <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
          }
          method={"GET"}
          noLayout={false}
          url={(() => {
            try {
              return "https://app.nocodb.com/api/v2/tables/mzzo3ht0dlhagzr/records?where=%28user_id%2Ceq%2C466%29&limit=25&shuffle=0&offset=0";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__jzCg)}>
                <PlasmicImg__
                  data-plasmic-name={"image"}
                  data-plasmic-override={overrides.image}
                  alt={""}
                  className={classNames(sty.image)}
                  displayHeight={"116px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"168px"}
                  height={"100"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $ctx.fetchedData.list[0].property_pic_link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  width={"150"}
                />

                {(() => {
                  const child$Props = {
                    bordered: true,
                    className: classNames("__wab_instance", sty.collapse),
                    label2: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eBin2
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.fetchedData.list[0].property_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["collapse", "open"],
                      AntdSingleCollapse_Helpers
                    ),
                    open: generateStateValueProp($state, ["collapse", "open"]),
                    showArrow: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "collapse.open"
                      }
                    ],
                    [],
                    AntdSingleCollapse_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdSingleCollapse
                      data-plasmic-name={"collapse"}
                      data-plasmic-override={overrides.collapse}
                      {...child$Props}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                        2, 3, 4
                      ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Qf1W
                            )}
                            key={currentIndex}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.list[currentIndex]
                                    .property_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        );
                      })}
                    </AntdSingleCollapse>
                  );
                })()}
              </div>
            )}
          </DataCtxReader__>
        </DataFetcher>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: ["root2", "name", "httpRestApiFetcher", "image", "collapse"],
  name: ["name"],
  httpRestApiFetcher: ["httpRestApiFetcher", "image", "collapse"],
  image: ["image"],
  collapse: ["collapse"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root2: "div";
  name: "div";
  httpRestApiFetcher: typeof DataFetcher;
  image: typeof PlasmicImg__;
  collapse: typeof AntdSingleCollapse;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileCard__VariantsArgs;
    args?: PlasmicProfileCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileCard__ArgProps,
          internalVariantPropNames: PlasmicProfileCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicProfileCard";
  } else {
    func.displayName = `PlasmicProfileCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileCard = Object.assign(
  // Top-level PlasmicProfileCard renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    _name: makeNodeComponent("name"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    image: makeNodeComponent("image"),
    collapse: makeNodeComponent("collapse"),

    // Metadata about props expected for PlasmicProfileCard
    internalVariantProps: PlasmicProfileCard__VariantProps,
    internalArgProps: PlasmicProfileCard__ArgProps
  }
);

export default PlasmicProfileCard;
/* prettier-ignore-end */
