// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: AFCQqK02hfZM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicYalda.module.css"; // plasmic-import: AFCQqK02hfZM/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicYalda__VariantMembers = {};
export type PlasmicYalda__VariantsArgs = {};
type VariantPropType = keyof PlasmicYalda__VariantsArgs;
export const PlasmicYalda__VariantProps = new Array<VariantPropType>();

export type PlasmicYalda__ArgsType = {};
type ArgPropType = keyof PlasmicYalda__ArgsType;
export const PlasmicYalda__ArgProps = new Array<ArgPropType>();

export type PlasmicYalda__OverridesType = {
  yalda?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  button5?: Flex__<"div">;
  button4?: Flex__<"div">;
  button3?: Flex__<"div">;
  button2?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultYaldaProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicYalda__RenderFunc(props: {
  variants: PlasmicYalda__VariantsArgs;
  args: PlasmicYalda__ArgsType;
  overrides: PlasmicYalda__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sur",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "surveyform",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"yalda"}
          data-plasmic-override={overrides.yalda}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.yalda
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jzgX9)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__et14
              )}
            >
              {hasVariant(globalVariants, "screen", "tablet")
                ? "\u062c\u0634\u0646\u0648\u0627\u0631\u0647 \u06cc\u0644\u062f\u0627 \u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632\n\u0631\u0646\u062a\u0627\u0645\u0648\u0646"
                : "\u062c\u0634\u0646\u0648\u0627\u0631\u0647 \u06cc\u0644\u062f\u0627 \u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632 \u0631\u0646\u062a\u0627\u0645\u0648\u0646"}
            </div>
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script>\r\n        String.prototype.EntoFa = function() {\r\n            return this.replace(/\\d/g, d => '\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9'[d]);\r\n        }\r\n        function convertNumbersInPage() {\r\n            const elements = document.querySelectorAll('body *:not(script):not(style)');\r\n            elements.forEach(element => {\r\n                element.childNodes.forEach(node => {\r\n                    if (node.nodeType === Node.TEXT_NODE) {\r\n                        node.nodeValue = node.nodeValue.EntoFa();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    setTimeout(convertNumbersInPage, 1000);\r\n    </script>"
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lpo8D
            )}
          >
            <React.Fragment>
              <React.Fragment>{"\u0627\u0632 "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ textDecorationLine: "underline" }}
              >
                {
                  "\u06f2\u06f7 \u0622\u0630\u0631 \u062a\u0627 \u06f1 \u062f\u06cc"
                }
              </span>
              <React.Fragment>
                {
                  " \u0628\u0627 \u062a\u062e\u0641\u06cc\u0641\u200c\u0647\u0627\u06cc \u062c\u0630\u0627\u0628 \u0628\u0647 \u0645\u0646\u0627\u0633\u0628\u062a \u062c\u0634\u0646 \u06cc\u0644\u062f\u0627"
                }
              </React.Fragment>
            </React.Fragment>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jmM3K)}>
            {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nkgvk)}
                displayHeight={"12px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/image35.png",
                  fullWidth: 464,
                  fullHeight: 173,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rbfT0)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__lKbt2)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jCjcs)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qVlXl)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pgXp8)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___8Y03M)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__z5Kq)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hBCn)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__us1Lv)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___6F9Uc)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__tja38)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/image35.png",
                fullWidth: 464,
                fullHeight: 173,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__t8Bp8)}>
            <div className={classNames(projectcss.all, sty.freeBox___5Eo9V)}>
              <div className={classNames(projectcss.all, sty.freeBox__p2Vgj)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ytbos)}
                  displayHeight={"91px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "114px"
                      : "auto"
                  }
                  height={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                  loading={"lazy"}
                  src={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? (() => {
                          try {
                            return $ctx.fetchedData.list[0].logo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                src: "/plasmic/website_starter/images/offPng.png",
                                fullWidth: 100,
                                fullHeight: 100,
                                aspectRatio: undefined
                              };
                            }
                            throw e;
                          }
                        })()
                      : {
                          src: "/plasmic/website_starter/images/offPng.png",
                          fullWidth: 100,
                          fullHeight: 100,
                          aspectRatio: undefined
                        }
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                />

                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__hAap1)}
                    displayHeight={"91px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "114px"
                        : "auto"
                    }
                    height={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "120"
                        : undefined
                    }
                    loading={"lazy"}
                    src={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? {
                            src: "/plasmic/website_starter/images/offPng.png",
                            fullWidth: 100,
                            fullHeight: 100,
                            aspectRatio: undefined
                          }
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? {
                            src: "/plasmic/website_starter/images/_13549867Png.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/website_starter/images/_13549867Png.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }
                    }
                    width={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "120"
                        : undefined
                    }
                  />
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nqQ96)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hdmux
                  )}
                >
                  {
                    "\u06f3\u06f0\u066a \u062a\u062e\u0641\u06cc\u0641 \u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xuiG6
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__thuVk
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__es6Dy
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile") ? (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0641\u0642\u0637 "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0628\u0627 \u06f7\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u060c \u0628\u0633\u062a\u0647 \u0634\u0627\u0631\u0698 \u06cc\u06a9 \u0645\u06cc\u0644\u06cc\u0648\u0646\u06cc"
                                  }
                                </span>
                                <React.Fragment>
                                  {" \u0631\u0648 \u0628\u062e\u0631\u06cc!"}
                                </React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0633\u062a\u0647 \u0634\u0627\u0631\u0698 \u06cc\u06a9 \u0645\u06cc\u0644\u06cc\u0648\u0646\u06cc \u0631\u0648 "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0641\u0642\u0637 \u0628\u0627 \u06f7\u06f0\u06f0 \u062a\u0648\u0645\u0646 "
                                  }
                                </span>
                                <React.Fragment>
                                  {"\u0628\u062e\u0631\u06cc!"}
                                </React.Fragment>
                              </React.Fragment>
                            )}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__iY86U
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__awcZh
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0647\u0645\u0686\u0646\u06cc\u0646 \u0628\u0633\u062a\u0647 \u06f5\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u06cc \u0647\u0645 \u06f1\u06f5\u066a \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0647"
                              : "\u0647\u0645\u0686\u0646\u06cc\u0646 \u0628\u0633\u062a\u0647 \u06f5\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u06cc \u0647\u0645 \u06f2\u06f0\u066a \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0647"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__thuVk
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__es6Dy
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile") ? (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0641\u0642\u0637 "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0628\u0627 \u06f7\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u060c \u0628\u0633\u062a\u0647 \u0634\u0627\u0631\u0698 \u06cc\u06a9 \u0645\u06cc\u0644\u06cc\u0648\u0646\u06cc"
                                  }
                                </span>
                                <React.Fragment>
                                  {" \u0631\u0648 \u0628\u062e\u0631\u06cc!"}
                                </React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0633\u062a\u0647 \u0634\u0627\u0631\u0698 \u06cc\u06a9 \u0645\u06cc\u0644\u06cc\u0648\u0646\u06cc \u0631\u0648 "
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0641\u0642\u0637 \u0628\u0627 \u06f7\u06f0\u06f0 \u062a\u0648\u0645\u0646 "
                                  }
                                </span>
                                <React.Fragment>
                                  {"\u0628\u062e\u0631\u06cc!"}
                                </React.Fragment>
                              </React.Fragment>
                            )}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__iY86U
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__awcZh
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "\u0647\u0645\u0686\u0646\u06cc\u0646 \u0628\u0633\u062a\u0647 \u06f5\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u06cc \u0647\u0645 \u06f1\u06f5\u066a \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0647"
                              : "\u0647\u0645\u0686\u0646\u06cc\u0646 \u0628\u0633\u062a\u0647 \u06f5\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646\u06cc \u0647\u0645 \u06f2\u06f0\u066a \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0647"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kaL09
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__dkgcw
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__nqjEg
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0633\u062a\u0647 \u0634\u0627\u0631\u0698 \u06cc\u06a9 \u0645\u06cc\u0644\u06cc\u0648\u0646\u06cc \u0631\u0648 "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {
                                  "\u0641\u0642\u0637 \u0628\u0627 \u06f7\u06f0\u06f0 \u062a\u0648\u0645\u0646 "
                                }
                              </span>
                              <React.Fragment>
                                {"\u0628\u062e\u0631\u06cc!"}
                              </React.Fragment>
                            </React.Fragment>
                          </li>
                        </ul>
                      }
                      <React.Fragment>
                        {
                          "\u0628\u0633\u062a\u0647 \u06f5\u06f0\u06f0 \u062a\u0648\u0645\u0646\u06cc \u0647\u0645 \u06f2\u06f0\u066a \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u0647\n"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                ) : null}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4SbGy)}>
              <div
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.button5
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://www.rentamon.com/pricing");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "\u0645\u0646\u0645 \u062a\u062e\u0641\u06cc\u0641 \u0645\u06cc\u200c\u062e\u0648\u0627\u0645"
                  : "\u0628\u0632\u0646 \u0628\u0631\u06cc\u0645 \u062e\u0631\u06cc\u062f"}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wq6IS)}>
            <div className={classNames(projectcss.all, sty.freeBox__ot7Fp)}>
              <div className={classNames(projectcss.all, sty.freeBox__qWaNs)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___0Zquy)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "smallMobile")
                      ? "80px"
                      : "91px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "114px"
                      : "auto"
                  }
                  height={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                  loading={"lazy"}
                  src={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? {
                          src: "/plasmic/website_starter/images/_13549867Png.png",
                          fullWidth: 256,
                          fullHeight: 256,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/website_starter/images/_13549867Png.png",
                          fullWidth: 256,
                          fullHeight: 256,
                          aspectRatio: undefined
                        }
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pgsIm)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ekvu0
                  )}
                >
                  {"\u0647\u062f\u06cc\u0647 \u062f\u0639\u0648\u062a \u06f2x"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___68DZb
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0627\u06af\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0628\u0647 \u0633\u0627\u06cc\u0631 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u060c \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0646\u0641\u0631 "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0645\u0628\u0644\u063a \u06f2\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0646 "
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u0645\u06cc\u200c\u06af\u06cc\u0631\u06cc!"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  ) : hasVariant(globalVariants, "screen", "mobile") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0627\u06af\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0628\u0647 \u0633\u0627\u06cc\u0631 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u060c \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0646\u0641\u0631 "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0645\u0628\u0644\u063a \u06f2\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0646 "
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u0645\u06cc\u200c\u06af\u06cc\u0631\u06cc!"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0627\u06af\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0628\u0647 \u0633\u0627\u06cc\u0631 \u0645\u06cc\u0632\u0628\u0627\u0646\u200c\u0647\u0627 \u0645\u0639\u0631\u0641\u06cc \u06a9\u0646\u06cc\u060c \u0628\u0647 \u0627\u0632\u0627\u06cc \u0647\u0631 \u0646\u0641\u0631 "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0645\u0628\u0644\u063a \u06f2\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0646 "
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\u0627\u0639\u062a\u0628\u0627\u0631 \u0647\u062f\u06cc\u0647 \u0645\u06cc\u200c\u06af\u06cc\u0631\u06cc!"
                        }
                      </React.Fragment>
                    </React.Fragment>
                  )}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pdjDi)}>
              <div
                data-plasmic-name={"button4"}
                data-plasmic-override={overrides.button4}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.button4
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://www.rentamon.com/referral");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {
                  "\u062f\u0639\u0648\u062a \u0627\u0632 \u062f\u0648\u0633\u062a\u0627\u0646"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ss2QW)}>
            <div className={classNames(projectcss.all, sty.freeBox__sUAb4)}>
              <div className={classNames(projectcss.all, sty.freeBox__s4Ucl)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__idRX)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "91px"
                      : "91px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "114px"
                      : "auto"
                  }
                  height={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                  loading={"lazy"}
                  src={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? {
                          src: "/plasmic/website_starter/images/villaPng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/website_starter/images/villaPng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dxrni)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j09Me
                  )}
                >
                  {
                    " \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062c\u062f\u06cc\u062f \u06f2 \u0645\u0627\u0647 \u0631\u0627\u06cc\u06af\u0627\u0646"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g1Uxk
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0647\u0631 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u06cc \u06a9\u0647 \u062a\u0627 \u0634\u0646\u0628\u0647 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u060c \u00ab\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u0634\u00bb \u0628\u0631\u0627\u06cc "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u06f2 \u0645\u0627\u0647 \u0631\u0627\u06cc\u06af\u0627\u0646\u0647"
                        }
                      </span>
                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0627\u06af\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647\u06cc \u062f\u0627\u0631\u06cc \u06a9\u0647 \u0647\u0646\u0648\u0632 \u0628\u0647 \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0627\u0636\u0627\u0641\u0647 \u0646\u06a9\u0631\u062f\u06cc\u060c \u0627\u0644\u0627\u0646 \u0648\u0642\u062a\u0634\u0647! \u0648\u0627\u0633\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u062c\u062f\u06cc\u062f\u060c \u0633\u06cc\u0633\u062a\u0645 \u00ab\u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0632\u0631\u0648\u0647\u0627\u00bb"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          " \u062a\u0627 \u06f2 \u0645\u0627\u0647 \u0631\u0627\u06cc\u06af\u0627\u0646\u0647"
                        }
                      </span>
                      <React.Fragment>{"!"}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4D7G)}>
              <div
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.button3
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://www.goftino.com/c/WgsGXv");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {
                  "\u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mwimi)}>
            <div className={classNames(projectcss.all, sty.freeBox___0DrsG)}>
              <div className={classNames(projectcss.all, sty.freeBox__zFg1J)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lSTn)}
                  displayHeight={"91px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "114px"
                      : "auto"
                  }
                  height={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                  loading={"lazy"}
                  src={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? {
                          src: "/plasmic/website_starter/images/addPng.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }
                      : {
                          src: "/plasmic/website_starter/images/addPng.png",
                          fullWidth: 200,
                          fullHeight: 200,
                          aspectRatio: undefined
                        }
                  }
                  width={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "120"
                      : undefined
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bhvyT)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3O9Q
                  )}
                >
                  {
                    "\u062b\u0628\u062a\u200c\u0646\u0627\u0645 \u062f\u0631 \u0633\u0627\u06cc\u062a \u062c\u062f\u06cc\u062f"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jwoUt
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u06f7 \u062a\u0627 \u0633\u0627\u06cc\u062a \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0631\u0648 \u062a\u062d\u062a \u067e\u0648\u0634\u0634 \u062f\u0627\u0631\u0647. \u0627\u06af\u0647 \u0648\u06cc\u0644\u0627\u062a \u062a\u0648\u06cc \u0647\u0645\u0647\u200c\u06cc \u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627 \u062b\u0628\u062a \u0646\u0634\u062f\u0647\u060c "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0645\u0627 \u0631\u0627\u06cc\u06af\u0627\u0646 \u0627\u0646\u062c\u0627\u0645\u0634 \u0645\u06cc\u200c\u062f\u06cc\u0645"
                      }
                    </span>
                    <React.Fragment>{"!"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___51EI4)}>
              <div
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.button2
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (window.location.href =
                                "https://www.goftino.com/c/WgsGXv");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {
                  "\u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0631\u0648 \u0628\u0631\u0627\u0645 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__olNiN)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href =
                            "https://www.rentamon.com/");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hKseF
                )}
              >
                {"\u0628\u0627\u0632\u06af\u0634\u062a"}
              </div>
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  yalda: [
    "yalda",
    "embedHtml",
    "button5",
    "button4",
    "button3",
    "button2",
    "button"
  ],
  embedHtml: ["embedHtml"],
  button5: ["button5"],
  button4: ["button4"],
  button3: ["button3"],
  button2: ["button2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  yalda: "div";
  embedHtml: typeof Embed;
  button5: "div";
  button4: "div";
  button3: "div";
  button2: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicYalda__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicYalda__VariantsArgs;
    args?: PlasmicYalda__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicYalda__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicYalda__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicYalda__ArgProps,
          internalVariantPropNames: PlasmicYalda__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicYalda__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "yalda") {
    func.displayName = "PlasmicYalda";
  } else {
    func.displayName = `PlasmicYalda.${nodeName}`;
  }
  return func;
}

export const PlasmicYalda = Object.assign(
  // Top-level PlasmicYalda renders the root element
  makeNodeComponent("yalda"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    button5: makeNodeComponent("button5"),
    button4: makeNodeComponent("button4"),
    button3: makeNodeComponent("button3"),
    button2: makeNodeComponent("button2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicYalda
    internalVariantProps: PlasmicYalda__VariantProps,
    internalArgProps: PlasmicYalda__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicYalda;
/* prettier-ignore-end */
