// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: JDKbvzOHcQCj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Wallet from "../../Wallet"; // plasmic-import: bHX7IYOtGqc7/component
import Profile from "../../Profile"; // plasmic-import: 35iXAFb28kzU/component
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: MR9MOBuvKPN3/codeComponent
import DayCell from "../../DayCell"; // plasmic-import: cU6Nt4MA6DXT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: JDKbvzOHcQCj/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  wallet?: Flex__<typeof Wallet>;
  profile?: Flex__<typeof Profile>;
  calendarView?: Flex__<typeof DataFetcher>;
  fragmentDatePicker?: Flex__<typeof DatePicker>;
  dayCell?: Flex__<typeof DayCell>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentDatePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__co91K)}>
            <div className={classNames(projectcss.all, sty.freeBox___3Lpss)}>
              <DataFetcher
                data-plasmic-name={"httpRestApiFetcher"}
                data-plasmic-override={overrides.httpRestApiFetcher}
                className={classNames("__wab_instance", sty.httpRestApiFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yOg4X
                        )}
                      >
                        {"Error fetching data"}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  authorization:
                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjQ5MTYwLCJpYXQiOjE3MjM4ODExNjAsImp0aSI6IjZjZmQ0YWZhNjMwZTQ1Yzg4ZmY1ZGU4NmY4Y2YyNjAzIiwidXNlcl9pZCI6NDY2fQ.clklsxrxx5HrjKxBi8rmb1sl2lrmGJ2tc0_Lkb_4T84"
                }}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8TX84
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                url={(() => {
                  try {
                    return "https://rentamon-api.liara.run/api/user_info?property_id=1";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Wallet
                      data-plasmic-name={"wallet"}
                      data-plasmic-override={overrides.wallet}
                      className={classNames("__wab_instance", sty.wallet)}
                    />
                  )}
                </DataCtxReader__>
              </DataFetcher>
              <Profile
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames("__wab_instance", sty.profile)}
              />
            </div>
          </div>
          <DataFetcher
            data-plasmic-name={"calendarView"}
            data-plasmic-override={overrides.calendarView}
            className={classNames("__wab_instance", sty.calendarView)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              Authorization:
                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM1MTI3MjExLCJpYXQiOjE3MjQ3NTkyMTEsImp0aSI6ImEzMjM0NmZkZDI0YTRhMmM4NTVjYzZjODk0ZTU1OGIyIiwidXNlcl9pZCI6NDY2fQ.lugJMePj_9ncCWnpmlAOqv_dsaoyv41iUWQ7WicQSp4"
            }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            url={
              "https://rentamon-api.liara.run/api/getcalendar?property_id=1&start_date=1403-06-01&end_date=1403-06-31"
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <DatePicker
                  data-plasmic-name={"fragmentDatePicker"}
                  data-plasmic-override={overrides.fragmentDatePicker}
                  className={classNames(
                    "__wab_instance",
                    sty.fragmentDatePicker
                  )}
                  customDayCell={true}
                  dayCell={(dateProps: any) => (
                    <DayCell
                      data-plasmic-name={"dayCell"}
                      data-plasmic-override={overrides.dayCell}
                      className={classNames("__wab_instance", sty.dayCell)}
                      dayNumber={(() => {
                        try {
                          return dateProps.date.day;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      dayStatus={(() => {
                        try {
                          return (() => {
                            if (
                              dateProps.unix <
                              new Date().setHours(0, 0, 0, 0) / 1000
                            ) {
                              return "disabled";
                            }
                            if (dateProps.isSelected) {
                              return "selected";
                            }
                            if (
                              $ctx.fetchedData.calendar[dateProps.date.day - 1]
                                .status === "reserved"
                            ) {
                              return "reserved";
                            }
                            if (
                              $ctx.fetchedData.calendar[dateProps.date.day - 1]
                                .status === "blocked"
                            ) {
                              return "blocked";
                            }
                            if (
                              $ctx.fetchedData.calendar[dateProps.date.day - 1]
                                .discount_percentage != 0 &&
                              $ctx.fetchedData.calendar[dateProps.date.day - 1]
                                .discount_percentage != null
                            ) {
                              return "discount";
                            }
                            return $ctx.fetchedData.calendar[
                              dateProps.date.day - 1
                            ].status;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      platform={(() => {
                        try {
                          return $ctx.fetchedData.calendar[
                            dateProps.date.day - 1
                          ].website;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      price={(() => {
                        try {
                          return $ctx.fetchedData.calendar[
                            dateProps.date.day - 1
                          ].price;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      selected={(() => {
                        try {
                          return dateProps.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    />
                  )}
                  holidays={[]}
                  locale={"fa"}
                  mode={"multiple"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentDatePicker",
                      "value"
                    ]).apply(null, eventArgs);
                    generateStateOnChangeProp($state, [
                      "fragmentDatePicker",
                      "values"
                    ]).apply(null, eventArgs);
                  }}
                  value={generateStateValueProp($state, [
                    "fragmentDatePicker",
                    "value"
                  ])}
                  values={generateStateValueProp($state, [
                    "fragmentDatePicker",
                    "values"
                  ])}
                />
              )}
            </DataCtxReader__>
          </DataFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "wallet",
    "profile",
    "calendarView",
    "fragmentDatePicker",
    "dayCell"
  ],
  httpRestApiFetcher: ["httpRestApiFetcher", "wallet"],
  wallet: ["wallet"],
  profile: ["profile"],
  calendarView: ["calendarView", "fragmentDatePicker", "dayCell"],
  fragmentDatePicker: ["fragmentDatePicker", "dayCell"],
  dayCell: ["dayCell"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  wallet: typeof Wallet;
  profile: typeof Profile;
  calendarView: typeof DataFetcher;
  fragmentDatePicker: typeof DatePicker;
  dayCell: typeof DayCell;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    wallet: makeNodeComponent("wallet"),
    profile: makeNodeComponent("profile"),
    calendarView: makeNodeComponent("calendarView"),
    fragmentDatePicker: makeNodeComponent("fragmentDatePicker"),
    dayCell: makeNodeComponent("dayCell"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
