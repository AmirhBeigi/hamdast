// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: JDKbvzOHcQCj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Wallet from "../../Wallet"; // plasmic-import: bHX7IYOtGqc7/component
import PropertyName from "../../PropertyName"; // plasmic-import: 35iXAFb28kzU/component
import Calendar2 from "../../Calendar2"; // plasmic-import: RNhZtlNmydsH/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: JDKbvzOHcQCj/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  wallet?: Flex__<typeof Wallet>;
  propertyName?: Flex__<typeof PropertyName>;
  calendar2?: Flex__<typeof Calendar2>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "propertyId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__co91K)}>
            <div className={classNames(projectcss.all, sty.freeBox___3Lpss)}>
              <DataFetcher
                data-plasmic-name={"httpRestApiFetcher"}
                data-plasmic-override={overrides.httpRestApiFetcher}
                className={classNames("__wab_instance", sty.httpRestApiFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yOg4X
                        )}
                      >
                        {"Error fetching data"}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  authorization:
                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjQ5MTYwLCJpYXQiOjE3MjM4ODExNjAsImp0aSI6IjZjZmQ0YWZhNjMwZTQ1Yzg4ZmY1ZGU4NmY4Y2YyNjAzIiwidXNlcl9pZCI6NDY2fQ.clklsxrxx5HrjKxBi8rmb1sl2lrmGJ2tc0_Lkb_4T84"
                }}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8TX84
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                url={(() => {
                  try {
                    return "https://rentamon-api.liara.run/api/user_info?property_id=1";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Wallet
                      data-plasmic-name={"wallet"}
                      data-plasmic-override={overrides.wallet}
                      className={classNames("__wab_instance", sty.wallet)}
                    />
                  )}
                </DataCtxReader__>
              </DataFetcher>
              <PropertyName
                data-plasmic-name={"propertyName"}
                data-plasmic-override={overrides.propertyName}
                className={classNames("__wab_instance", sty.propertyName)}
              />
            </div>
          </div>
          <Calendar2
            data-plasmic-name={"calendar2"}
            data-plasmic-override={overrides.calendar2}
            className={classNames("__wab_instance", sty.calendar2)}
            propertyId={undefined}
          />

          <div className={classNames(projectcss.all, sty.freeBox__sHoIa)}>
            <div className={classNames(projectcss.all, sty.freeBox___35LCb)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hg5Mj
                )}
              >
                {"Enter some text"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rwxec)}>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    '<script>\r\n\r\n<html lang="en">\r\n  <head>\r\n    <link\r\n      rel="stylesheet"\r\n      href="https://rentamon.com/wp-content/rentamon-content-files/persian-datepicker.css?ver=1.0.2"\r\n    />\r\n    <script src="https://rentamon.com/wp-content/rentamon-content-files/jquery-2.2.4.min.js?ver=1.0.5"></script>\r\n    <script src="https://rentamon.com/wp-content/rentamon-content-files/persian-date.js?ver=1.0.3"></script>\r\n    <script src="https://the-rentamon-co.github.io/Rentamon-Front/persian-datepicker.js?ver=1.1.4"></script>\r\n    <link\r\n      rel="stylesheet"\r\n      href="https://the-rentamon-co.github.io/Rentamon-Front/rentamon_rebuild.css"\r\n    />\r\n  </head>\r\n  <body>\r\n    <div class="rentamon"></div>\r\n    <script>\r\n      // function for checking authentication\r\n      \r\n      // first function for getting cookies\r\n\r\n    \r\n        // Function to verify token\r\n\r\n    // Function to get the value of a cookie by name\r\n    // Function to refresh the token\r\n    async function refreshToken() {\r\n      try {\r\n    \r\n        const response = await fetch(\'https://sso.rentamon.com/auth/refresh\', {\r\n                method: \'GET\',\r\n                credentials:"include"\r\n\r\n            });\r\n        console.log("Refreshed Token in 10 minutes")\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          console.log(\'Token refreshed successfully:\', data);\r\n          // You can handle the new token or any other logic here\r\n        } else {\r\n          console.error(\'Failed to refresh token:\', response.status);\r\n          // Optionally handle the failure (like redirecting the user to login)\r\n        }\r\n      } catch (error) {\r\n        console.error(\'Error refreshing token:\', error);\r\n      }\r\n    }\r\n\r\n// Call the refreshToken function every 10 minutes\r\n    setInterval(refreshToken, 300000);\r\n\r\n// Call it once immediately to ensure the token is refreshed right away\r\n    refreshToken();\r\n\r\n    function getCookie(name) {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(\';\').shift();\r\n    }\r\n    \r\n    // Retrieve the boolean values of the cookies\r\n    // Check for \'usso_refresh_available\' cookie\r\n    const ussoRefreshAvailable = getCookie(\'usso_refresh_available\') || false;\r\n    console.log("this is ussoRefresh: ", ussoRefreshAvailable);\r\n    \r\n    // Check for \'usso_access_available\' cookie\r\n    const ussoAccessAvailable = getCookie(\'usso_access_available\') || false;\r\n    console.log("this is ussoAccessAvailable: ", ussoAccessAvailable);\r\n\r\n\r\n    \r\n    // Check if access is available\r\n    if (!ussoAccessAvailable) {\r\n        // Check the usso_refresh_available flag\r\n        if (!ussoRefreshAvailable) {\r\n            // Redirect the user\r\n            console.log("got here in redirect")\r\n            window.location.href = \'https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/panel\';\r\n        } else {\r\n            // Call the refresh endpoint\r\n            console.log("got here in refreshToken")\r\n            fetch(\'https://sso.rentamon.com/auth/refresh\', {\r\n                method: \'GET\',\r\n                credentials:"include"\r\n            })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(\'Failed to refresh token\');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                // Handle the new access token\r\n                console.log(\'Token refreshed:\', data);\r\n                // You may need to set the new token in your backend or notify the user\r\n            })\r\n            .catch(error => {\r\n                console.error(\'Error:\', error);\r\n                // Redirect if the refresh fails\r\n                window.location.href = \'https://sso.rentamon.com/web/index.html?callback=https://rentamon.com/panel\';\r\n            });\r\n        }\r\n    }\r\n\r\n  \r\n      // starting the page\r\n      var rBody = document.querySelector(".rentamon");\r\n      var newDiv = document.createElement("div");\r\n      var newScript = document.createElement("script");\r\n      newScript.src =\r\n        "https://the-rentamon-co.github.io/Rentamon-Front/dev_rentamon.js";\r\n      newDiv.innerHTML = `<div class="loading-overlay-calendar" style="display: none">\r\n      <div class="loading-spinner-calendar"></div>\r\n      <p class="loading-text-calendar">\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062a\u0642\u0648\u06cc\u0645 \u0647\u0627</p>\r\n    </div>\r\n    <div class="inline"></div>\r\n    <script>alert("hi")<\\/script>\r\n    <div class="form">\r\n      <label>\r\n        <input\r\n          type="radio"\r\n          id="reserve"\r\n          name="block"\r\n          value="reserve"\r\n          class="reserve"\r\n        />\r\n\r\n        \u0631\u0632\u0631\u0648</label\r\n      >\r\n\r\n      <label>\r\n        <input\r\n          type="radio"\r\n          id="block"\r\n          name="block"\r\n          value="block"\r\n          class="block"\r\n        />\r\n        \u063a\u06cc\u0631\u0641\u0639\u0627\u0644</label\r\n      >\r\n\r\n      <label>\r\n        <input\r\n          type="radio"\r\n          id="unblock"\r\n          name="block"\r\n          value="unblock"\r\n          class="unblock"\r\n        />\r\n\r\n        \u0641\u0639\u0627\u0644</label\r\n      >\r\n\r\n      <label\r\n        ><input\r\n          type="radio"\r\n          id="price"\r\n          name="block"\r\n          value="price"\r\n          class="price"\r\n        />\u0642\u06cc\u0645\u062a</label\r\n      >\r\n\r\n      <label\r\n        ><input\r\n          type="radio"\r\n          id="discount"\r\n          name="block"\r\n          value="discount"\r\n          class="discount"\r\n        />\u062a\u062e\u0641\u06cc\u0641 %</label\r\n      >\r\n    </div>\r\n    <div class="btnActionCont">\r\n      <button class="submit">\u0627\u0639\u0645\u0627\u0644 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a</button>\r\n    </div>`;\r\n\r\n      var c = Object.fromEntries(\r\n        document.cookie.split("; ").map((x) => x.split("="))\r\n      );\r\n      document.addEventListener(\'DOMContentLoaded\', async () => {\r\n        \r\n        rBody.appendChild(newDiv);\r\n        rBody.appendChild(newScript); \r\n        \r\n        \r\n    });\r\n\r\n\r\n    </script>\r\n  </body>\r\n</html>\r\n\r\n\r\n\r\n\r\n</script>'
                  }
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "wallet",
    "propertyName",
    "calendar2",
    "embedHtml"
  ],
  httpRestApiFetcher: ["httpRestApiFetcher", "wallet"],
  wallet: ["wallet"],
  propertyName: ["propertyName"],
  calendar2: ["calendar2"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  wallet: typeof Wallet;
  propertyName: typeof PropertyName;
  calendar2: typeof Calendar2;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    wallet: makeNodeComponent("wallet"),
    propertyName: makeNodeComponent("propertyName"),
    calendar2: makeNodeComponent("calendar2"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
