// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: W8sEZ2mUdV1j

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicActivation.module.css"; // plasmic-import: W8sEZ2mUdV1j/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicActivation__VariantMembers = {};
export type PlasmicActivation__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivation__VariantsArgs;
export const PlasmicActivation__VariantProps = new Array<VariantPropType>();

export type PlasmicActivation__ArgsType = {};
type ArgPropType = keyof PlasmicActivation__ArgsType;
export const PlasmicActivation__ArgProps = new Array<ArgPropType>();

export type PlasmicActivation__OverridesType = {
  root?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input2?: Flex__<typeof AntdInput>;
  input?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  demoButton?: Flex__<typeof AntdButton>;
  htmlVideo?: Flex__<typeof Video>;
  getStatus?: Flex__<typeof ApiRequest>;
  jabamaOn?: Flex__<typeof PlasmicImg__>;
  jabamaOff?: Flex__<typeof PlasmicImg__>;
  jajigaOn?: Flex__<typeof PlasmicImg__>;
  jajigaOff?: Flex__<typeof PlasmicImg__>;
  shabOn?: Flex__<typeof PlasmicImg__>;
  shabOff?: Flex__<typeof PlasmicImg__>;
  mizboonOn?: Flex__<typeof PlasmicImg__>;
  mizboonOff2?: Flex__<typeof PlasmicImg__>;
  otaghakOn?: Flex__<typeof PlasmicImg__>;
  otaghakOff?: Flex__<typeof PlasmicImg__>;
  mihmanshoOn?: Flex__<typeof PlasmicImg__>;
  mihmanshoOff?: Flex__<typeof PlasmicImg__>;
  homsaOn?: Flex__<typeof PlasmicImg__>;
  homsaOff?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultActivationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivation__RenderFunc(props: {
  variants: PlasmicActivation__VariantsArgs;
  args: PlasmicActivation__ArgsType;
  overrides: PlasmicActivation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "getStatus.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStatus.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStatus.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__glOQf
            )}
          >
            {
              "\u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627"
            }
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__uh0Zl)}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://dev.rentamon.com/webhook-test/3b12628d-bbf6-4e78-b8d3-e6fca81a792d"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          >
            <Button
              className={classNames("__wab_instance", sty.button__ydCOm)}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://dev.rentamon.com/webhook/activeme",
                          undefined,
                          undefined,
                          {
                            headers: {
                              "Content-Type":
                                "application/x-www-form-urlencoded"
                            }
                          }
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
            >
              {"       \u0641\u0639\u0627\u0644 \u0634\u0648       "}
            </Button>
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__fZsKh)}
                  label={
                    "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627"
                  }
                  name={"jabamaPlatformID"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input2),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input2", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder: (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      size: "large",
                      value: generateStateValueProp($state, ["input2", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input2.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input2"}
                        data-plasmic-override={overrides.input2}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__n0Mx9)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hpP
                      )}
                    >
                      {"\u0627\u062a\u0635\u0627\u0644"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__ntqGk)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://dev.rentamon.com/webhook-test/sendOTP",
                                undefined,
                                (() => {
                                  try {
                                    return $state.form.value.jabamaPlatformID;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hqd3C
                      )}
                    >
                      {"\u062b\u0628\u062a"}
                    </div>
                  </AntdButton>
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField___7MoS)}
                  label={
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627"
                  }
                  name={"jabamaPhone"}
                >
                  {(() => {
                    const child$Props = {
                      allowClear: true,
                      bordered: false,
                      className: classNames("__wab_instance", sty.input),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder:
                        "\u06f0\u06f9\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9 \u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631 \u0628\u0632\u0646 \u0627\u06cc\u0646\u200c\u062c\u0627",
                      size: "small",
                      value: generateStateValueProp($state, ["input", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input"}
                        data-plasmic-override={overrides.input}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__fp4QP)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://gateway.rentamon.com/webhook/sendOTP",
                                undefined,
                                (() => {
                                  try {
                                    return $state.form.value.jabamaPhone;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    submitsForm={false}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__toSF
                      )}
                    >
                      {
                        "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                      }
                    </div>
                  </AntdButton>
                </FormItemWrapper>
                <div className={classNames(projectcss.all, sty.freeBox__nwSdk)}>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__lqQs6
                    )}
                    label={"\u06a9\u062f \u0639\u0628\u0648\u0631"}
                    name={"jabamaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input3", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___9Nl4N
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "GET",
                                  "https://dev.rentamon.com/webhook-test/sendOTP",
                                  undefined,
                                  (() => {
                                    try {
                                      return $state.form.value.jabamaOTP;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aeMyF
                        )}
                      >
                        {"\u0627\u062a\u0635\u0627\u0644"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                </div>
              </FormWrapper>
            );
          })()}
          <div className={classNames(projectcss.all, sty.freeBox__oSjS)}>
            <AntdButton
              data-plasmic-name={"demoButton"}
              data-plasmic-override={overrides.demoButton}
              className={classNames("__wab_instance", sty.demoButton)}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u4BCy
                )}
              >
                {
                  "\u067e\u06cc\u062f\u0627 \u06a9\u0631\u062f\u0646 \u06a9\u062f \u0648 \u0644\u06cc\u0646\u06a9 \u062c\u0627\u0628\u0627\u0645\u0627"
                }
              </div>
            </AntdButton>
            <Video
              data-plasmic-name={"htmlVideo"}
              data-plasmic-override={overrides.htmlVideo}
              className={classNames("__wab_instance", sty.htmlVideo)}
              controls={true}
              src={
                "https://rentamon.com/wp-content/uploads/2024/11/JabamaCode.mp4"
              }
            />
          </div>
          <ApiRequest
            data-plasmic-name={"getStatus"}
            data-plasmic-override={overrides.getStatus}
            className={classNames("__wab_instance", sty.getStatus)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9QvR8
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hjyWs
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"POST"}
            onError={generateStateOnChangeProp($state, ["getStatus", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "getStatus",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, ["getStatus", "data"])}
            url={"https://gateway.rentamon.com/webhook/activate"}
          >
            <div className={classNames(projectcss.all, sty.freeBox___2UYl)}>
              {(() => {
                try {
                  return $state.getStatus.data[6].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"jabamaOn"}
                  data-plasmic-override={overrides.jabamaOn}
                  alt={""}
                  className={classNames(sty.jabamaOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/jabama.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[6].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"jabamaOff"}
                  data-plasmic-override={overrides.jabamaOff}
                  alt={""}
                  className={classNames(sty.jabamaOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/jabama.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[0].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"jajigaOn"}
                  data-plasmic-override={overrides.jajigaOn}
                  alt={""}
                  className={classNames(sty.jajigaOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/jajiga.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[0].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"jajigaOff"}
                  data-plasmic-override={overrides.jajigaOff}
                  alt={""}
                  className={classNames(sty.jajigaOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/jajiga.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[3].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"shabOn"}
                  data-plasmic-override={overrides.shabOn}
                  alt={""}
                  className={classNames(sty.shabOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/shab.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[3].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"shabOff"}
                  data-plasmic-override={overrides.shabOff}
                  alt={""}
                  className={classNames(sty.shabOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/shab.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[3].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"mizboonOn"}
                  data-plasmic-override={overrides.mizboonOn}
                  alt={""}
                  className={classNames(sty.mizboonOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/mizboon.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[3].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"mizboonOff2"}
                  data-plasmic-override={overrides.mizboonOff2}
                  alt={""}
                  className={classNames(sty.mizboonOff2)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/mizboon.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[2].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"otaghakOn"}
                  data-plasmic-override={overrides.otaghakOn}
                  alt={""}
                  className={classNames(sty.otaghakOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/otaghak-1.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[2].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"otaghakOff"}
                  data-plasmic-override={overrides.otaghakOff}
                  alt={""}
                  className={classNames(sty.otaghakOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/otaghak-1.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[5].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"mihmanshoOn"}
                  data-plasmic-override={overrides.mihmanshoOn}
                  alt={""}
                  className={classNames(sty.mihmanshoOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/mihmansho2.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[5].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"mihmanshoOff"}
                  data-plasmic-override={overrides.mihmanshoOff}
                  alt={""}
                  className={classNames(sty.mihmanshoOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/mihmansho2.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[4].status === "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"homsaOn"}
                  data-plasmic-override={overrides.homsaOn}
                  alt={""}
                  className={classNames(sty.homsaOn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/homsa.png"
                  }
                  width={"40"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getStatus.data[4].status === "false";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  data-plasmic-name={"homsaOff"}
                  data-plasmic-override={overrides.homsaOff}
                  alt={""}
                  className={classNames(sty.homsaOff)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"40"}
                  loading={"lazy"}
                  src={
                    "https://rentamon.com/wp-content/uploads/2024/02/homsa.png"
                  }
                  width={"40"}
                />
              ) : null}
            </div>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "input2",
    "input",
    "input3",
    "demoButton",
    "htmlVideo",
    "getStatus",
    "jabamaOn",
    "jabamaOff",
    "jajigaOn",
    "jajigaOff",
    "shabOn",
    "shabOff",
    "mizboonOn",
    "mizboonOff2",
    "otaghakOn",
    "otaghakOff",
    "mihmanshoOn",
    "mihmanshoOff",
    "homsaOn",
    "homsaOff"
  ],
  form: ["form", "input2", "input", "input3"],
  input2: ["input2"],
  input: ["input"],
  input3: ["input3"],
  demoButton: ["demoButton"],
  htmlVideo: ["htmlVideo"],
  getStatus: [
    "getStatus",
    "jabamaOn",
    "jabamaOff",
    "jajigaOn",
    "jajigaOff",
    "shabOn",
    "shabOff",
    "mizboonOn",
    "mizboonOff2",
    "otaghakOn",
    "otaghakOff",
    "mihmanshoOn",
    "mihmanshoOff",
    "homsaOn",
    "homsaOff"
  ],
  jabamaOn: ["jabamaOn"],
  jabamaOff: ["jabamaOff"],
  jajigaOn: ["jajigaOn"],
  jajigaOff: ["jajigaOff"],
  shabOn: ["shabOn"],
  shabOff: ["shabOff"],
  mizboonOn: ["mizboonOn"],
  mizboonOff2: ["mizboonOff2"],
  otaghakOn: ["otaghakOn"],
  otaghakOff: ["otaghakOff"],
  mihmanshoOn: ["mihmanshoOn"],
  mihmanshoOff: ["mihmanshoOff"],
  homsaOn: ["homsaOn"],
  homsaOff: ["homsaOff"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  form: typeof FormWrapper;
  input2: typeof AntdInput;
  input: typeof AntdInput;
  input3: typeof AntdInput;
  demoButton: typeof AntdButton;
  htmlVideo: typeof Video;
  getStatus: typeof ApiRequest;
  jabamaOn: typeof PlasmicImg__;
  jabamaOff: typeof PlasmicImg__;
  jajigaOn: typeof PlasmicImg__;
  jajigaOff: typeof PlasmicImg__;
  shabOn: typeof PlasmicImg__;
  shabOff: typeof PlasmicImg__;
  mizboonOn: typeof PlasmicImg__;
  mizboonOff2: typeof PlasmicImg__;
  otaghakOn: typeof PlasmicImg__;
  otaghakOff: typeof PlasmicImg__;
  mihmanshoOn: typeof PlasmicImg__;
  mihmanshoOff: typeof PlasmicImg__;
  homsaOn: typeof PlasmicImg__;
  homsaOff: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivation__VariantsArgs;
    args?: PlasmicActivation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivation__ArgProps,
          internalVariantPropNames: PlasmicActivation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivation";
  } else {
    func.displayName = `PlasmicActivation.${nodeName}`;
  }
  return func;
}

export const PlasmicActivation = Object.assign(
  // Top-level PlasmicActivation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input2: makeNodeComponent("input2"),
    input: makeNodeComponent("input"),
    input3: makeNodeComponent("input3"),
    demoButton: makeNodeComponent("demoButton"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    getStatus: makeNodeComponent("getStatus"),
    jabamaOn: makeNodeComponent("jabamaOn"),
    jabamaOff: makeNodeComponent("jabamaOff"),
    jajigaOn: makeNodeComponent("jajigaOn"),
    jajigaOff: makeNodeComponent("jajigaOff"),
    shabOn: makeNodeComponent("shabOn"),
    shabOff: makeNodeComponent("shabOff"),
    mizboonOn: makeNodeComponent("mizboonOn"),
    mizboonOff2: makeNodeComponent("mizboonOff2"),
    otaghakOn: makeNodeComponent("otaghakOn"),
    otaghakOff: makeNodeComponent("otaghakOff"),
    mihmanshoOn: makeNodeComponent("mihmanshoOn"),
    mihmanshoOff: makeNodeComponent("mihmanshoOff"),
    homsaOn: makeNodeComponent("homsaOn"),
    homsaOff: makeNodeComponent("homsaOff"),

    // Metadata about props expected for PlasmicActivation
    internalVariantProps: PlasmicActivation__VariantProps,
    internalArgProps: PlasmicActivation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivation;
/* prettier-ignore-end */
