// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: RNhZtlNmydsH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { DatePicker } from "@/fragment/components/date-picker"; // plasmic-import: MR9MOBuvKPN3/codeComponent
import DayCell from "../../DayCell"; // plasmic-import: cU6Nt4MA6DXT/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicCalendar2.module.css"; // plasmic-import: RNhZtlNmydsH/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicCalendar2__VariantMembers = {};
export type PlasmicCalendar2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCalendar2__VariantsArgs;
export const PlasmicCalendar2__VariantProps = new Array<VariantPropType>();

export type PlasmicCalendar2__ArgsType = {
  propertyId?: number;
};
type ArgPropType = keyof PlasmicCalendar2__ArgsType;
export const PlasmicCalendar2__ArgProps = new Array<ArgPropType>("propertyId");

export type PlasmicCalendar2__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  مشکلدربرقراریارتط?: Flex__<"div">;
  fragmentDatePicker?: Flex__<typeof DatePicker>;
  dayCell?: Flex__<typeof DayCell>;
  modalDiscount?: Flex__<typeof AntdModal>;
  numberInput3?: Flex__<typeof AntdInputNumber>;
  modal?: Flex__<typeof AntdModal>;
  modalChangePrice?: Flex__<typeof AntdModal>;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  img?: Flex__<typeof PlasmicImg__>;
  fetchModal?: Flex__<typeof AntdModal>;
  userPlatform?: Flex__<typeof ApiRequest>;
  loading2?: Flex__<typeof PlasmicImg__>;
  ok?: Flex__<typeof PlasmicImg__>;
  fail?: Flex__<typeof PlasmicImg__>;
  loading?: Flex__<typeof PlasmicImg__>;
  block?: Flex__<typeof AntdModal>;
};

export interface DefaultCalendar2Props {
  propertyId?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCalendar2__RenderFunc(props: {
  variants: PlasmicCalendar2__VariantsArgs;
  args: PlasmicCalendar2__ArgsType;
  overrides: PlasmicCalendar2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentDatePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.values",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fragmentDatePicker.month",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentDatePicker.year",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalChangePrice.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modalDiscount.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "block.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fetchModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userPlatform.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userPlatform.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userPlatform.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "platformRequestStatus",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "requestdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        children={null}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            data-plasmic-name={
              "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
            }
            data-plasmic-override={overrides.مشکلدربرقراریارتط}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.مشکلدربرقراریارتط
            )}
          >
            {
              "\u0645\u0634\u06a9\u0644 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637"
            }
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
        onLoading={generateStateOnChangeProp($state, ["apiRequest", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["apiRequest", "data"])}
        url={(() => {
          try {
            return (() => {
              let initialMonth = new Date()
                .toLocaleDateString("fa")
                .split("/")[1];
              return `https://api.rentamon.com/api/getcalendar?start_date=1403-${
                $state.fragmentDatePicker?.month?.number ?? initialMonth
              }-01&end_date=1403-${
                $state.fragmentDatePicker?.month?.number ?? initialMonth
              }-30&property_id=1`;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div className={classNames(projectcss.all, sty.freeBox__ppyHd)}>
        <DatePicker
          data-plasmic-name={"fragmentDatePicker"}
          data-plasmic-override={overrides.fragmentDatePicker}
          className={classNames("__wab_instance", sty.fragmentDatePicker)}
          customDayCell={true}
          dayCell={(dateProps: any) => (
            <DayCell
              data-plasmic-name={"dayCell"}
              data-plasmic-override={overrides.dayCell}
              className={classNames("__wab_instance", sty.dayCell)}
              dayNumber={(() => {
                try {
                  return (() => {
                    function convertEnglishNumbersToPersian(str) {
                      const englishNumbers = [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"
                      ];

                      const persianNumbers = [
                        "۰",
                        "۱",
                        "۲",
                        "۳",
                        "۴",
                        "۵",
                        "۶",
                        "۷",
                        "۸",
                        "۹"
                      ];

                      return str
                        .toString()
                        .replace(
                          /[0-9]/g,
                          char =>
                            persianNumbers[englishNumbers.indexOf(char)] || char
                        );
                    }
                    const englishNumber = dateProps.date.day;
                    const persianNumber =
                      convertEnglishNumbersToPersian(englishNumber);
                    return persianNumber;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              dayStatus={(() => {
                try {
                  return (() => {
                    function convertPersianNumbersToEnglish(str) {
                      const persianNumbers = [
                        "۰",
                        "۱",
                        "۲",
                        "۳",
                        "۴",
                        "۵",
                        "۶",
                        "۷",
                        "۸",
                        "۹"
                      ];

                      const englishNumbers = [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9"
                      ];

                      return str.replace(
                        /[۰-۹]/g,
                        char =>
                          englishNumbers[persianNumbers.indexOf(char)] || char
                      );
                    }
                    const currentDate = new Date();
                    const currentDay = parseInt(
                      convertPersianNumbersToEnglish(
                        currentDate.toLocaleDateString("fa").split("/")[2]
                      )
                    );
                    const currentMonth = parseInt(
                      convertPersianNumbersToEnglish(
                        currentDate.toLocaleDateString("fa").split("/")[1]
                      )
                    );
                    const currentYear = parseInt(
                      convertPersianNumbersToEnglish(
                        currentDate.toLocaleDateString("fa").split("/")[0]
                      )
                    );
                    const nextMonthDate = new Date(
                      new Date().setMonth(currentDate.getMonth() + 1)
                    );
                    const nextMonth = parseInt(
                      convertPersianNumbersToEnglish(
                        nextMonthDate.toLocaleDateString("fa").split("/")[1]
                      )
                    );
                    const nextMonthYear = parseInt(
                      convertPersianNumbersToEnglish(
                        nextMonthDate.toLocaleDateString("fa").split("/")[0]
                      )
                    );
                    const targetDate = new Date(dateProps.unix * 1000);
                    const targetDay = parseInt(
                      convertPersianNumbersToEnglish(
                        targetDate.toLocaleDateString("fa").split("/")[2]
                      )
                    );
                    const targetMonth = parseInt(
                      convertPersianNumbersToEnglish(
                        targetDate.toLocaleDateString("fa").split("/")[1]
                      )
                    );
                    const targetYear = parseInt(
                      convertPersianNumbersToEnglish(
                        targetDate.toLocaleDateString("fa").split("/")[0]
                      )
                    );
                    if (
                      (targetYear === currentYear &&
                        targetMonth === currentMonth &&
                        targetDay < currentDay) ||
                      targetYear < currentYear ||
                      (targetYear === currentYear &&
                        targetMonth < currentMonth) ||
                      targetYear > nextMonthYear ||
                      (targetYear === nextMonthYear && targetMonth > nextMonth)
                    ) {
                      return "disabled";
                    }
                    if (dateProps.isSelected) {
                      return "selected";
                    }
                    if (
                      $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .status === "reserved"
                    ) {
                      return "reserved";
                    }
                    if (
                      $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .status === "blocked"
                    ) {
                      return "blocked";
                    }
                    if (
                      $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .discount_percentage != 0 &&
                      $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .discount_percentage != null
                    ) {
                      return "discount";
                    }
                    return $state.apiRequest.data.calendar[
                      dateProps.date.day - 1
                    ].status;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              platform={(() => {
                try {
                  return $state.apiRequest.data.calendar[dateProps.date.day - 1]
                    .website === "host"
                    ? "رزرو"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "jajiga"
                    ? "جاجیگا"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "jabama"
                    ? "جاباما"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "shab"
                    ? "شب"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "homsa"
                    ? "هومسا"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "mihmansho"
                    ? "میهمان شو"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "otaghak"
                    ? "اتاقک"
                    : $state.apiRequest.data.calendar[dateProps.date.day - 1]
                        .website === "mizboon"
                    ? "میزبون"
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              price={
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return (() => {
                          const price =
                            $state.apiRequest.data.calendar[
                              dateProps.date.day - 1
                            ]?.price;
                          const formattedPersianPrice = price
                            ? new Intl.NumberFormat("fa-IR").format(
                                price / 1000
                              )
                            : null;
                          return formattedPersianPrice;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (() => {
                          const calendarItem =
                            $state.apiRequest.data.calendar[
                              dateProps.date.day - 1
                            ];
                          if (calendarItem) {
                            const price = calendarItem.price;
                            const discountPercentage =
                              calendarItem.discount_percentage;
                            const finalPrice = discountPercentage
                              ? price - (price * discountPercentage) / 100
                              : price;
                            const formattedPersianPrice = finalPrice
                              ? new Intl.NumberFormat("fa-IR").format(
                                  finalPrice / 1000
                                )
                              : null;
                            return formattedPersianPrice;
                          } else {
                            return null;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              selected={(() => {
                try {
                  return dateProps.isSelected;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />
          )}
          holidays={[]}
          locale={"fa"}
          mode={"multiple"}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "value"
            ]).apply(null, eventArgs);
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "values"
            ]).apply(null, eventArgs);
          }}
          onMonthChange={generateStateOnChangeProp($state, [
            "fragmentDatePicker",
            "month"
          ])}
          onYearChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "fragmentDatePicker",
              "year"
            ]).apply(null, eventArgs);
            (async year => {
              const $steps = {};

              $steps["updateFragmentDatePickerValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["fragmentDatePicker", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFragmentDatePickerValue"] != null &&
                typeof $steps["updateFragmentDatePickerValue"] === "object" &&
                typeof $steps["updateFragmentDatePickerValue"].then ===
                  "function"
              ) {
                $steps["updateFragmentDatePickerValue"] = await $steps[
                  "updateFragmentDatePickerValue"
                ];
              }
            }).apply(null, eventArgs);
          }}
          value={generateStateValueProp($state, [
            "fragmentDatePicker",
            "value"
          ])}
          values={generateStateValueProp($state, [
            "fragmentDatePicker",
            "values"
          ])}
        />

        <AntdModal
          data-plasmic-name={"modalDiscount"}
          data-plasmic-override={overrides.modalDiscount}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalDiscount)}
          closeButtonClassName={classNames({
            [sty["pcls_vDiFMqMbDVYz"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          modalContentClassName={classNames({
            [sty["pcls_sRCzGPSdqNqE"]]: true
          })}
          modalScopeClassName={sty["modalDiscount__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};

            $steps["updateFetchModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fetchModal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateFetchModalOpen"] != null &&
              typeof $steps["updateFetchModalOpen"] === "object" &&
              typeof $steps["updateFetchModalOpen"].then === "function"
            ) {
              $steps["updateFetchModalOpen"] = await $steps[
                "updateFetchModalOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        undefined;
                        function convertTimestampToPersianDate(timestamp) {
                          const date = new Date(timestamp * 1000);
                          return date
                            .toLocaleDateString("fa")
                            .replace(/\//g, "-");
                        }
                        const data = {
                          days: [$state.fragmentDatePicker.values],
                          property_id: $props.propertyId,
                          discount: $state.numberInput3.value
                        };
                        data.days = data.days
                          .map(timestampArray =>
                            timestampArray.map(timestamp =>
                              convertTimestampToPersianDate(timestamp)
                            )
                          )
                          .flat();
                        return fetch(
                          "https://api.rentamon.com/api/setdiscount",
                          {
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              Accept: "*/*",
                              authorization:
                                "Bearer eyJhbGciOiJSUzI1NiIsImhvc3QiOiJzc28ucmVudGFtb24uY29tIiwia2lkIjoiMmFkMGFmNTQ3NmI5NjA1NjIwODc3ZDc1MTUzNGU3NWMxNWMwMzAwNmEzNWZlN2UyZWNkNGMwYmY1ZDg0MTE5OSIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidV85OGUwZmFhMy1jMzI2LTQwZjUtODJiYS03NWJmMTcwYTJjYWYiLCJ3b3Jrc3BhY2VfaWQiOiJ1Xzk4ZTBmYWEzLWMzMjYtNDBmNS04MmJhLTc1YmYxNzBhMmNhZiIsIndvcmtzcGFjZV9pZHMiOltdLCJpYXQiOjE3MzMyMzY5OTAsImV4cCI6MTczMzIzODc5MCwianRpIjoianRpXzZkZDJhZDk2LWNlYzctNDVlNS04ZjE2LTY1NzVjNjU1NmYxNSIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJwaG9uZSI6Ijk4OTAzODc3ODYwNiIsImF1dGhlbnRpY2F0aW9uX21ldGhvZCI6InBob25lL290cCIsImlzX2FjdGl2ZSI6dHJ1ZX0.NKEw3CPFvWL6GJWDVU6nhy_TpFwxjETRvtsJxByLx8dGOeWABbOygME4R0V9UqhvaOD5AP6bxwJPwoi7YFTbQRwoqrEiAim07Mime4LpbegTc7s1982O7OXfzBnolnlgLExjAnwsdsy28CD0q1dXYWAaKqP3Zlk2dVuUjA9HpZ8VDTWviCLpOgKAFM8mV_yioe7W5TN0EdRjRRVJlb0CXLXZYLfbefSmJwYkq_Z5jglKHYDE62IYk2DIan6HsXdEOa6oCUSuA8N3iih_Sr2OPBpCGqlXexGs03vbYq6ki-hlujIhV6B1zZFIiU3CHfwHFIvV8T-goLNUwGkMshE2ow"
                            },
                            body: JSON.stringify(data)
                          }
                        )
                          .then(response => {
                            if (!response.ok) {
                              throw new Error(
                                `HTTP error! status: ${response.status}`
                              );
                            }
                            return response.json();
                          })
                          .then(result => {
                            $state.platformRequestStatus = result;
                            console.log("Response saved to state:", result);
                          })
                          .catch(error => {
                            console.error("Error:", error);
                            $state.platformRequestStatus = {
                              error: error.message
                            };
                          });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: (() => {
                      $state.fragmentDatePicker.values = [];
                      return $state.fragmentDatePicker.values;
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
          onOpenChange={generateStateOnChangeProp($state, [
            "modalDiscount",
            "open"
          ])}
          open={generateStateValueProp($state, ["modalDiscount", "open"])}
          title={
            "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641\ud83d\udd25\u0631\u0648 \u0645\u0634\u062e\u0635 \u06a9\u0646\n"
          }
          trigger={null}
          wrapClassName={classNames({ [sty["pcls_vzTJKtxZntdc"]]: true })}
        >
          <div className={classNames(projectcss.all, sty.columns__iCQj8)}>
            <div className={classNames(projectcss.all, sty.column___5TW2A)}>
              <Button
                className={classNames("__wab_instance", sty.button___8UkxY)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCount"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          variable: {
                            objRoot: $state,
                            variablePath: ["count"]
                          },
                          value: ($state.count = Math.min($state.count + 5, 60))
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCount"] != null &&
                    typeof $steps["updateCount"] === "object" &&
                    typeof $steps["updateCount"].then === "function"
                  ) {
                    $steps["updateCount"] = await $steps["updateCount"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fwejG
                  )}
                >
                  {"+"}
                </div>
              </Button>
            </div>
            <div className={classNames(projectcss.all, sty.column__aLaJh)}>
              <AntdInputNumber
                data-plasmic-name={"numberInput3"}
                data-plasmic-override={overrides.numberInput3}
                className={classNames("__wab_instance", sty.numberInput3)}
                controls={false}
                onChange={generateStateOnChangeProp($state, [
                  "numberInput3",
                  "value"
                ])}
                placeholder={"\u0645\u062b\u0644\u0627 \u06f2\u06f5"}
                readOnly={true}
                type={"number"}
                value={generateStateValueProp($state, [
                  "numberInput3",
                  "value"
                ])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.column__mqAFp)}>
              <Button
                className={classNames("__wab_instance", sty.button__eiNeQ)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCount"] = true
                    ? (() => {
                        const actionArgs = {
                          operation: 0,
                          value: ($state.count = Math.max(0, $state.count - 5)),
                          variable: {
                            objRoot: $state,
                            variablePath: ["count"]
                          }
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCount"] != null &&
                    typeof $steps["updateCount"] === "object" &&
                    typeof $steps["updateCount"].then === "function"
                  ) {
                    $steps["updateCount"] = await $steps["updateCount"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__muGte
                  )}
                >
                  {"-"}
                </div>
              </Button>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.columns__yd7Mi)}>
            <div className={classNames(projectcss.all, sty.column__vGth9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Vj2
                )}
              >
                {
                  "\u0627\u0645\u06a9\u0627\u0646 \u062a\u062e\u0641\u06cc\u0641 \u06a9\u0645\u200c\u062a\u0631 \u0627\u0632 \u06f1\u06f0\u066a \u0628\u0631\u0627\u06cc \u0634\u0628 \u0646\u06cc\u0633\u062a"
                }
              </div>
            </div>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          cancelText={``}
          className={classNames("__wab_instance", sty.modal)}
          closeButtonClassName={classNames({
            [sty["pcls_KoCmthm6Q3G0"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={true}
          modalContentClassName={classNames({
            [sty["pcls_4Zf6687U_eIh"]]: true
          })}
          modalScopeClassName={sty["modal__modal"]}
          okText={``}
          onOk={async () => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      undefined,
                      undefined,
                      (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
          onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
          open={generateStateValueProp($state, ["modal", "open"])}
          title={null}
          trigger={null}
          width={"200"}
        >
          <section
            className={classNames(projectcss.all, sty.section__rqNfm)}
            onClick={async event => {
              const $steps = {};

              $steps["updateBlockOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["block", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateBlockOpen"] != null &&
                typeof $steps["updateBlockOpen"] === "object" &&
                typeof $steps["updateBlockOpen"].then === "function"
              ) {
                $steps["updateBlockOpen"] = await $steps["updateBlockOpen"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gTTy
              )}
            >
              {"\u067e\u064f\u0640\u0631"}
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__xsRl)}
            onClick={async event => {
              const $steps = {};
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rlhEr
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateFetchModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["fetchModal", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFetchModalOpen"] != null &&
                  typeof $steps["updateFetchModalOpen"] === "object" &&
                  typeof $steps["updateFetchModalOpen"].then === "function"
                ) {
                  $steps["updateFetchModalOpen"] = await $steps[
                    "updateFetchModalOpen"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function convertTimestampToPersianDate(timestamp) {
                              const date = new Date(timestamp * 1000);
                              return date
                                .toLocaleDateString("fa")
                                .replace(/\//g, "-");
                            }
                            const data = {
                              days: [$state.fragmentDatePicker.values],
                              property_id: $props.propertyId
                            };
                            data.days = data.days
                              .map(timestampArray =>
                                timestampArray.map(timestamp =>
                                  convertTimestampToPersianDate(timestamp)
                                )
                              )
                              .flat();
                            return fetch(
                              "https://api.rentamon.com/api/setunblock",
                              {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                  Accept: "*/*",
                                  authorization:
                                    "Bearer eyJhbGciOiJSUzI1NiIsImhvc3QiOiJzc28ucmVudGFtb24uY29tIiwia2lkIjoiMmFkMGFmNTQ3NmI5NjA1NjIwODc3ZDc1MTUzNGU3NWMxNWMwMzAwNmEzNWZlN2UyZWNkNGMwYmY1ZDg0MTE5OSIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidV85OGUwZmFhMy1jMzI2LTQwZjUtODJiYS03NWJmMTcwYTJjYWYiLCJ3b3Jrc3BhY2VfaWQiOiJ1Xzk4ZTBmYWEzLWMzMjYtNDBmNS04MmJhLTc1YmYxNzBhMmNhZiIsIndvcmtzcGFjZV9pZHMiOltdLCJpYXQiOjE3MzMyMzY5OTAsImV4cCI6MTczMzIzODc5MCwianRpIjoianRpXzZkZDJhZDk2LWNlYzctNDVlNS04ZjE2LTY1NzVjNjU1NmYxNSIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJwaG9uZSI6Ijk4OTAzODc3ODYwNiIsImF1dGhlbnRpY2F0aW9uX21ldGhvZCI6InBob25lL290cCIsImlzX2FjdGl2ZSI6dHJ1ZX0.NKEw3CPFvWL6GJWDVU6nhy_TpFwxjETRvtsJxByLx8dGOeWABbOygME4R0V9UqhvaOD5AP6bxwJPwoi7YFTbQRwoqrEiAim07Mime4LpbegTc7s1982O7OXfzBnolnlgLExjAnwsdsy28CD0q1dXYWAaKqP3Zlk2dVuUjA9HpZ8VDTWviCLpOgKAFM8mV_yioe7W5TN0EdRjRRVJlb0CXLXZYLfbefSmJwYkq_Z5jglKHYDE62IYk2DIan6HsXdEOa6oCUSuA8N3iih_Sr2OPBpCGqlXexGs03vbYq6ki-hlujIhV6B1zZFIiU3CHfwHFIvV8T-goLNUwGkMshE2ow"
                                },
                                body: JSON.stringify(data)
                              }
                            )
                              .then(response => {
                                if (!response.ok) {
                                  throw new Error(
                                    `HTTP error! status: ${response.status}`
                                  );
                                }
                                return response.json();
                              })
                              .then(result => {
                                $state.platformRequestStatus = result;
                                console.log("Response saved to state:", result);
                              })
                              .catch(error => {
                                console.error("Error:", error);
                                $state.platformRequestStatus = {
                                  error: error.message
                                };
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateStateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: (() => {
                          $state.fragmentDatePicker.values = [];
                          return $state.fragmentDatePicker.values;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable"] != null &&
                  typeof $steps["updateStateVariable"] === "object" &&
                  typeof $steps["updateStateVariable"].then === "function"
                ) {
                  $steps["updateStateVariable"] = await $steps[
                    "updateStateVariable"
                  ];
                }
              }}
            >
              {"\u062e\u0627\u0644\u06cc"}
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__gaoiv)}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalChangePriceOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modalChangePrice", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalChangePriceOpen"] != null &&
                typeof $steps["updateModalChangePriceOpen"] === "object" &&
                typeof $steps["updateModalChangePriceOpen"].then === "function"
              ) {
                $steps["updateModalChangePriceOpen"] = await $steps[
                  "updateModalChangePriceOpen"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dBhqK
              )}
            >
              {"\u0642\u06cc\u0645\u062a"}
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__wGeqr)}
            onClick={async event => {
              const $steps = {};

              $steps["updateModalDiscountOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modalDiscount", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalDiscountOpen"] != null &&
                typeof $steps["updateModalDiscountOpen"] === "object" &&
                typeof $steps["updateModalDiscountOpen"].then === "function"
              ) {
                $steps["updateModalDiscountOpen"] = await $steps[
                  "updateModalDiscountOpen"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qtZio
              )}
            >
              {"\u062a\u062e\u0641\u06cc\u0641 \u066a"}
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__y202M)}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://rentamon-api.liara.run/api/setblock",
                        undefined,
                        (() => {
                          try {
                            return {
                              days: $state.fragmentDatePicker.values.map(
                                value =>
                                  new Date(value * 1000)
                                    .toLocaleDateString("fa-IR")
                                    .replace(/\//g, "-")
                              ),
                              property_id: 1,
                              requested_by: "user",
                              request_for: "block"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          headers: {
                            Authorization:
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzM0MjQ5MTYwLCJpYXQiOjE3MjM4ODExNjAsImp0aSI6IjZjZmQ0YWZhNjMwZTQ1Yzg4ZmY1ZGU4NmY4Y2YyNjAzIiwidXNlcl9pZCI6NDY2fQ.clklsxrxx5HrjKxBi8rmb1sl2lrmGJ2tc0_Lkb_4T84"
                          }
                        }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ptf2Y
              )}
            >
              {"\u0631\u0632\u0631\u0648 \u0622\u0646\u06cc \u26a1\ufe0f"}
            </div>
          </section>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"modalChangePrice"}
          data-plasmic-override={overrides.modalChangePrice}
          cancelText={"\u0628\u06cc\u200c\u062e\u06cc\u0627\u0644\u0634"}
          className={classNames("__wab_instance", sty.modalChangePrice)}
          closeButtonClassName={classNames({
            [sty["pcls_4YBbExIs29oE"]]: true
          })}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          modalScopeClassName={sty["modalChangePrice__modal"]}
          okText={"\u062a\u0627\u06cc\u06cc\u062f"}
          onOk={async () => {
            const $steps = {};

            $steps["updateFetchModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["fetchModal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateFetchModalOpen"] != null &&
              typeof $steps["updateFetchModalOpen"] === "object" &&
              typeof $steps["updateFetchModalOpen"].then === "function"
            ) {
              $steps["updateFetchModalOpen"] = await $steps[
                "updateFetchModalOpen"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        function convertTimestampToPersianDate(timestamp) {
                          const date = new Date(timestamp * 1000);
                          return date
                            .toLocaleDateString("fa")
                            .replace(/\//g, "-");
                        }
                        const data = {
                          days: [$state.fragmentDatePicker.values],
                          property_id: $props.propertyId,
                          price: $state.numberInput2.value
                        };
                        data.days = data.days
                          .map(timestampArray =>
                            timestampArray.map(timestamp =>
                              convertTimestampToPersianDate(timestamp)
                            )
                          )
                          .flat();
                        return fetch("https://api.rentamon.com/api/setprice", {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json",
                            Accept: "*/*",
                            authorization:
                              "Bearer eyJhbGciOiJSUzI1NiIsImhvc3QiOiJzc28ucmVudGFtb24uY29tIiwia2lkIjoiMmFkMGFmNTQ3NmI5NjA1NjIwODc3ZDc1MTUzNGU3NWMxNWMwMzAwNmEzNWZlN2UyZWNkNGMwYmY1ZDg0MTE5OSIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidV85OGUwZmFhMy1jMzI2LTQwZjUtODJiYS03NWJmMTcwYTJjYWYiLCJ3b3Jrc3BhY2VfaWQiOiJ1Xzk4ZTBmYWEzLWMzMjYtNDBmNS04MmJhLTc1YmYxNzBhMmNhZiIsIndvcmtzcGFjZV9pZHMiOltdLCJpYXQiOjE3MzMyMzY5OTAsImV4cCI6MTczMzIzODc5MCwianRpIjoianRpXzZkZDJhZDk2LWNlYzctNDVlNS04ZjE2LTY1NzVjNjU1NmYxNSIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJwaG9uZSI6Ijk4OTAzODc3ODYwNiIsImF1dGhlbnRpY2F0aW9uX21ldGhvZCI6InBob25lL290cCIsImlzX2FjdGl2ZSI6dHJ1ZX0.NKEw3CPFvWL6GJWDVU6nhy_TpFwxjETRvtsJxByLx8dGOeWABbOygME4R0V9UqhvaOD5AP6bxwJPwoi7YFTbQRwoqrEiAim07Mime4LpbegTc7s1982O7OXfzBnolnlgLExjAnwsdsy28CD0q1dXYWAaKqP3Zlk2dVuUjA9HpZ8VDTWviCLpOgKAFM8mV_yioe7W5TN0EdRjRRVJlb0CXLXZYLfbefSmJwYkq_Z5jglKHYDE62IYk2DIan6HsXdEOa6oCUSuA8N3iih_Sr2OPBpCGqlXexGs03vbYq6ki-hlujIhV6B1zZFIiU3CHfwHFIvV8T-goLNUwGkMshE2ow"
                          },
                          body: JSON.stringify(data)
                        })
                          .then(response => {
                            if (!response.ok) {
                              throw new Error(
                                `HTTP error! status: ${response.status}`
                              );
                            }
                            return response.json();
                          })
                          .then(result => {
                            $state.platformRequestStatus = result;
                            console.log("Response saved to state:", result);
                          })
                          .catch(error => {
                            console.error("Error:", error);
                            $state.platformRequestStatus = {
                              error: error.message
                            };
                          });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["updateStateVariable"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    value: (() => {
                      $state.fragmentDatePicker.values = [];
                      return $state.fragmentDatePicker.values;
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateVariable"] != null &&
              typeof $steps["updateStateVariable"] === "object" &&
              typeof $steps["updateStateVariable"].then === "function"
            ) {
              $steps["updateStateVariable"] = await $steps[
                "updateStateVariable"
              ];
            }
          }}
          onOpenChange={generateStateOnChangeProp($state, [
            "modalChangePrice",
            "open"
          ])}
          open={generateStateValueProp($state, ["modalChangePrice", "open"])}
          title={
            "\u0646\u0631\u062e \ud83d\udcb5 \u0631\u0648 \u0628\u0647 \u062a\u0648\u0645\u0646 \u0648\u0627\u0631\u062f \u06a9\u0646"
          }
          trigger={null}
        >
          <div className={classNames(projectcss.all, sty.columns__rmQ4G)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__n3LFm)}
            >
              <AntdInputNumber
                data-plasmic-name={"numberInput2"}
                data-plasmic-override={overrides.numberInput2}
                className={classNames("__wab_instance", sty.numberInput2)}
                controls={false}
                onChange={generateStateOnChangeProp($state, [
                  "numberInput2",
                  "value"
                ])}
                placeholder={
                  "\u0645\u062b\u0644\u0627 \u06f2\u06f0\u06f0/\u06f0\u06f0\u06f0"
                }
                readOnly={false}
                type={"number"}
                value={generateStateValueProp($state, [
                  "numberInput2",
                  "value"
                ])}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4M0Jd
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        function numberToPersian(num) {
                          const units = [
                            "",
                            "یک",
                            "دو",
                            "سه",
                            "چهار",
                            "پنج",
                            "شش",
                            "هفت",
                            "هشت",
                            "نه"
                          ];

                          const tens = [
                            "",
                            "ده",
                            "بیست",
                            "سی",
                            "چهل",
                            "پنجاه",
                            "شصت",
                            "هفتاد",
                            "هشتاد",
                            "نود"
                          ];

                          const teens = [
                            "ده",
                            "یازده",
                            "دوازده",
                            "سیزده",
                            "چهارده",
                            "پانزده",
                            "شانزده",
                            "هفده",
                            "هجده",
                            "نوزده"
                          ];

                          const hundreds = [
                            "",
                            "صد",
                            "دویست",
                            "سیصد",
                            "چهارصد",
                            "پانصد",
                            "ششصد",
                            "هفتصد",
                            "هشتصد",
                            "نهصد"
                          ];

                          const groupNames = ["", "هزار", "میلیون", "میلیارد"];

                          if (num == null || num === "" || num === 0)
                            return "صفر";
                          const splitNumber = n => {
                            const str = n.toString();
                            const len = str.length;
                            if (len <= 3) return [n];
                            const groups = [];
                            let i = len;
                            while (i > 0) {
                              groups.unshift(
                                Number(str.substring(Math.max(0, i - 3), i))
                              );
                              i -= 3;
                            }
                            return groups;
                          };
                          const convertGroup = n => {
                            if (n === 0) return "";
                            const h = Math.floor(n / 100);
                            const t = Math.floor((n % 100) / 10);
                            const u = n % 10;
                            const hundred = hundreds[h];
                            let tenUnit = "";
                            if (t === 1) {
                              tenUnit = teens[u];
                            } else {
                              tenUnit =
                                tens[t] + (u > 0 ? " و " + units[u] : "");
                            }
                            return [hundred, tenUnit]
                              .filter(Boolean)
                              .join(" و ")
                              .trim();
                          };
                          const groups = splitNumber(num);
                          const result = groups
                            .map((g, i) => {
                              const groupText = convertGroup(g);
                              if (groupText) {
                                return (
                                  groupText +
                                  (groupNames[groups.length - i - 1]
                                    ? " " + groupNames[groups.length - i - 1]
                                    : "")
                                );
                              }
                              return "";
                            })
                            .filter(Boolean)
                            .join(" و ");
                          const finalResult = result.startsWith("و ")
                            ? result.slice(2)
                            : result;
                          return finalResult.trim() + " تومان";
                        }
                        const input = $state.numberInput2?.value || "";
                        const output =
                          input === "" ? "صفر" : numberToPersian(Number(input));
                        return output;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          </div>
        </AntdModal>
        <Button
          className={classNames("__wab_instance", sty.button__fNtwK)}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal", "open"]
                    },
                    operation: 0,
                    value: (() => {
                      if ($state.fragmentDatePicker.values == 0) {
                        return false;
                      } else {
                        return true;
                      }
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalOpen"] != null &&
              typeof $steps["updateModalOpen"] === "object" &&
              typeof $steps["updateModalOpen"].then === "function"
            ) {
              $steps["updateModalOpen"] = await $steps["updateModalOpen"];
            }

            $steps["invokeGlobalAction"] = (() => {
              if ($state.fragmentDatePicker.values == 0) {
                return true;
              } else {
                return false;
              }
            })()
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "\u0631\u0648\u0632 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f",
                      "top-center",
                      3000
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ary0S)}>
            {(() => {
              try {
                return (() => {
                  if ($state.apiRequest.loading == true) {
                    return true;
                  } else {
                    return false;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"45px"}
                loading={"lazy"}
                src={
                  "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                }
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__psStq
              )}
            >
              {
                "\u0627\u0639\u0645\u0627\u0644 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
              }
            </div>
          </div>
        </Button>
        <AntdModal
          data-plasmic-name={"fetchModal"}
          data-plasmic-override={overrides.fetchModal}
          className={classNames("__wab_instance", sty.fetchModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={false}
          modalScopeClassName={sty["fetchModal__modal"]}
          onOpenChange={generateStateOnChangeProp($state, [
            "fetchModal",
            "open"
          ])}
          open={generateStateValueProp($state, ["fetchModal", "open"])}
          title={
            "\u0646\u062a\u06cc\u062c\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a :"
          }
          trigger={null}
        >
          <ApiRequest
            data-plasmic-name={"userPlatform"}
            data-plasmic-override={overrides.userPlatform}
            className={classNames("__wab_instance", sty.userPlatform)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y1Tc
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__iAx3T)}>
                {(() => {
                  try {
                    return (() => {
                      if (
                        !$state.platformRequestStatus ||
                        !$state.platformRequestStatus.data ||
                        Object.keys($state.platformRequestStatus.data)
                          .length === 0
                      ) {
                        return true;
                      } else {
                        return false;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"loading2"}
                    data-plasmic-override={overrides.loading2}
                    alt={""}
                    className={classNames(sty.loading2)}
                    displayHeight={"34px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={
                      "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                    }
                  />
                ) : null}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, [
              "userPlatform",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "userPlatform",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "userPlatform",
              "data"
            ])}
            url={(() => {
              try {
                return `https://api.rentamon.com/api/website_statuses/?property_id=${$props.propertyId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xAfjs)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const status = $state.userPlatform.data.status;
                      const platforms = Object.keys(status);
                      return platforms;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zeq8A)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rfsi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i0Ncp
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const nameMapping = {
                                  jajiga: "جاجیگا",
                                  mizboon: "میزبون",
                                  otaghak: "اتاقک",
                                  shab: "شب",
                                  homsa: "هومسا",
                                  jabama: "جاباما",
                                  mihmansho: "میهمانشو"
                                };
                                const translatedName =
                                  nameMapping[currentItem] || currentItem;
                                return translatedName;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062c\u0627\u062c\u06cc\u06af\u0627";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x9Ue1
                        )}
                      >
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return false;
                              }
                              const platforms =
                                $state.platformRequestStatus.data;
                              if (platforms[currentItem]) {
                                if (
                                  platforms[currentItem].final_status === true
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"ok"}
                            data-plasmic-override={overrides.ok}
                            alt={""}
                            className={classNames(sty.ok)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/checkCircleSvgrepoComSvg.svg",
                              fullWidth: 24,
                              fullHeight: 24,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return false;
                              }
                              const platforms =
                                $state.platformRequestStatus.data;
                              if (platforms[currentItem]) {
                                if (
                                  platforms[currentItem].final_status === false
                                ) {
                                  return true;
                                } else {
                                  return false;
                                }
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"fail"}
                            data-plasmic-override={overrides.fail}
                            alt={""}
                            className={classNames(sty.fail)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/website_starter/images/failSvgrepoComPng.png",
                              fullWidth: 640,
                              fullHeight: 640,
                              aspectRatio: undefined
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              if (
                                !$state.platformRequestStatus ||
                                !$state.platformRequestStatus.data ||
                                Object.keys($state.platformRequestStatus.data)
                                  .length === 0
                              ) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlasmicImg__
                            data-plasmic-name={"loading"}
                            data-plasmic-override={overrides.loading}
                            alt={""}
                            className={classNames(sty.loading)}
                            displayHeight={"34px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={
                              "https://rentamon.com/wp-content/uploads/2024/03/loading-1.gif"
                            }
                          />
                        ) : null}
                      </div>
                    </div>
                  </div>
                );
              })}
              <Button
                className={classNames("__wab_instance", sty.button__g0Rqs)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFragmentDatePickerValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fragmentDatePicker", "value"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFragmentDatePickerValue"] != null &&
                    typeof $steps["updateFragmentDatePickerValue"] ===
                      "object" &&
                    typeof $steps["updateFragmentDatePickerValue"].then ===
                      "function"
                  ) {
                    $steps["updateFragmentDatePickerValue"] = await $steps[
                      "updateFragmentDatePickerValue"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c5JgP
                  )}
                >
                  {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__sWmv0)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFragmentDatePickerValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fragmentDatePicker", "value"]
                          },
                          operation: 0,
                          value: (() => {
                            $state.fetchModal.open = false;
                            $state.block.open = false;
                            $state.modal.open = false;
                            const platformStatus = Object.values(
                              $state.platformRequestStatus.data || {}
                            );
                            const allFailed = platformStatus.every(
                              platform => platform.final_status === false
                            );
                            if (allFailed) {
                              console.log(
                                "تمام پلتفرم‌ها شکست خورده‌اند. تغییری اعمال نمی‌شود."
                              );
                              return;
                            }
                            const changedDaysTimestamps = (
                              $state.requestdata.days || []
                            ).flat();
                            const changedDaysDates = changedDaysTimestamps.map(
                              timestamp => {
                                const date = new Date(timestamp * 1000);
                                return date.toISOString().split("T")[0];
                              }
                            );
                            const updatedCalendar =
                              $state.apiRequest.data.calendar.map(day => {
                                if (changedDaysDates.includes(day.date)) {
                                  const newDayData =
                                    $state.requestdata.request_for === "block"
                                      ? { status: "blocked" }
                                      : { status: "unblocked" };
                                  return {
                                    ...day,
                                    ...newDayData
                                  };
                                }
                                return day;
                              });
                            $state.apiRequest.data.calendar = updatedCalendar;
                            console.log("Calendar updated:", updatedCalendar);
                            $state.platformRequestStatus = [];
                            $state.requestdata = [];
                            return ($state.fragmentDatePicker.values = []);
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFragmentDatePickerValue"] != null &&
                    typeof $steps["updateFragmentDatePickerValue"] ===
                      "object" &&
                    typeof $steps["updateFragmentDatePickerValue"].then ===
                      "function"
                  ) {
                    $steps["updateFragmentDatePickerValue"] = await $steps[
                      "updateFragmentDatePickerValue"
                    ];
                  }
                }}
              >
                {"\u0628\u0627\u0634\u0647"}
              </Button>
            </div>
          </ApiRequest>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"block"}
          data-plasmic-override={overrides.block}
          className={classNames("__wab_instance", sty.block)}
          closeIcon={null}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalScopeClassName={sty["block__modal"]}
          onOpenChange={generateStateOnChangeProp($state, ["block", "open"])}
          open={generateStateValueProp($state, ["block", "open"])}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__haKoZ
              )}
            >
              {
                "\u0639\u0644\u062a \u067e\u0631 \u0628\u0648\u062f\u0646 \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
              }
            </div>
          }
          trigger={null}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ekvPr
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateFetchModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["fetchModal", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFetchModalOpen"] != null &&
                typeof $steps["updateFetchModalOpen"] === "object" &&
                typeof $steps["updateFetchModalOpen"].then === "function"
              ) {
                $steps["updateFetchModalOpen"] = await $steps[
                  "updateFetchModalOpen"
                ];
              }

              $steps["reserveRequest"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function convertTimestampToPersianDate(timestamp) {
                            const date = new Date(timestamp * 1000);
                            return date
                              .toLocaleDateString("fa")
                              .replace(/\//g, "-");
                          }
                          const data = {
                            days: [$state.fragmentDatePicker.values],
                            property_id: $props.propertyId,
                            requested_by: "user",
                            request_for: "reserve"
                          };
                          $state.requestdata = data;
                          data.days = data.days
                            .map(timestampArray =>
                              timestampArray.map(timestamp =>
                                convertTimestampToPersianDate(timestamp)
                              )
                            )
                            .flat();
                          return fetch(
                            "https://api.rentamon.com/api/setblock",
                            {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                Accept: "*/*",
                                authorization:
                                  "Bearer eyJhbGciOiJSUzI1NiIsImhvc3QiOiJzc28ucmVudGFtb24uY29tIiwia2lkIjoiMmFkMGFmNTQ3NmI5NjA1NjIwODc3ZDc1MTUzNGU3NWMxNWMwMzAwNmEzNWZlN2UyZWNkNGMwYmY1ZDg0MTE5OSIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidV85OGUwZmFhMy1jMzI2LTQwZjUtODJiYS03NWJmMTcwYTJjYWYiLCJ3b3Jrc3BhY2VfaWQiOiJ1Xzk4ZTBmYWEzLWMzMjYtNDBmNS04MmJhLTc1YmYxNzBhMmNhZiIsIndvcmtzcGFjZV9pZHMiOltdLCJpYXQiOjE3MzMzMDU2MjksImV4cCI6MTczMzMwNzQyOSwianRpIjoianRpXzZkZDJhZDk2LWNlYzctNDVlNS04ZjE2LTY1NzVjNjU1NmYxNSIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJwaG9uZSI6Ijk4OTAzODc3ODYwNiIsImF1dGhlbnRpY2F0aW9uX21ldGhvZCI6InBob25lL290cCIsImlzX2FjdGl2ZSI6dHJ1ZX0.UC8MnsvVh_0-xzDrqNPsH-xkfjHXGD0kD5vpew4--SLFTQvpzXVNDQOXDIdtprs_kGc6EBDczwHE3UrwIdDAYiOfRtT2TiOvNq5h7qCuSNeIo2-VqlL5U4_i3jrGbEQlWv5UJvm1MXR_AOHQRcB8zSpUfoT3D5XpqM-HIUn6_83I-mndEDerR3xydOV7OwxDNkhXA-oFtlsNjJXaeTxOiUOAcoEkt_QpKHK-oiLH1oeSixUZHSNg4_AoRXjx1XQmteFLGSQ48-OyMfUh4oPsQsGwEjxXB8DBG9aPDPO4yq1JvRBa9Ik0KXcXsl8kWKMmWJol6crYm4mYv1ckqgu14A"
                              },
                              body: JSON.stringify(data)
                            }
                          )
                            .then(response => {
                              if (!response.ok) {
                                throw new Error(
                                  `HTTP error! status: ${response.status}`
                                );
                              }
                              return response.json();
                            })
                            .then(result => {
                              $state.platformRequestStatus = result;
                              console.log("Response saved to state:", result);
                            })
                            .catch(error => {
                              console.error("Error:", error);
                              $state.platformRequestStatus = {
                                error: error.message
                              };
                            });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["reserveRequest"] != null &&
                typeof $steps["reserveRequest"] === "object" &&
                typeof $steps["reserveRequest"].then === "function"
              ) {
                $steps["reserveRequest"] = await $steps["reserveRequest"];
              }
            }}
          >
            {
              "\u0627\u0632 \u062c\u0627\u06cc \u062f\u06cc\u06af\u0647 \u0645\u0633\u0627\u0641\u0631 \u062f\u0627\u0631\u0645 \ud83c\udf92"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wnE1G
            )}
            onClick={async event => {
              const $steps = {};

              $steps["updateFetchModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["fetchModal", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFetchModalOpen"] != null &&
                typeof $steps["updateFetchModalOpen"] === "object" &&
                typeof $steps["updateFetchModalOpen"].then === "function"
              ) {
                $steps["updateFetchModalOpen"] = await $steps[
                  "updateFetchModalOpen"
                ];
              }

              $steps["blockRequest"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          function convertTimestampToPersianDate(timestamp) {
                            const date = new Date(timestamp * 1000);
                            return date
                              .toLocaleDateString("fa")
                              .replace(/\//g, "-");
                          }
                          const data = {
                            days: [$state.fragmentDatePicker.values],
                            property_id: $props.propertyId,
                            requested_by: "user",
                            request_for: "block"
                          };
                          $state.requestdata = data;
                          data.days = data.days
                            .map(timestampArray =>
                              timestampArray.map(timestamp =>
                                convertTimestampToPersianDate(timestamp)
                              )
                            )
                            .flat();
                          return fetch(
                            "https://api.rentamon.com/api/setblock",
                            {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                Accept: "*/*",
                                authorization:
                                  "Bearer eyJhbGciOiJSUzI1NiIsImhvc3QiOiJzc28ucmVudGFtb24uY29tIiwia2lkIjoiMmFkMGFmNTQ3NmI5NjA1NjIwODc3ZDc1MTUzNGU3NWMxNWMwMzAwNmEzNWZlN2UyZWNkNGMwYmY1ZDg0MTE5OSIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidV85OGUwZmFhMy1jMzI2LTQwZjUtODJiYS03NWJmMTcwYTJjYWYiLCJ3b3Jrc3BhY2VfaWQiOiJ1Xzk4ZTBmYWEzLWMzMjYtNDBmNS04MmJhLTc1YmYxNzBhMmNhZiIsIndvcmtzcGFjZV9pZHMiOltdLCJpYXQiOjE3MzMzMDU2MjksImV4cCI6MTczMzMwNzQyOSwianRpIjoianRpXzZkZDJhZDk2LWNlYzctNDVlNS04ZjE2LTY1NzVjNjU1NmYxNSIsInRva2VuX3R5cGUiOiJhY2Nlc3MiLCJwaG9uZSI6Ijk4OTAzODc3ODYwNiIsImF1dGhlbnRpY2F0aW9uX21ldGhvZCI6InBob25lL290cCIsImlzX2FjdGl2ZSI6dHJ1ZX0.UC8MnsvVh_0-xzDrqNPsH-xkfjHXGD0kD5vpew4--SLFTQvpzXVNDQOXDIdtprs_kGc6EBDczwHE3UrwIdDAYiOfRtT2TiOvNq5h7qCuSNeIo2-VqlL5U4_i3jrGbEQlWv5UJvm1MXR_AOHQRcB8zSpUfoT3D5XpqM-HIUn6_83I-mndEDerR3xydOV7OwxDNkhXA-oFtlsNjJXaeTxOiUOAcoEkt_QpKHK-oiLH1oeSixUZHSNg4_AoRXjx1XQmteFLGSQ48-OyMfUh4oPsQsGwEjxXB8DBG9aPDPO4yq1JvRBa9Ik0KXcXsl8kWKMmWJol6crYm4mYv1ckqgu14A"
                              },
                              body: JSON.stringify(data)
                            }
                          )
                            .then(response => {
                              if (!response.ok) {
                                throw new Error(
                                  `HTTP error! status: ${response.status}`
                                );
                              }
                              return response.json();
                            })
                            .then(result => {
                              $state.platformRequestStatus = result;
                              console.log("Response saved to state:", result);
                            })
                            .catch(error => {
                              console.error("Error:", error);
                              $state.platformRequestStatus = {
                                error: error.message
                              };
                            });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["blockRequest"] != null &&
                typeof $steps["blockRequest"] === "object" &&
                typeof $steps["blockRequest"].then === "function"
              ) {
                $steps["blockRequest"] = await $steps["blockRequest"];
              }
            }}
          >
            {
              "\u0646\u0645\u06cc\u200c\u062e\u0648\u0627\u0645 \u0627\u06cc\u0646 \u0627\u062c\u0627\u0631\u0647 \u0628\u062f\u0645 \u26d4\ufe0f"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4Wf5
            )}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.rentamon.com/api/setblock",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function convertTimestampToPersianDate(
                                timestamp
                              ) {
                                const date = new Date(timestamp * 1000);
                                return date
                                  .toLocaleDateString("fa")
                                  .replace(/\//g, "-");
                              }
                              const data = {
                                days: [$state.fragmentDatePicker.values],
                                property_id: $props.propertyId,
                                requested_by: "user",
                                request_for: "block"
                              };
                              data.days = data.days
                                .map(timestampArray =>
                                  timestampArray.map(timestamp =>
                                    convertTimestampToPersianDate(timestamp)
                                  )
                                )
                                .flat();
                              return data;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      operation: 0,
                      value: (() => {
                        $state.platformRequestStatus =
                          $steps.invokeGlobalAction.data;
                        return console.log($state.platformRequestStatus);
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStateVariable"] != null &&
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await $steps[
                  "updateStateVariable"
                ];
              }
            }}
          >
            {
              "\u0648\u0627\u0633\u0634 \u0628\u0631\u0646\u0627\u0645\u0647 \u062f\u0627\u0631\u0645 \ud83d\ude0e"
            }
          </div>
        </AntdModal>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiRequest",
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637",
    "fragmentDatePicker",
    "dayCell",
    "modalDiscount",
    "numberInput3",
    "modal",
    "modalChangePrice",
    "numberInput2",
    "img",
    "fetchModal",
    "userPlatform",
    "loading2",
    "ok",
    "fail",
    "loading",
    "block"
  ],
  apiRequest: [
    "apiRequest",
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
  ],
  مشکلدربرقراریارتط: [
    "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
  ],
  fragmentDatePicker: ["fragmentDatePicker", "dayCell"],
  dayCell: ["dayCell"],
  modalDiscount: ["modalDiscount", "numberInput3"],
  numberInput3: ["numberInput3"],
  modal: ["modal"],
  modalChangePrice: ["modalChangePrice", "numberInput2"],
  numberInput2: ["numberInput2"],
  img: ["img"],
  fetchModal: [
    "fetchModal",
    "userPlatform",
    "loading2",
    "ok",
    "fail",
    "loading"
  ],
  userPlatform: ["userPlatform", "loading2", "ok", "fail", "loading"],
  loading2: ["loading2"],
  ok: ["ok"],
  fail: ["fail"],
  loading: ["loading"],
  block: ["block"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  مشکلدربرقراریارتط: "div";
  fragmentDatePicker: typeof DatePicker;
  dayCell: typeof DayCell;
  modalDiscount: typeof AntdModal;
  numberInput3: typeof AntdInputNumber;
  modal: typeof AntdModal;
  modalChangePrice: typeof AntdModal;
  numberInput2: typeof AntdInputNumber;
  img: typeof PlasmicImg__;
  fetchModal: typeof AntdModal;
  userPlatform: typeof ApiRequest;
  loading2: typeof PlasmicImg__;
  ok: typeof PlasmicImg__;
  fail: typeof PlasmicImg__;
  loading: typeof PlasmicImg__;
  block: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCalendar2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCalendar2__VariantsArgs;
    args?: PlasmicCalendar2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCalendar2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCalendar2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendar2__ArgProps,
          internalVariantPropNames: PlasmicCalendar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendar2";
  } else {
    func.displayName = `PlasmicCalendar2.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendar2 = Object.assign(
  // Top-level PlasmicCalendar2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    مشکلدربرقراریارتط: makeNodeComponent(
      "\u0645\u0634\u06a9\u0644\u062f\u0631\u0628\u0631\u0642\u0631\u0627\u0631\u06cc\u0627\u0631\u062a\u0637"
    ),
    fragmentDatePicker: makeNodeComponent("fragmentDatePicker"),
    dayCell: makeNodeComponent("dayCell"),
    modalDiscount: makeNodeComponent("modalDiscount"),
    numberInput3: makeNodeComponent("numberInput3"),
    modal: makeNodeComponent("modal"),
    modalChangePrice: makeNodeComponent("modalChangePrice"),
    numberInput2: makeNodeComponent("numberInput2"),
    img: makeNodeComponent("img"),
    fetchModal: makeNodeComponent("fetchModal"),
    userPlatform: makeNodeComponent("userPlatform"),
    loading2: makeNodeComponent("loading2"),
    ok: makeNodeComponent("ok"),
    fail: makeNodeComponent("fail"),
    loading: makeNodeComponent("loading"),
    block: makeNodeComponent("block"),

    // Metadata about props expected for PlasmicCalendar2
    internalVariantProps: PlasmicCalendar2__VariantProps,
    internalArgProps: PlasmicCalendar2__ArgProps
  }
);

export default PlasmicCalendar2;
/* prettier-ignore-end */
