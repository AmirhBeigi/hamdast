// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: 2NGLBkmhMP3i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Lamp from "../../Lamp"; // plasmic-import: V7sstJTUGr4K/component
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicNazaninTest.module.css"; // plasmic-import: 2NGLBkmhMP3i/css

createPlasmicElementProxy;

export type PlasmicNazaninTest__VariantMembers = {};
export type PlasmicNazaninTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicNazaninTest__VariantsArgs;
export const PlasmicNazaninTest__VariantProps = new Array<VariantPropType>();

export type PlasmicNazaninTest__ArgsType = {};
type ArgPropType = keyof PlasmicNazaninTest__ArgsType;
export const PlasmicNazaninTest__ArgProps = new Array<ArgPropType>();

export type PlasmicNazaninTest__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  lamp?: Flex__<typeof Lamp>;
  _switch?: Flex__<typeof AntdSwitch>;
};

export interface DefaultNazaninTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNazaninTest__RenderFunc(props: {
  variants: PlasmicNazaninTest__VariantsArgs;
  args: PlasmicNazaninTest__ArgsType;
  overrides: PlasmicNazaninTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_switch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isOn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__tXspC)} />

            <div className={classNames(projectcss.all, sty.column__eodA)}>
              <Lamp
                data-plasmic-name={"lamp"}
                data-plasmic-override={overrides.lamp}
                className={classNames("__wab_instance", sty.lamp)}
              />

              <AntdSwitch
                data-plasmic-name={"_switch"}
                data-plasmic-override={overrides._switch}
                checked={generateStateValueProp($state, ["_switch", "checked"])}
                className={classNames("__wab_instance", sty._switch)}
                defaultChecked={false}
                disabled={undefined}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "_switch",
                    "checked"
                  ]).apply(null, eventArgs);
                  (async checked => {
                    const $steps = {};

                    $steps["updateSwitchChecked"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["_switch", "checked"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSwitchChecked"] != null &&
                      typeof $steps["updateSwitchChecked"] === "object" &&
                      typeof $steps["updateSwitchChecked"].then === "function"
                    ) {
                      $steps["updateSwitchChecked"] = await $steps[
                        "updateSwitchChecked"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "lamp", "_switch"],
  columns: ["columns", "lamp", "_switch"],
  lamp: ["lamp"],
  _switch: ["_switch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  lamp: typeof Lamp;
  _switch: typeof AntdSwitch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNazaninTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNazaninTest__VariantsArgs;
    args?: PlasmicNazaninTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNazaninTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNazaninTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNazaninTest__ArgProps,
          internalVariantPropNames: PlasmicNazaninTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNazaninTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNazaninTest";
  } else {
    func.displayName = `PlasmicNazaninTest.${nodeName}`;
  }
  return func;
}

export const PlasmicNazaninTest = Object.assign(
  // Top-level PlasmicNazaninTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    lamp: makeNodeComponent("lamp"),
    _switch: makeNodeComponent("_switch"),

    // Metadata about props expected for PlasmicNazaninTest
    internalVariantProps: PlasmicNazaninTest__VariantProps,
    internalArgProps: PlasmicNazaninTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNazaninTest;
/* prettier-ignore-end */
