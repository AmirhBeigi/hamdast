// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: S61C2Y5oZIVA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import UserFullName from "../../UserFullName"; // plasmic-import: kplG0PgU22ci/component
import Select from "../../Select"; // plasmic-import: GgjLI5qwOqwu/component
import WalletNew from "../../WalletNew"; // plasmic-import: 24pJs8Ng-L75/component
import Calendar2 from "../../Calendar2"; // plasmic-import: RNhZtlNmydsH/component
import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import PlatformConnectionOtp from "../../PlatformConnectionOtp"; // plasmic-import: R8Lwj3DU9BxT/component

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicPanel.module.css"; // plasmic-import: S61C2Y5oZIVA/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicPanel__VariantMembers = {};
export type PlasmicPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanel__VariantsArgs;
export const PlasmicPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicPanel__ArgsType = {};
type ArgPropType = keyof PlasmicPanel__ArgsType;
export const PlasmicPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicPanel__OverridesType = {
  root?: Flex__<"div">;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  col1?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  col2?: Flex__<"div">;
  userFullName?: Flex__<typeof UserFullName>;
  selectProperty?: Flex__<typeof Select>;
  walletNew?: Flex__<typeof WalletNew>;
  calendar2?: Flex__<typeof Calendar2>;
  submitButton?: Flex__<typeof Button>;
  text?: Flex__<"div">;
};

export interface DefaultPanelProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPanel__RenderFunc(props: {
  variants: PlasmicPanel__VariantsArgs;
  args: PlasmicPanel__ArgsType;
  overrides: PlasmicPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectProperty.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.fetchedData.list[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json",
              "xc-token": "ty7cwczW_JDC0VQq8sEBJtu6E1e3_mX-kpa4d9TJ"
            }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            url={(() => {
              try {
                return "https://app.nocodb.com/api/v2/tables/mzzo3ht0dlhagzr/records?where=%28user_id%2Ceq%2C466%29&limit=25&shuffle=0&offset=0";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://api.github.com/users/plasmicapp/repos";
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p65Sl)}
                  >
                    <div
                      data-plasmic-name={"col1"}
                      data-plasmic-override={overrides.col1}
                      className={classNames(projectcss.all, sty.col1)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        height={"140px"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $ctx.fetchedData.list.find(
                              item => item.id == $state.selectProperty.value
                            ).property_pic_link;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        width={"200px"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"col2"}
                      data-plasmic-override={overrides.col2}
                      className={classNames(projectcss.all, sty.col2)}
                      dir={"rtl"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mw1QV
                        )}
                      >
                        <UserFullName
                          data-plasmic-name={"userFullName"}
                          data-plasmic-override={overrides.userFullName}
                          className={classNames(
                            "__wab_instance",
                            sty.userFullName
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___82Ae1
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.selectProperty
                            ),
                            onChange: (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "selectProperty",
                                "value"
                              ])(eventArgs[0]);
                            },
                            options: (() => {
                              try {
                                return $ctx.fetchedData.list.map(item => ({
                                  value: item.id,
                                  label: item.property_name
                                }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return (() => {
                                    const __composite = [{ value: null }];
                                    __composite["0"]["value"] =
                                      $ctx.fetchedData.list[0].property_name;
                                    return __composite;
                                  })();
                                }
                                throw e;
                              }
                            })(),
                            placeholder: (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.list[0]
                                      .property_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Select\u2026";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ),
                            value: generateStateValueProp($state, [
                              "selectProperty",
                              "value"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "selectProperty.value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $ctx.fetchedData.list[0].id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            []
                          );
                          return (
                            <Select
                              data-plasmic-name={"selectProperty"}
                              data-plasmic-override={overrides.selectProperty}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xjHu
                        )}
                      >
                        <WalletNew
                          data-plasmic-name={"walletNew"}
                          data-plasmic-override={overrides.walletNew}
                          className={classNames(
                            "__wab_instance",
                            sty.walletNew
                          )}
                        />
                      </div>
                    </div>
                  </div>
                  <Calendar2
                    data-plasmic-name={"calendar2"}
                    data-plasmic-override={overrides.calendar2}
                    className={classNames("__wab_instance", sty.calendar2)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__t1Y6I)}
                  >
                    <Button
                      data-plasmic-name={"submitButton"}
                      data-plasmic-override={overrides.submitButton}
                      className={classNames("__wab_instance", sty.submitButton)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://rentamon-api.liara.run/api/setblock",
                                  undefined,
                                  (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {
                          "\u0627\u0639\u0645\u0627\u0644 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                        }
                      </div>
                    </Button>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xQUm)}
                  >
                    <PlatformConnectionOtp
                      className={classNames(
                        "__wab_instance",
                        sty.platformConnectionOtp___4M2PL
                      )}
                    />
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </DataFetcher>
          <div className={classNames(projectcss.all, sty.freeBox__nbaxH)}>
            <PlatformConnectionOtp
              className={classNames(
                "__wab_instance",
                sty.platformConnectionOtp__b61Ea
              )}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpRestApiFetcher",
    "col1",
    "img",
    "col2",
    "userFullName",
    "selectProperty",
    "walletNew",
    "calendar2",
    "submitButton",
    "text"
  ],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "col1",
    "img",
    "col2",
    "userFullName",
    "selectProperty",
    "walletNew",
    "calendar2",
    "submitButton",
    "text"
  ],
  col1: ["col1", "img"],
  img: ["img"],
  col2: ["col2", "userFullName", "selectProperty", "walletNew"],
  userFullName: ["userFullName"],
  selectProperty: ["selectProperty"],
  walletNew: ["walletNew"],
  calendar2: ["calendar2"],
  submitButton: ["submitButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpRestApiFetcher: typeof DataFetcher;
  col1: "div";
  img: typeof PlasmicImg__;
  col2: "div";
  userFullName: typeof UserFullName;
  selectProperty: typeof Select;
  walletNew: typeof WalletNew;
  calendar2: typeof Calendar2;
  submitButton: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanel__VariantsArgs;
    args?: PlasmicPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPanel__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPanel__ArgProps,
          internalVariantPropNames: PlasmicPanel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanel";
  } else {
    func.displayName = `PlasmicPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicPanel = Object.assign(
  // Top-level PlasmicPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    col1: makeNodeComponent("col1"),
    img: makeNodeComponent("img"),
    col2: makeNodeComponent("col2"),
    userFullName: makeNodeComponent("userFullName"),
    selectProperty: makeNodeComponent("selectProperty"),
    walletNew: makeNodeComponent("walletNew"),
    calendar2: makeNodeComponent("calendar2"),
    submitButton: makeNodeComponent("submitButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPanel
    internalVariantProps: PlasmicPanel__VariantProps,
    internalArgProps: PlasmicPanel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPanel;
/* prettier-ignore-end */
