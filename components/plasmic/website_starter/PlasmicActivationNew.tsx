// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7SNMkB8UMukVgcWJYokeAQ
// Component: zXAOwfcgu5NZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: U5bKCJ5DYhib/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: a17-BE4K1UE7/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import Checkbox from "../../Checkbox"; // plasmic-import: kNwK3iA1B39P/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import { useScreenVariants as useScreenVariantsaSuSwU8JUYf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aSUSwU8jUYf-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7SNMkB8UMukVgcWJYokeAQ/projectcss
import sty from "./PlasmicActivationNew.module.css"; // plasmic-import: zXAOwfcgu5NZ/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: aHRi_lZjzHt3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nPWd30PDwgwm/icon

createPlasmicElementProxy;

export type PlasmicActivationNew__VariantMembers = {};
export type PlasmicActivationNew__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivationNew__VariantsArgs;
export const PlasmicActivationNew__VariantProps = new Array<VariantPropType>();

export type PlasmicActivationNew__ArgsType = {};
type ArgPropType = keyof PlasmicActivationNew__ArgsType;
export const PlasmicActivationNew__ArgProps = new Array<ArgPropType>();

export type PlasmicActivationNew__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  apiRequest?: Flex__<typeof ApiRequest>;
  form?: Flex__<typeof FormWrapper>;
  platforms?: Flex__<typeof FormItemWrapper>;
  policiesCheckbox?: Flex__<typeof Checkbox>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  submitButton?: Flex__<typeof AntdButton>;
  input26?: Flex__<typeof AntdInput>;
  jabamasend2?: Flex__<typeof AntdButton>;
  back?: Flex__<typeof AntdButton>;
  skip?: Flex__<typeof AntdButton>;
  input8?: Flex__<typeof AntdInput>;
  jabamaverify?: Flex__<typeof AntdButton>;
  jabamaverify2?: Flex__<typeof AntdButton>;
  input7?: Flex__<typeof AntdInput>;
  jajigasend?: Flex__<typeof AntdButton>;
  jajigasend2?: Flex__<typeof AntdButton>;
  jajigasend4?: Flex__<typeof AntdButton>;
  input6?: Flex__<typeof AntdInput>;
  jajigaverify?: Flex__<typeof AntdButton>;
  jajigaverify2?: Flex__<typeof AntdButton>;
  input9?: Flex__<typeof AntdInput>;
  shabsend?: Flex__<typeof AntdButton>;
  shabsend2?: Flex__<typeof AntdButton>;
  shabsend4?: Flex__<typeof AntdButton>;
  input10?: Flex__<typeof AntdInput>;
  shabverify?: Flex__<typeof AntdButton>;
  shabverify3?: Flex__<typeof AntdButton>;
  input11?: Flex__<typeof AntdInput>;
  otaghaksend?: Flex__<typeof AntdButton>;
  otaghaksend4?: Flex__<typeof AntdButton>;
  otaghaksend5?: Flex__<typeof AntdButton>;
  input12?: Flex__<typeof AntdInput>;
  otaghakverify?: Flex__<typeof AntdButton>;
  otaghakverify5?: Flex__<typeof AntdButton>;
  input13?: Flex__<typeof AntdInput>;
  mihmanshosend?: Flex__<typeof AntdButton>;
  mihmanshosend6?: Flex__<typeof AntdButton>;
  input14?: Flex__<typeof AntdInput>;
  mihmanshoverify?: Flex__<typeof AntdButton>;
  mihmanshoverify7?: Flex__<typeof AntdButton>;
  input15?: Flex__<typeof AntdInput>;
  input16?: Flex__<typeof AntdInput>;
  homsaverify?: Flex__<typeof AntdButton>;
  homsaverify2?: Flex__<typeof AntdButton>;
  input17?: Flex__<typeof AntdInput>;
  mizboonsend?: Flex__<typeof AntdButton>;
  mizboonsend3?: Flex__<typeof AntdButton>;
  input18?: Flex__<typeof AntdInput>;
  mizboonverify?: Flex__<typeof AntdButton>;
  mizboonverify4?: Flex__<typeof AntdButton>;
  platformpropertyIds?: Flex__<"div">;
  jajigapp?: Flex__<"div">;
  input19?: Flex__<typeof AntdInput>;
  shabpp?: Flex__<"div">;
  input20?: Flex__<typeof AntdInput>;
  otaghakpp?: Flex__<"div">;
  input21?: Flex__<typeof AntdInput>;
  mihmanshopp?: Flex__<"div">;
  input22?: Flex__<typeof AntdInput>;
  homsapp?: Flex__<"div">;
  input23?: Flex__<typeof AntdInput>;
  mizboonpp?: Flex__<"div">;
  input24?: Flex__<typeof AntdInput>;
  jabamapp?: Flex__<"div">;
  input27?: Flex__<typeof AntdInput>;
  platformpropertyButton?: Flex__<typeof AntdButton>;
  platformpropertyButton2?: Flex__<typeof AntdButton>;
};

export interface DefaultActivationNewProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicActivationNew__RenderFunc(props: {
  variants: PlasmicActivationNew__VariantsArgs;
  args: PlasmicActivationNew__ArgsType;
  overrides: PlasmicActivationNew__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "input27.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "policiesCheckbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaSuSwU8JUYf()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__btynj)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Wmd4
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return (() => {
                              return (window.location.href =
                                "https://rentamon.com/panels/?prop_id=1");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              {"x"}
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ezxHy)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dL0Eq)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"49px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"108px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsRentamonCom"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://rentamon.com/"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsRentamonCom"] != null &&
                    typeof $steps["goToHttpsRentamonCom"] === "object" &&
                    typeof $steps["goToHttpsRentamonCom"].then === "function"
                  ) {
                    $steps["goToHttpsRentamonCom"] = await $steps[
                      "goToHttpsRentamonCom"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/website_starter/images/rentamonFaPng.png",
                  fullWidth: 684,
                  fullHeight: 306,
                  aspectRatio: undefined
                }}
              />

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__uLtD7)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__mC3U6
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Button
                    className={classNames("__wab_instance", sty.button__i3B4G)}
                    color={"clear"}
                    endIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__sW86X)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <CheckSvgIcon
                        className={classNames(projectcss.all, sty.svg__yRlQl)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aKsLk
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button>
                </div>
              ) : null}
            </Stack__>
          </Stack__>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            children={null}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__osfWm
                )}
              >
                {
                  "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a  \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627"
                }
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__umnyc
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "...در حال پردازش";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Loading...";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            method={"POST"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "apiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest",
              "data"
            ])}
            url={"https://gateway.rentamon.com/webhook/user-registration"}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                {(() => {
                  try {
                    return $state.step == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    data-plasmic-name={"platforms"}
                    data-plasmic-override={overrides.platforms}
                    className={classNames("__wab_instance", sty.platforms)}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nKkKa
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    name={"platforms"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gTtK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uDhb
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{
                              fontWeight: 700,
                              color: "var(--token-8nedppYkGVaH)"
                            }}
                          >
                            {
                              "\u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc"
                            }
                          </span>
                          <React.Fragment>
                            {
                              "\n\u062a\u0642\u0648\u06cc\u0645 \u06cc\u06a9\u067e\u0627\u0631\u0686\u0647 \u0627\u0642\u0627\u0645\u062a\u06af\u0627\u0647 \u0634\u0645\u0627\u060c \u0644\u0627\u0632\u0645\u0647 \u0627\u0628\u062a\u062f\u0627 \u0628\u0647 \u0633\u0627\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u062c\u0627\u0631\u0647 \u0648\u06cc\u0644\u0627 \u0645\u062a\u0635\u0644 \u0628\u0634\u0647."
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vzQTs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fo6Ex
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3S89D
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n16T)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gobe8
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__krh6F
                        )}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0H6Wx
                      )}
                    >
                      <Checkbox
                        data-plasmic-name={"policiesCheckbox"}
                        data-plasmic-override={overrides.policiesCheckbox}
                        className={classNames(
                          "__wab_instance",
                          sty.policiesCheckbox
                        )}
                        isChecked={
                          generateStateValueProp($state, [
                            "policiesCheckbox",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={(...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "policiesCheckbox",
                            "isChecked"
                          ])(eventArgs[0]);
                        }}
                      >
                        <PlasmicLink__
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link
                          )}
                          component={Link}
                          href={
                            "https://rentamon.com/%d9%82%d9%88%d8%a7%d9%86%db%8c%d9%86-%d8%b1%d9%86%d8%aa%d8%a7%d9%85%d9%88%d9%86/"
                          }
                          platform={"nextjs"}
                          target={"_blank"}
                        >
                          {
                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a"
                          }
                        </PlasmicLink__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lHi
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#1F3546" }}
                            >
                              {
                                " \u0631\u0646\u062a\u0627\u0645\u0648\u0646 \u0631\u0648 \u0645\u06cc\u200c\u067e\u0630\u06cc\u0631\u0645"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      </Checkbox>
                    </div>
                    <AntdButton
                      data-plasmic-name={"submitButton"}
                      data-plasmic-override={overrides.submitButton}
                      className={classNames("__wab_instance", sty.submitButton)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = (
                          $state.policiesCheckbox.isChecked
                            ? $state.step++
                            : undefined
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yojJ1
                        )}
                      >
                        {"\u0628\u0631\u06cc\u0645"}
                      </div>
                    </AntdButton>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__p4Vpr
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tVwE
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                        }
                      </div>
                    }
                    name={"jabamaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input26),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input26", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input26",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input26.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input26"}
                          data-plasmic-override={overrides.input26}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dpDxM)}
                    >
                      <AntdButton
                        data-plasmic-name={"jabamasend2"}
                        data-plasmic-override={overrides.jabamasend2}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamasend2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabama-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jabamaphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___29CCy
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"back"}
                        data-plasmic-override={overrides.back}
                        className={classNames("__wab_instance", sty.back)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3,
                                  value: $state.step + 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uNrbr
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__clho7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8LS27
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"skip"}
                          data-plasmic-override={overrides.skip}
                          className={classNames("__wab_instance", sty.skip)}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o8JSl
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645   "
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__jXrIn
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xed8V
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u0628\u0627\u0645\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jabamaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input8),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input8", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input8",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input8.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input8"}
                          data-plasmic-override={overrides.input8}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__omgNo)}
                    >
                      <AntdButton
                        data-plasmic-name={"jabamaverify"}
                        data-plasmic-override={overrides.jabamaverify}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["jabamaVerify"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabama-verify-test",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jabamaphone,
                                          otp: $state.form.value.jabamaOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jabamaVerify"] != null &&
                            typeof $steps["jabamaVerify"] === "object" &&
                            typeof $steps["jabamaVerify"].then === "function"
                          ) {
                            $steps["jabamaVerify"] = await $steps[
                              "jabamaVerify"
                            ];
                          }

                          $steps["jabamaContact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jabamacontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jabamaContact"] != null &&
                            typeof $steps["jabamaContact"] === "object" &&
                            typeof $steps["jabamaContact"].then === "function"
                          ) {
                            $steps["jabamaContact"] = await $steps[
                              "jabamaContact"
                            ];
                          }

                          $steps["jajigaContact"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajigacontact",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.user_id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["jajigaContact"] != null &&
                            typeof $steps["jajigaContact"] === "object" &&
                            typeof $steps["jajigaContact"].then === "function"
                          ) {
                            $steps["jajigaContact"] = await $steps[
                              "jajigaContact"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fPBr8
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jabamaverify2"}
                        data-plasmic-override={overrides.jabamaverify2}
                        className={classNames(
                          "__wab_instance",
                          sty.jabamaverify2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sS28P
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__aZDb
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Omvu
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                        }
                      </div>
                    }
                    name={"jajigaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input7),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input7", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input7",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input7.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input7"}
                          data-plasmic-override={overrides.input7}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mpeUy)}
                    >
                      <AntdButton
                        data-plasmic-name={"jajigasend"}
                        data-plasmic-override={overrides.jajigasend}
                        className={classNames("__wab_instance", sty.jajigasend)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajiga-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jajigaphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v0Jc
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jajigasend2"}
                        data-plasmic-override={overrides.jajigasend2}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigasend2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x38Gp
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___80UcB
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pTday
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"jajigasend4"}
                          data-plasmic-override={overrides.jajigasend4}
                          className={classNames(
                            "__wab_instance",
                            sty.jajigasend4
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zXgk
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645   "
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 4;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__i4Qxr
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Ej4Q
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u062c\u0627\u062c\u06cc\u06af\u0627 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"jajigaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input6),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input6", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input6",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input6.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input6"}
                          data-plasmic-override={overrides.input6}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rrvyg)}
                    >
                      <AntdButton
                        data-plasmic-name={"jajigaverify"}
                        data-plasmic-override={overrides.jajigaverify}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/jajiga-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.jajigaphone,
                                          otp: $state.form.value.jajigaOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z1LHa
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"jajigaverify2"}
                        data-plasmic-override={overrides.jajigaverify2}
                        className={classNames(
                          "__wab_instance",
                          sty.jajigaverify2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mkQY
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 5;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__kl50W
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lpSbU
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0634\u0628:"
                        }
                      </div>
                    }
                    name={"shabphone"}
                  >
                    {(() => {
                      const child$Props = {
                        autoFocus: true,
                        className: classNames("__wab_instance", sty.input9),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input9", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input9",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input9.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input9"}
                          data-plasmic-override={overrides.input9}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mblh6)}
                    >
                      <AntdButton
                        data-plasmic-name={"shabsend"}
                        data-plasmic-override={overrides.shabsend}
                        className={classNames("__wab_instance", sty.shabsend)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/shab-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.shabphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2SDjU
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"shabsend2"}
                        data-plasmic-override={overrides.shabsend2}
                        className={classNames("__wab_instance", sty.shabsend2)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgLgM
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mkv1V)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ao01O
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"shabsend4"}
                          data-plasmic-override={overrides.shabsend4}
                          className={classNames(
                            "__wab_instance",
                            sty.shabsend4
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zvjvy
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 6;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__rfVt1
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hv4Vo
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0634\u0628 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"shabOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input10),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input10", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input10",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input10.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input10"}
                          data-plasmic-override={overrides.input10}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ao4Jn)}
                    >
                      <AntdButton
                        data-plasmic-name={"shabverify"}
                        data-plasmic-override={overrides.shabverify}
                        className={classNames("__wab_instance", sty.shabverify)}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/shab-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.shabphone,
                                          otp: $state.form.value.shabOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e2DBa
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"shabverify3"}
                        data-plasmic-override={overrides.shabverify3}
                        className={classNames(
                          "__wab_instance",
                          sty.shabverify3
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jGsX
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 7;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__yulMs
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uvWff
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9:"
                        }
                      </div>
                    }
                    name={"otaghakphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input11),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input11", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input11",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input11.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input11"}
                          data-plasmic-override={overrides.input11}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lKZu)}
                    >
                      <AntdButton
                        data-plasmic-name={"otaghaksend"}
                        data-plasmic-override={overrides.otaghaksend}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghaksend
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/otaghak-send-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.otaghakphone
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w7Efz
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                          }
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"otaghaksend4"}
                        data-plasmic-override={overrides.otaghaksend4}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghaksend4
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step - 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dtJAc
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc >"}
                        </div>
                      </AntdButton>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gvCu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__icx8E
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"otaghaksend5"}
                          data-plasmic-override={overrides.otaghaksend5}
                          className={classNames(
                            "__wab_instance",
                            sty.otaghaksend5
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $state.step + 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }

                            $steps["connectionStatus"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/connection",
                                      undefined,
                                      (() => {
                                        try {
                                          return (() => {
                                            $state.form.value.otaghakphone !==
                                            ""
                                              ? "otaghak=true"
                                              : "otaghak=false";
                                            $state.form.value.shabphone !== ""
                                              ? "shab=true"
                                              : "shab=false";
                                            $state.form.value.jajigaphone !== ""
                                              ? "jajiga=true"
                                              : "jajiga=false";
                                            $state.form.value.jabamaphone !== ""
                                              ? "jabama=true"
                                              : "jabama=false";
                                            return (
                                              "jabama=" +
                                              ($state.form.value.jabamaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              " shab=" +
                                              ($state.form.value.shabphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              " jajiga=" +
                                              ($state.form.value.jajigaphone !==
                                              ""
                                                ? "true"
                                                : "false") +
                                              " otaghak=" +
                                              ($state.form.value
                                                .otaghakphone !== ""
                                                ? "true"
                                                : "false")
                                            );
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["connectionStatus"] != null &&
                              typeof $steps["connectionStatus"] === "object" &&
                              typeof $steps["connectionStatus"].then ===
                                "function"
                            ) {
                              $steps["connectionStatus"] = await $steps[
                                "connectionStatus"
                              ];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i8VJz
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ textDecorationLine: "underline" }}
                              >
                                {
                                  "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdButton>
                      </div>
                    </div>
                  </FormItemWrapper>
                ) : null}
                {(() => {
                  try {
                    return $state.step == 8;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__hrM4I
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5TXxI
                        )}
                      >
                        {
                          "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0627\u062a\u0627\u0642\u06a9 (\u067e\u06cc\u0627\u0645\u06a9):"
                        }
                      </div>
                    }
                    name={"otaghakOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input12),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input12", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input12",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input12.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input12"}
                          data-plasmic-override={overrides.input12}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zh08K)}
                    >
                      <AntdButton
                        data-plasmic-name={"otaghakverify"}
                        data-plasmic-override={overrides.otaghakverify}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/otaghak-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.otaghakphone,
                                          otp: $state.form.value.otaghakOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["connectionStatus"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook/connection",
                                    undefined,
                                    (() => {
                                      try {
                                        return (
                                          "jabama=" +
                                          ($state.form.value.jabamaphone !== ""
                                            ? "true"
                                            : "false") +
                                          ", shab=" +
                                          ($state.form.value.shabphone !== ""
                                            ? "true"
                                            : "false") +
                                          ", jajiga=" +
                                          ($state.form.value.jajigaphone !== ""
                                            ? "true"
                                            : "false") +
                                          ", otaghak=" +
                                          ($state.form.value.otaghakphone !== ""
                                            ? "true"
                                            : "false")
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["connectionStatus"] != null &&
                            typeof $steps["connectionStatus"] === "object" &&
                            typeof $steps["connectionStatus"].then ===
                              "function"
                          ) {
                            $steps["connectionStatus"] = await $steps[
                              "connectionStatus"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yDjNu
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"otaghakverify5"}
                        data-plasmic-override={overrides.otaghakverify5}
                        className={classNames(
                          "__wab_instance",
                          sty.otaghakverify5
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 3
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue - 1
                                  );
                                  return oldValue - 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pvCkW
                          )}
                        >
                          {"\u0642\u0628\u0644\u06cc     >"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                ) : null}
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__oaIcA)}
                  initialValue={(() => {
                    try {
                      return $state.apiRequest.data[0].phone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mH3Hx
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0645\u06cc\u0647\u0645\u0627\u0646\u0634\u0648:"
                      }
                    </div>
                  }
                  name={"mihmanshophone"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input13),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input13", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder: ``,
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input13",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input13.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input13"}
                        data-plasmic-override={overrides.input13}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eRoDw)}
                  >
                    <AntdButton
                      data-plasmic-name={"mihmanshosend"}
                      data-plasmic-override={overrides.mihmanshosend}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshosend
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/mihmansho-send-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mihmanshophone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yTFsx
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mihmanshosend6"}
                      data-plasmic-override={overrides.mihmanshosend6}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshosend6
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 0,
                                value: $state.step + 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wmKfj
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ textDecorationLine: "underline" }}
                          >
                            {
                              "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdButton>
                  </div>
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__hKehi)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iIg1I
                      )}
                    >
                      {
                        "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0645\u06cc\u0647\u0645\u0627\u0646\u200c\u0634\u0648 (\u067e\u06cc\u0627\u0645\u06a9):"
                      }
                    </div>
                  }
                  name={"mihmanshoOTP"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input14),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input14", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder: (() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input14",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input14.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input14"}
                        data-plasmic-override={overrides.input14}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pwt8S)}
                  >
                    <AntdButton
                      data-plasmic-name={"mihmanshoverify"}
                      data-plasmic-override={overrides.mihmanshoverify}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshoverify
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/mihmansho-verify-otp",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mihmanshophone,
                                        otp: $state.form.value.mihmanshoOTP
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__do2Kb
                        )}
                      >
                        {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mihmanshoverify7"}
                      data-plasmic-override={overrides.mihmanshoverify7}
                      className={classNames(
                        "__wab_instance",
                        sty.mihmanshoverify7
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kbZYu
                        )}
                      >
                        {"\u0642\u0628\u0644\u06cc"}
                      </div>
                    </AntdButton>
                  </div>
                </FormItemWrapper>
                <div className={classNames(projectcss.all, sty.freeBox__r2Ses)}>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___3FYu8
                    )}
                    initialValue={(() => {
                      try {
                        return $state.apiRequest.data[0].phone;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c7V1T
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a \u0634\u062f\u0647 \u062f\u0631 \u0647\u0648\u0645\u0633\u0627:"
                        }
                      </div>
                    }
                    name={"homsaphone"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input15),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input15", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: ``,
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input15",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input15.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input15"}
                          data-plasmic-override={overrides.input15}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__xlxst
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1V2Wr
                        )}
                      >
                        {
                          "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0647\u0648\u0645\u0633\u0627:"
                        }
                      </div>
                    }
                    name={"homsaOTP"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input16),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input16", "value"],
                          AntdInput_Helpers
                        ),
                        placeholder: (() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        size: "large",
                        value: generateStateValueProp($state, [
                          "input16",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input16.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input16"}
                          data-plasmic-override={overrides.input16}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yeJoz)}
                    >
                      <AntdButton
                        data-plasmic-name={"homsaverify"}
                        data-plasmic-override={overrides.homsaverify}
                        className={classNames(
                          "__wab_instance",
                          sty.homsaverify
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://gateway.rentamon.com/webhook-test/homsa-verify-otp",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          phone: $state.form.value.homsaphone,
                                          otp: $state.form.value.homsaOTP
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1XeQd
                          )}
                        >
                          {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        data-plasmic-name={"homsaverify2"}
                        data-plasmic-override={overrides.homsaverify2}
                        className={classNames(
                          "__wab_instance",
                          sty.homsaverify2
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: $state.step + 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStep"] != null &&
                            typeof $steps["updateStep"] === "object" &&
                            typeof $steps["updateStep"].then === "function"
                          ) {
                            $steps["updateStep"] = await $steps["updateStep"];
                          }
                        }}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bmLnD
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ textDecorationLine: "underline" }}
                            >
                              {
                                "\u0627\u06cc\u0646 \u067e\u0644\u062a\u0641\u0631\u0645 \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </div>
                  </FormItemWrapper>
                </div>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__gR1Fp)}
                  initialValue={(() => {
                    try {
                      return $state.apiRequest.data[0].phone;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ffen5
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:"
                      }
                    </div>
                  }
                  name={"mizboonphone"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input17),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input17", "value"],
                        AntdInput_Helpers
                      ),
                      placeholder: ``,
                      size: "large",
                      value: generateStateValueProp($state, [
                        "input17",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input17.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input17"}
                        data-plasmic-override={overrides.input17}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h9XmX)}
                  >
                    <AntdButton
                      data-plasmic-name={"mizboonsend"}
                      data-plasmic-override={overrides.mizboonsend}
                      className={classNames("__wab_instance", sty.mizboonsend)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://gateway.rentamon.com/webhook/abcd",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        phone: $state.form.value.mizboonphone
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__beOte
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u0639\u0628\u0648\u0631"
                        }
                      </div>
                    </AntdButton>
                    <AntdButton
                      data-plasmic-name={"mizboonsend3"}
                      data-plasmic-override={overrides.mizboonsend3}
                      className={classNames("__wab_instance", sty.mizboonsend3)}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 3
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue - 1);
                                return oldValue - 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep"] != null &&
                          typeof $steps["updateStep"] === "object" &&
                          typeof $steps["updateStep"].then === "function"
                        ) {
                          $steps["updateStep"] = await $steps["updateStep"];
                        }
                      }}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t7GyR
                        )}
                      >
                        {"\u0642\u0628\u0644\u06cc"}
                      </div>
                    </AntdButton>
                  </div>
                  {(() => {
                    try {
                      return $state.step == 13;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lhpoq)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___4CcQp
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pWbfk
                            )}
                          >
                            {
                              "\u06a9\u062f \u0627\u062a\u0635\u0627\u0644 \u0628\u0647 \u0645\u06cc\u0632\u0628\u0648\u0646 (\u067e\u06cc\u0627\u0645\u06a9):"
                            }
                          </div>
                        }
                        name={"mizboonOTP"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input18
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input18", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input18",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input18.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input18"}
                              data-plasmic-override={overrides.input18}
                              {...child$Props}
                            />
                          );
                        })()}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1S4UR
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"mizboonverify"}
                            data-plasmic-override={overrides.mizboonverify}
                            className={classNames(
                              "__wab_instance",
                              sty.mizboonverify
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://gateway.rentamon.com/webhook/05d196d4-09ca-4f38-a274-e2cbfba43adf",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              phone:
                                                $state.form.value.mizboonphone,
                                              otp: $state.form.value.mizboonOTP
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5YV8A
                              )}
                            >
                              {"\u0645\u062a\u0635\u0644 \u06a9\u0646"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            data-plasmic-name={"mizboonverify4"}
                            data-plasmic-override={overrides.mizboonverify4}
                            className={classNames(
                              "__wab_instance",
                              sty.mizboonverify4
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["step"]
                                      },
                                      operation: 2,
                                      value: $state.step + 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateStep"] != null &&
                                typeof $steps["updateStep"] === "object" &&
                                typeof $steps["updateStep"].then === "function"
                              ) {
                                $steps["updateStep"] = await $steps[
                                  "updateStep"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__avS3F
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0633\u0627\u06cc\u062a \u0631\u0648 \u0646\u062f\u0627\u0631\u0645"
                              }
                            </div>
                          </AntdButton>
                        </div>
                      </FormItemWrapper>
                    </div>
                  ) : null}
                </FormItemWrapper>
                {(() => {
                  try {
                    return $state.step == 9;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"platformpropertyIds"}
                    data-plasmic-override={overrides.platformpropertyIds}
                    className={classNames(
                      projectcss.all,
                      sty.platformpropertyIds
                    )}
                  >
                    <div
                      data-plasmic-name={"jajigapp"}
                      data-plasmic-override={overrides.jajigapp}
                      className={classNames(projectcss.all, sty.jajigapp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___2ThdA
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kCgzs
                            )}
                          >
                            {
                              "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u062c\u0627\u062c\u06cc\u06af\u0627:"
                            }
                          </div>
                        }
                        name={"jajigacode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input19
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input19", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input19",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input19.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input19"}
                              data-plasmic-override={overrides.input19}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"shabpp"}
                      data-plasmic-override={overrides.shabpp}
                      className={classNames(projectcss.all, sty.shabpp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__qGiao
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oibLq
                            )}
                          >
                            {
                              "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u0634\u0628:"
                            }
                          </div>
                        }
                        name={"shabcode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input20
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input20", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input20",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input20.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input20"}
                              data-plasmic-override={overrides.input20}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"otaghakpp"}
                      data-plasmic-override={overrides.otaghakpp}
                      className={classNames(projectcss.all, sty.otaghakpp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__dGrRx
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zJqoP
                            )}
                          >
                            {
                              "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u0627\u062a\u0627\u0642\u06a9:"
                            }
                          </div>
                        }
                        name={"otaghakcode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input21
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input21", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input21",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input21.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input21"}
                              data-plasmic-override={overrides.input21}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"mihmanshopp"}
                      data-plasmic-override={overrides.mihmanshopp}
                      className={classNames(projectcss.all, sty.mihmanshopp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ssQkd
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xu2Et
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "کد " +
                                    $state.apiRequest.data[0].property_name +
                                    " در میهمان‌شو چیه\u061F"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        name={"mihmanshcode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input22
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input22", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input22",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input22.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input22"}
                              data-plasmic-override={overrides.input22}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"homsapp"}
                      data-plasmic-override={overrides.homsapp}
                      className={classNames(projectcss.all, sty.homsapp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__aL91N
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__df668
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "کد " +
                                    $state.apiRequest.data[0].property_name +
                                    " در هومسا چیه\u061F"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        name={"homsacode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input23
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input23", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input23",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input23.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input23"}
                              data-plasmic-override={overrides.input23}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"mizboonpp"}
                      data-plasmic-override={overrides.mizboonpp}
                      className={classNames(projectcss.all, sty.mizboonpp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__j82Mr
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kae8I
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "کد " +
                                    $state.apiRequest.data[0].property_name +
                                    " در میزبون چیه\u061F"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062b\u0628\u062a\u200c\u0646\u0627\u0645\u06cc \u062f\u0631 \u0645\u06cc\u0632\u0628\u0648\u0646:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        name={"mizbooncode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input24
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input24", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input24",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input24.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input24"}
                              data-plasmic-override={overrides.input24}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    <div
                      data-plasmic-name={"jabamapp"}
                      data-plasmic-override={overrides.jabamapp}
                      className={classNames(projectcss.all, sty.jabamapp)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__vLEop
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__spUvs
                            )}
                          >
                            {
                              "\u06a9\u062f \u0648\u06cc\u0644\u0627 \u062f\u0631 \u062c\u0627\u0628\u0627\u0645\u0627:"
                            }
                          </div>
                        }
                        name={"jabamacode"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input27
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input27", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: ``,
                            size: "large",
                            value: generateStateValueProp($state, [
                              "input27",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input27.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input27"}
                              data-plasmic-override={overrides.input27}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    </div>
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rfuv7
                        )}
                      >
                        <AntdButton
                          data-plasmic-name={"platformpropertyButton"}
                          data-plasmic-override={
                            overrides.platformpropertyButton
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.platformpropertyButton
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["showToast"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      (() => {
                                        try {
                                          return "با موفقیت ثبت شد!";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "bottom-center",
                                      6000
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["showToast"] != null &&
                              typeof $steps["showToast"] === "object" &&
                              typeof $steps["showToast"].then === "function"
                            ) {
                              $steps["showToast"] = await $steps["showToast"];
                            }

                            $steps["goToHttpsRentamonComPanels"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://rentamon.com/panels"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHttpsRentamonComPanels"] != null &&
                              typeof $steps["goToHttpsRentamonComPanels"] ===
                                "object" &&
                              typeof $steps["goToHttpsRentamonComPanels"]
                                .then === "function"
                            ) {
                              $steps["goToHttpsRentamonComPanels"] =
                                await $steps["goToHttpsRentamonComPanels"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://gateway.rentamon.com/webhook/platform-codes",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            jajigacode:
                                              $state.form.value.jajigacode,
                                            shabcode:
                                              $state.form.value.shabcode,
                                            otaghkcode:
                                              $state.form.value.otaghakcode,
                                            mihmanshocode:
                                              $state.form.value.mihmanshcode,
                                            homsacode:
                                              $state.form.value.homsacode,
                                            mizbooncode:
                                              $state.form.value.mizbooncode,
                                            jabamacode:
                                              $state.form.value.jabamacode
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__alu9P
                            )}
                          >
                            {"\u062b\u0628\u062a"}
                          </div>
                        </AntdButton>
                        <AntdButton
                          data-plasmic-name={"platformpropertyButton2"}
                          data-plasmic-override={
                            overrides.platformpropertyButton2
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.platformpropertyButton2
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 3
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue - 1
                                    );
                                    return oldValue - 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStep"] != null &&
                              typeof $steps["updateStep"] === "object" &&
                              typeof $steps["updateStep"].then === "function"
                            ) {
                              $steps["updateStep"] = await $steps["updateStep"];
                            }

                            $steps["goToHttpsRentamonComPanels"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: "https://rentamon.com/panels/"
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToHttpsRentamonComPanels"] != null &&
                              typeof $steps["goToHttpsRentamonComPanels"] ===
                                "object" &&
                              typeof $steps["goToHttpsRentamonComPanels"]
                                .then === "function"
                            ) {
                              $steps["goToHttpsRentamonComPanels"] =
                                await $steps["goToHttpsRentamonComPanels"];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___55Yt0
                            )}
                          >
                            {"\u0642\u0628\u0644\u06cc     >"}
                          </div>
                        </AntdButton>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "apiRequest",
    "form",
    "platforms",
    "policiesCheckbox",
    "link",
    "submitButton",
    "input26",
    "jabamasend2",
    "back",
    "skip",
    "input8",
    "jabamaverify",
    "jabamaverify2",
    "input7",
    "jajigasend",
    "jajigasend2",
    "jajigasend4",
    "input6",
    "jajigaverify",
    "jajigaverify2",
    "input9",
    "shabsend",
    "shabsend2",
    "shabsend4",
    "input10",
    "shabverify",
    "shabverify3",
    "input11",
    "otaghaksend",
    "otaghaksend4",
    "otaghaksend5",
    "input12",
    "otaghakverify",
    "otaghakverify5",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "input14",
    "mihmanshoverify",
    "mihmanshoverify7",
    "input15",
    "input16",
    "homsaverify",
    "homsaverify2",
    "input17",
    "mizboonsend",
    "mizboonsend3",
    "input18",
    "mizboonverify",
    "mizboonverify4",
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2"
  ],
  img: ["img"],
  apiRequest: ["apiRequest"],
  form: [
    "form",
    "platforms",
    "policiesCheckbox",
    "link",
    "submitButton",
    "input26",
    "jabamasend2",
    "back",
    "skip",
    "input8",
    "jabamaverify",
    "jabamaverify2",
    "input7",
    "jajigasend",
    "jajigasend2",
    "jajigasend4",
    "input6",
    "jajigaverify",
    "jajigaverify2",
    "input9",
    "shabsend",
    "shabsend2",
    "shabsend4",
    "input10",
    "shabverify",
    "shabverify3",
    "input11",
    "otaghaksend",
    "otaghaksend4",
    "otaghaksend5",
    "input12",
    "otaghakverify",
    "otaghakverify5",
    "input13",
    "mihmanshosend",
    "mihmanshosend6",
    "input14",
    "mihmanshoverify",
    "mihmanshoverify7",
    "input15",
    "input16",
    "homsaverify",
    "homsaverify2",
    "input17",
    "mizboonsend",
    "mizboonsend3",
    "input18",
    "mizboonverify",
    "mizboonverify4",
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2"
  ],
  platforms: ["platforms", "policiesCheckbox", "link", "submitButton"],
  policiesCheckbox: ["policiesCheckbox", "link"],
  link: ["link"],
  submitButton: ["submitButton"],
  input26: ["input26"],
  jabamasend2: ["jabamasend2"],
  back: ["back"],
  skip: ["skip"],
  input8: ["input8"],
  jabamaverify: ["jabamaverify"],
  jabamaverify2: ["jabamaverify2"],
  input7: ["input7"],
  jajigasend: ["jajigasend"],
  jajigasend2: ["jajigasend2"],
  jajigasend4: ["jajigasend4"],
  input6: ["input6"],
  jajigaverify: ["jajigaverify"],
  jajigaverify2: ["jajigaverify2"],
  input9: ["input9"],
  shabsend: ["shabsend"],
  shabsend2: ["shabsend2"],
  shabsend4: ["shabsend4"],
  input10: ["input10"],
  shabverify: ["shabverify"],
  shabverify3: ["shabverify3"],
  input11: ["input11"],
  otaghaksend: ["otaghaksend"],
  otaghaksend4: ["otaghaksend4"],
  otaghaksend5: ["otaghaksend5"],
  input12: ["input12"],
  otaghakverify: ["otaghakverify"],
  otaghakverify5: ["otaghakverify5"],
  input13: ["input13"],
  mihmanshosend: ["mihmanshosend"],
  mihmanshosend6: ["mihmanshosend6"],
  input14: ["input14"],
  mihmanshoverify: ["mihmanshoverify"],
  mihmanshoverify7: ["mihmanshoverify7"],
  input15: ["input15"],
  input16: ["input16"],
  homsaverify: ["homsaverify"],
  homsaverify2: ["homsaverify2"],
  input17: ["input17"],
  mizboonsend: ["mizboonsend"],
  mizboonsend3: ["mizboonsend3"],
  input18: ["input18"],
  mizboonverify: ["mizboonverify"],
  mizboonverify4: ["mizboonverify4"],
  platformpropertyIds: [
    "platformpropertyIds",
    "jajigapp",
    "input19",
    "shabpp",
    "input20",
    "otaghakpp",
    "input21",
    "mihmanshopp",
    "input22",
    "homsapp",
    "input23",
    "mizboonpp",
    "input24",
    "jabamapp",
    "input27",
    "platformpropertyButton",
    "platformpropertyButton2"
  ],
  jajigapp: ["jajigapp", "input19"],
  input19: ["input19"],
  shabpp: ["shabpp", "input20"],
  input20: ["input20"],
  otaghakpp: ["otaghakpp", "input21"],
  input21: ["input21"],
  mihmanshopp: ["mihmanshopp", "input22"],
  input22: ["input22"],
  homsapp: ["homsapp", "input23"],
  input23: ["input23"],
  mizboonpp: ["mizboonpp", "input24"],
  input24: ["input24"],
  jabamapp: ["jabamapp", "input27"],
  input27: ["input27"],
  platformpropertyButton: ["platformpropertyButton"],
  platformpropertyButton2: ["platformpropertyButton2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  apiRequest: typeof ApiRequest;
  form: typeof FormWrapper;
  platforms: typeof FormItemWrapper;
  policiesCheckbox: typeof Checkbox;
  link: "a";
  submitButton: typeof AntdButton;
  input26: typeof AntdInput;
  jabamasend2: typeof AntdButton;
  back: typeof AntdButton;
  skip: typeof AntdButton;
  input8: typeof AntdInput;
  jabamaverify: typeof AntdButton;
  jabamaverify2: typeof AntdButton;
  input7: typeof AntdInput;
  jajigasend: typeof AntdButton;
  jajigasend2: typeof AntdButton;
  jajigasend4: typeof AntdButton;
  input6: typeof AntdInput;
  jajigaverify: typeof AntdButton;
  jajigaverify2: typeof AntdButton;
  input9: typeof AntdInput;
  shabsend: typeof AntdButton;
  shabsend2: typeof AntdButton;
  shabsend4: typeof AntdButton;
  input10: typeof AntdInput;
  shabverify: typeof AntdButton;
  shabverify3: typeof AntdButton;
  input11: typeof AntdInput;
  otaghaksend: typeof AntdButton;
  otaghaksend4: typeof AntdButton;
  otaghaksend5: typeof AntdButton;
  input12: typeof AntdInput;
  otaghakverify: typeof AntdButton;
  otaghakverify5: typeof AntdButton;
  input13: typeof AntdInput;
  mihmanshosend: typeof AntdButton;
  mihmanshosend6: typeof AntdButton;
  input14: typeof AntdInput;
  mihmanshoverify: typeof AntdButton;
  mihmanshoverify7: typeof AntdButton;
  input15: typeof AntdInput;
  input16: typeof AntdInput;
  homsaverify: typeof AntdButton;
  homsaverify2: typeof AntdButton;
  input17: typeof AntdInput;
  mizboonsend: typeof AntdButton;
  mizboonsend3: typeof AntdButton;
  input18: typeof AntdInput;
  mizboonverify: typeof AntdButton;
  mizboonverify4: typeof AntdButton;
  platformpropertyIds: "div";
  jajigapp: "div";
  input19: typeof AntdInput;
  shabpp: "div";
  input20: typeof AntdInput;
  otaghakpp: "div";
  input21: typeof AntdInput;
  mihmanshopp: "div";
  input22: typeof AntdInput;
  homsapp: "div";
  input23: typeof AntdInput;
  mizboonpp: "div";
  input24: typeof AntdInput;
  jabamapp: "div";
  input27: typeof AntdInput;
  platformpropertyButton: typeof AntdButton;
  platformpropertyButton2: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivationNew__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivationNew__VariantsArgs;
    args?: PlasmicActivationNew__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivationNew__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivationNew__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActivationNew__ArgProps,
          internalVariantPropNames: PlasmicActivationNew__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivationNew__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivationNew";
  } else {
    func.displayName = `PlasmicActivationNew.${nodeName}`;
  }
  return func;
}

export const PlasmicActivationNew = Object.assign(
  // Top-level PlasmicActivationNew renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    apiRequest: makeNodeComponent("apiRequest"),
    form: makeNodeComponent("form"),
    platforms: makeNodeComponent("platforms"),
    policiesCheckbox: makeNodeComponent("policiesCheckbox"),
    link: makeNodeComponent("link"),
    submitButton: makeNodeComponent("submitButton"),
    input26: makeNodeComponent("input26"),
    jabamasend2: makeNodeComponent("jabamasend2"),
    back: makeNodeComponent("back"),
    skip: makeNodeComponent("skip"),
    input8: makeNodeComponent("input8"),
    jabamaverify: makeNodeComponent("jabamaverify"),
    jabamaverify2: makeNodeComponent("jabamaverify2"),
    input7: makeNodeComponent("input7"),
    jajigasend: makeNodeComponent("jajigasend"),
    jajigasend2: makeNodeComponent("jajigasend2"),
    jajigasend4: makeNodeComponent("jajigasend4"),
    input6: makeNodeComponent("input6"),
    jajigaverify: makeNodeComponent("jajigaverify"),
    jajigaverify2: makeNodeComponent("jajigaverify2"),
    input9: makeNodeComponent("input9"),
    shabsend: makeNodeComponent("shabsend"),
    shabsend2: makeNodeComponent("shabsend2"),
    shabsend4: makeNodeComponent("shabsend4"),
    input10: makeNodeComponent("input10"),
    shabverify: makeNodeComponent("shabverify"),
    shabverify3: makeNodeComponent("shabverify3"),
    input11: makeNodeComponent("input11"),
    otaghaksend: makeNodeComponent("otaghaksend"),
    otaghaksend4: makeNodeComponent("otaghaksend4"),
    otaghaksend5: makeNodeComponent("otaghaksend5"),
    input12: makeNodeComponent("input12"),
    otaghakverify: makeNodeComponent("otaghakverify"),
    otaghakverify5: makeNodeComponent("otaghakverify5"),
    input13: makeNodeComponent("input13"),
    mihmanshosend: makeNodeComponent("mihmanshosend"),
    mihmanshosend6: makeNodeComponent("mihmanshosend6"),
    input14: makeNodeComponent("input14"),
    mihmanshoverify: makeNodeComponent("mihmanshoverify"),
    mihmanshoverify7: makeNodeComponent("mihmanshoverify7"),
    input15: makeNodeComponent("input15"),
    input16: makeNodeComponent("input16"),
    homsaverify: makeNodeComponent("homsaverify"),
    homsaverify2: makeNodeComponent("homsaverify2"),
    input17: makeNodeComponent("input17"),
    mizboonsend: makeNodeComponent("mizboonsend"),
    mizboonsend3: makeNodeComponent("mizboonsend3"),
    input18: makeNodeComponent("input18"),
    mizboonverify: makeNodeComponent("mizboonverify"),
    mizboonverify4: makeNodeComponent("mizboonverify4"),
    platformpropertyIds: makeNodeComponent("platformpropertyIds"),
    jajigapp: makeNodeComponent("jajigapp"),
    input19: makeNodeComponent("input19"),
    shabpp: makeNodeComponent("shabpp"),
    input20: makeNodeComponent("input20"),
    otaghakpp: makeNodeComponent("otaghakpp"),
    input21: makeNodeComponent("input21"),
    mihmanshopp: makeNodeComponent("mihmanshopp"),
    input22: makeNodeComponent("input22"),
    homsapp: makeNodeComponent("homsapp"),
    input23: makeNodeComponent("input23"),
    mizboonpp: makeNodeComponent("mizboonpp"),
    input24: makeNodeComponent("input24"),
    jabamapp: makeNodeComponent("jabamapp"),
    input27: makeNodeComponent("input27"),
    platformpropertyButton: makeNodeComponent("platformpropertyButton"),
    platformpropertyButton2: makeNodeComponent("platformpropertyButton2"),

    // Metadata about props expected for PlasmicActivationNew
    internalVariantProps: PlasmicActivationNew__VariantProps,
    internalArgProps: PlasmicActivationNew__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivationNew;
/* prettier-ignore-end */
