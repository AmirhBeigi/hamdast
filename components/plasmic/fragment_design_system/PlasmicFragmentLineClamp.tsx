// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qo5fwZT3vwQ9RjjQNWCz9z
// Component: UrqY_XZuYhn2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: qo5fwZT3vwQ9RjjQNWCz9z/projectcss
import sty from "./PlasmicFragmentLineClamp.module.css"; // plasmic-import: UrqY_XZuYhn2/css

createPlasmicElementProxy;

export type PlasmicFragmentLineClamp__VariantMembers = {};
export type PlasmicFragmentLineClamp__VariantsArgs = {};
type VariantPropType = keyof PlasmicFragmentLineClamp__VariantsArgs;
export const PlasmicFragmentLineClamp__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFragmentLineClamp__ArgsType = {
  children?: React.ReactNode;
  numberOfLines?: number;
};
type ArgPropType = keyof PlasmicFragmentLineClamp__ArgsType;
export const PlasmicFragmentLineClamp__ArgProps = new Array<ArgPropType>(
  "children",
  "numberOfLines"
);

export type PlasmicFragmentLineClamp__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultFragmentLineClampProps {
  children?: React.ReactNode;
  numberOfLines?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFragmentLineClamp__RenderFunc(props: {
  variants: PlasmicFragmentLineClamp__VariantsArgs;
  args: PlasmicFragmentLineClamp__ArgsType;
  overrides: PlasmicFragmentLineClamp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          numberOfLines: 1
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      style={(() => {
        try {
          return {
            overflow: "hidden",
            "-webkit-line-clamp": $props.numberOfLines.toString(),
            "-webkit-box-orient": "vertical",
            display: "-webkit-box"
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dIvSw
            )}
          >
            {
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec non est felis. Curabitur nibh velit, vehicula quis orci at, scelerisque malesuada sem. Ut tincidunt nisl nunc. Fusce in mollis enim, sodales porta eros. Sed quis pharetra tortor. Donec pulvinar bibendum ligula ultricies rutrum. Morbi ultricies ipsum vel augue venenatis interdum. Sed sodales cursus lectus, eget congue purus facilisis id. Suspendisse nec vestibulum justo, quis tincidunt justo. Morbi a nibh pharetra, vestibulum orci nec, varius magna. Duis blandit eros urna, sed iaculis tortor consequat non. Donec finibus, diam faucibus sodales condimentum, leo arcu egestas mauris, vitae sollicitudin leo nulla ut nisi."
            }
          </div>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFragmentLineClamp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFragmentLineClamp__VariantsArgs;
    args?: PlasmicFragmentLineClamp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFragmentLineClamp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFragmentLineClamp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFragmentLineClamp__ArgProps,
          internalVariantPropNames: PlasmicFragmentLineClamp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFragmentLineClamp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFragmentLineClamp";
  } else {
    func.displayName = `PlasmicFragmentLineClamp.${nodeName}`;
  }
  return func;
}

export const PlasmicFragmentLineClamp = Object.assign(
  // Top-level PlasmicFragmentLineClamp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFragmentLineClamp
    internalVariantProps: PlasmicFragmentLineClamp__VariantProps,
    internalArgProps: PlasmicFragmentLineClamp__ArgProps
  }
);

export default PlasmicFragmentLineClamp;
/* prettier-ignore-end */
