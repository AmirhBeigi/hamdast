/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: 01z6Jy-KWQkM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { Switch } from "@/fragment/components/switch"; // plasmic-import: Zc1MrGUtH5nc/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_ravi_design_system } from "../ravi_design_system/PlasmicStyleTokensProvider"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicBuildAuthorization.module.css"; // plasmic-import: 01z6Jy-KWQkM/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: m-5uHwTYBv5w/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: 3P4kCztjZFA7/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 09kUgGvbipjq/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: c8EwO1fm8dRF/icon
import Icon41Icon from "./icons/PlasmicIcon__Icon41"; // plasmic-import: DoezJRNgA6sA/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: UuDHOUXMn1lI/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: RQYF77Lo96ru/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicBuildAuthorization__VariantMembers = {};
export type PlasmicBuildAuthorization__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuildAuthorization__VariantsArgs;
export const PlasmicBuildAuthorization__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBuildAuthorization__ArgsType = {};
type ArgPropType = keyof PlasmicBuildAuthorization__ArgsType;
export const PlasmicBuildAuthorization__ArgProps = new Array<ArgPropType>();

export type PlasmicBuildAuthorization__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  apiRequest?: Flex__<typeof ApiRequest>;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput4?: Flex__<typeof Input>;
  fragmentInput5?: Flex__<typeof Input>;
  _switch?: Flex__<typeof Switch>;
  switch2?: Flex__<typeof Switch>;
};

export interface DefaultBuildAuthorizationProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBuildAuthorization__RenderFunc(props: {
  variants: PlasmicBuildAuthorization__VariantsArgs;
  args: PlasmicBuildAuthorization__ArgsType;
  overrides: PlasmicBuildAuthorization__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.client_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.client_secret;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput5[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "redirectUris",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.redirect_uris?.map(
                (item, index) => ({ id: index + 1, value: item })
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "redirectUriButtonLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "_switch[].checked",
        type: "private",
        variableType: "text"
      },
      {
        path: "switch2[].checked",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_ravi_design_system =
    useStyleTokens_ravi_design_system();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicBuildAuthorization.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBuildAuthorization.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBuildAuthorization.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_ravi_design_system,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1][0].toUpperCase() +
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jZThm,
                  "no-scroll"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__csJa7
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#0000003D" }}
                    >
                      {"\u0633\u0627\u062e\u062a / "}
                    </span>
                    <React.Fragment>
                      {
                        "OAuth \u0648 \u062f\u0633\u062a\u0631\u0633\u06cc \u0647\u0627"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={null}
                  loadingDisplay={
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg__hvEcx)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/oauth/`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__emdJp)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gj7O0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vpcQ2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uzV8P
                          )}
                        >
                          <Icon35Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dYv2N
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Fw6
                            )}
                          >
                            {"Client ID"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vqVbn
                          )}
                        >
                          {
                            " \u0628\u0627\u06cc\u062f \u062f\u0631 \u0647\u0646\u06af\u0627\u0645 \u062f\u0631\u062e\u0648\u0627\u0633\u062a access token \u0648 \u0628\u0627\u0632 \u06a9\u0631\u062f\u0646 \u0635\u0641\u062d\u0647 OAtuh \u062f\u0631 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 client_id \u0628\u0641\u0631\u0633\u062a\u06cc\u062f. "
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Wr3B
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $$.copyToClipboard(
                                      $state.apiRequest.data?.client_id
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u06a9\u067e\u06cc \u0634\u062f.",
                                    "top-left"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                      >
                        <Input
                          data-plasmic-name={"fragmentInput3"}
                          data-plasmic-override={overrides.fragmentInput3}
                          attributes={{ dir: "ltr", readOnly: true }}
                          className={classNames(
                            "__wab_instance",
                            sty.fragmentInput3
                          )}
                          disabled={false}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "fragmentInput3",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "fragmentInput3",
                            "value"
                          ])}
                        />

                        <Icon24Icon
                          className={classNames(projectcss.all, sty.svg__oWjCr)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iCzUk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mrgjS
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zwPnv
                          )}
                        >
                          <Icon19Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sMxN
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__s2ToM
                            )}
                          >
                            {"Client Secret"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vWhj4
                          )}
                        >
                          {
                            "\u0628\u0627\u06cc\u062f \u062f\u0631 \u0647\u0646\u06af\u0627\u0645 \u062f\u0631\u062e\u0648\u0627\u0633\u062a access token \u062f\u0631 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 client_secret \u0628\u0641\u0631\u0633\u062a\u06cc\u062f. "
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dp5Sf
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "\u0644\u0637\u0641\u0627\u064b \u062f\u0631 \u062d\u0641\u0638 \u0648 \u0646\u06af\u0647\u062f\u0627\u0631\u06cc \u0622\u0646 \u062f\u0642\u062a \u06a9\u0646\u06cc\u062f\u060c \u0632\u06cc\u0631\u0627 \u0627\u06cc\u0646 \u06a9\u0644\u06cc\u062f"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-YAl0V-Ojahwz)" }}
                            >
                              {" "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                color: "var(--token-YAl0V-Ojahwz)",
                                fontWeight: 700
                              }}
                            >
                              {"\u0645\u062d\u0631\u0645\u0627\u0646\u0647 "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"\u00a0"}
                            </span>
                            <React.Fragment>
                              {"\u0627\u0633\u062a."}
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zGWb
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $$.copyToClipboard(
                                      $state.apiRequest.data?.client_secret
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "\u06a9\u067e\u06cc \u0634\u062f.",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                      >
                        <Input
                          data-plasmic-name={"fragmentInput4"}
                          data-plasmic-override={overrides.fragmentInput4}
                          attributes={{ dir: "ltr", readOnly: true }}
                          className={classNames(
                            "__wab_instance",
                            sty.fragmentInput4
                          )}
                          disabled={false}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "fragmentInput4",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          type={"password"}
                          value={generateStateValueProp($state, [
                            "fragmentInput4",
                            "value"
                          ])}
                        />

                        <Icon24Icon
                          className={classNames(projectcss.all, sty.svg__jSvBh)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cphCs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rxrEw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ba9C2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hqJhc
                          )}
                        >
                          <Icon44Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__g99Yk
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j44Pp
                            )}
                          >
                            {
                              "\u0622\u062f\u0631\u0633\u200c\u0647\u0627\u06cc \u0645\u062c\u0627\u0632 \u0628\u0631\u0627\u06cc \u0647\u062f\u0627\u06cc\u062a \u0627\u0632 OAuth\r"
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i8Mr7
                          )}
                        >
                          {
                            "\u0645\u0642\u062f\u0627\u0631\u06cc \u06a9\u0647 \u062f\u0631 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 redirect_uri \u062f\u0631 \u0641\u0631\u0627\u06cc\u0646\u062f OAuth \u0645\u06cc\u200c\u0641\u0631\u0633\u062a\u06cc\u062f\u060c \u0628\u0627\u06cc\u062f \u0639\u06cc\u0646\u0627\u064b \u0645\u0634\u0627\u0628\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0622\u062f\u0631\u0633\u200c\u0647\u0627\u06cc \u0632\u06cc\u0631 \u0628\u0627\u0634\u062f.\r"
                          }
                        </div>
                      </div>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.redirectUris;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tyYbW
                          )}
                          key={(() => {
                            try {
                              return currentItem.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <Icon41Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oEcm2
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateRedirectUris"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["redirectUris"]
                                      },
                                      operation: 6,
                                      startIndex: (() => {
                                        try {
                                          return currentIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      deleteCount: (() => {
                                        try {
                                          return currentIndex + 1;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 2;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const arr = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      arr.splice(startIndex, deleteCount);
                                      return arr;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateRedirectUris"] != null &&
                                typeof $steps["updateRedirectUris"] ===
                                  "object" &&
                                typeof $steps["updateRedirectUris"].then ===
                                  "function"
                              ) {
                                $steps["updateRedirectUris"] = await $steps[
                                  "updateRedirectUris"
                                ];
                              }
                            }}
                            role={"img"}
                          />

                          {(() => {
                            const child$Props = {
                              attributes: { dir: "ltr" },
                              className: classNames(
                                "__wab_instance",
                                sty.fragmentInput5
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "fragmentInput5",
                                  __plasmic_idx_0,
                                  "value"
                                ]).apply(null, eventArgs);

                                (async value => {
                                  const $steps = {};

                                  $steps["updateRedirectUris"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["redirectUris"]
                                          },
                                          operation: 0,
                                          value: $state.redirectUris.map(item =>
                                            item.id === currentItem.id
                                              ? { ...item, value: value }
                                              : item
                                          )
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateRedirectUris"] != null &&
                                    typeof $steps["updateRedirectUris"] ===
                                      "object" &&
                                    typeof $steps["updateRedirectUris"].then ===
                                      "function"
                                  ) {
                                    $steps["updateRedirectUris"] = await $steps[
                                      "updateRedirectUris"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              placeholder: "https://...",
                              type: "text",
                              value: generateStateValueProp($state, [
                                "fragmentInput5",
                                __plasmic_idx_0,
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "fragmentInput5[].value"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "fragmentInput5[].value",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Input
                                data-plasmic-name={"fragmentInput5"}
                                data-plasmic-override={overrides.fragmentInput5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      );
                    })}
                    <Paziresh24Button
                      children2={
                        "\u0622\u062f\u0631\u0633 \u062c\u062f\u06cc\u062f"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__ls7R
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateRedirectUris"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["redirectUris"]
                                },
                                operation: 5,
                                value: {
                                  id:
                                    $state.redirectUris.length > 0
                                      ? $state.redirectUris.length + 1
                                      : 1,
                                  value: ""
                                }
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const arr = $stateGet(objRoot, variablePath);
                                arr.push(value);
                                return arr;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRedirectUris"] != null &&
                          typeof $steps["updateRedirectUris"] === "object" &&
                          typeof $steps["updateRedirectUris"].then ===
                            "function"
                        ) {
                          $steps["updateRedirectUris"] = await $steps[
                            "updateRedirectUris"
                          ];
                        }
                      }}
                      outline={true}
                      showStartIcon={true}
                      size={"compact"}
                      startIcon={
                        <Icon21Icon
                          className={classNames(projectcss.all, sty.svg__fp4Bu)}
                          role={"img"}
                        />
                      }
                    />

                    <Paziresh24Button
                      children2={
                        "\u062b\u0628\u062a \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__qXvWl
                      )}
                      loading={(() => {
                        try {
                          return $state.redirectUriButtonLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["startLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["redirectUriButtonLoading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["startLoading"] != null &&
                          typeof $steps["startLoading"] === "object" &&
                          typeof $steps["startLoading"].then === "function"
                        ) {
                          $steps["startLoading"] = await $steps["startLoading"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PATCH",
                                  (() => {
                                    try {
                                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/oauth/`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        redirect_uris: $state.redirectUris
                                          .filter(item => !!item.value)
                                          .map(item => item.value)
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["finishLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["redirectUriButtonLoading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["finishLoading"] != null &&
                          typeof $steps["finishLoading"] === "object" &&
                          typeof $steps["finishLoading"].then === "function"
                        ) {
                          $steps["finishLoading"] = await $steps[
                            "finishLoading"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      }}
                      startIcon={
                        <Icon21Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___34TxI
                          )}
                          role={"img"}
                        />
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t9DQr)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__t1EOk)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vqXdD
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nwt1A
                          )}
                        >
                          <Icon45Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lygW0
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r9J4K
                            )}
                          >
                            {
                              "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0633\u062a\u0631\u0633\u06cc\u200c\u0647\u0627\r\n\r"
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rKKvE
                          )}
                        >
                          {
                            "\u062f\u0633\u062a\u0631\u0633\u06cc \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u062f \u0631\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ry0Tn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iivWw
                        )}
                      >
                        {"\u067e\u0632\u0634\u06a9\u0627\u0646"}
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              {
                                id: "9766071d-5dcd-41e8-bc61-ced0450960ee",
                                permission: "provider.profile.read",
                                description:
                                  "دسترسی مشاهده اطلاعات پزشک، تخصص ها و مراکز درمانی..."
                              },
                              {
                                id: "cf323c7a-917c-4570-8892-d4c73ecda1b7",
                                permission: "provider.profile.write",
                                description:
                                  "دسترسی ویرایش اطلاعات پزشک، تخصص ها و مراکز درمانی..."
                              },
                              {
                                permission: "provider.appointment.read",
                                description: "دسترسی مشاهده نوبت های پزشک"
                              },
                              {
                                permission: "provider.appointment.write",
                                description: "دسترسی حذف نوبت های پزشک"
                              },
                              {
                                permission: "provider.management.read",
                                description:
                                  "دسترسی مشاهده ساعت کاری و مرخصی های پزشک"
                              },
                              {
                                permission: "provider.management.write",
                                description:
                                  "دسترسی تنظیم ساعت کاری و مرخصی های پزشک"
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ijX9
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__raWL
                              )}
                              style={(() => {
                                try {
                                  return {
                                    opacity: !currentItem?.id ? 0.5 : 1
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hpeOg
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.permission;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Ttjl
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.description;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            {(() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "_switch",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty._switch
                                ),
                                disabled: (() => {
                                  try {
                                    return !currentItem?.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                onCheckedChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "_switch",
                                    __plasmic_idx_0,
                                    "checked"
                                  ]).apply(null, eventArgs);

                                  (async checked => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = !!checked
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "PATCH",
                                              (() => {
                                                try {
                                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/oauth/scope/${currentItem.id}/`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["invokeGlobalAction2"] = !checked
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "DELETE",
                                              (() => {
                                                try {
                                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/oauth/scope/${currentItem.id}/`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction2"] != null &&
                                      typeof $steps["invokeGlobalAction2"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction2"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction2"] =
                                        await $steps["invokeGlobalAction2"];
                                    }
                                  }).apply(null, eventArgs);
                                }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "_switch[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "_switch[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.apiRequest.data.scopes.includes(
                                            currentItem.permission
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Switch
                                  data-plasmic-name={"_switch"}
                                  data-plasmic-override={overrides._switch}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        );
                      })}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vHfYv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xMkzt
                        )}
                      >
                        {
                          "\u06a9\u0627\u0631\u0628\u0631 (\u0646\u0642\u0634 \u0628\u06cc\u0645\u0627\u0631)\r"
                        }
                      </div>
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              {
                                id: "d6b32220-2360-4aaf-aaeb-f60db811b078",
                                permission: "user.profile.read",
                                description: "دسترسی مشاهده اطلاعات کاربر"
                              },
                              {
                                permission: "user.profile.write",
                                description: "دسترسی ویرایش اطلاعات کاربر"
                              },
                              {
                                id: "43b0c566-a076-4d6f-ac91-f3b61e912702",
                                permission: "user.appointment.read",
                                description: "دسترسی مشاهده نوبت های کاربر"
                              },
                              {
                                permission: "user.appointment.write",
                                description: "دسترسی حذف نوبت های کاربر"
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eV5EU
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n6LvL
                              )}
                              style={(() => {
                                try {
                                  return {
                                    opacity: !currentItem?.id ? 0.5 : 1
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lCdY0
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.permission;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Q9W
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.description;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            {(() => {
                              const child$Props = {
                                checked: generateStateValueProp($state, [
                                  "switch2",
                                  __plasmic_idx_0,
                                  "checked"
                                ]),
                                className: classNames(
                                  "__wab_instance",
                                  sty.switch2
                                ),
                                disabled: (() => {
                                  try {
                                    return !currentItem?.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                onCheckedChange: async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "switch2",
                                    __plasmic_idx_0,
                                    "checked"
                                  ]).apply(null, eventArgs);

                                  (async checked => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "PATCH",
                                              (() => {
                                                try {
                                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/oauth/scope/${currentItem.id}/`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  }).apply(null, eventArgs);
                                }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "checked",
                                    plasmicStateName: "switch2[].checked"
                                  }
                                ],
                                [__plasmic_idx_0],
                                undefined ?? {},
                                child$Props
                              );
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "switch2[].checked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.apiRequest.data.scopes.includes(
                                            currentItem.permission
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Switch
                                  data-plasmic-name={"switch2"}
                                  data-plasmic-override={overrides.switch2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </ApiRequest>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "apiRequest",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "_switch",
    "switch2"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "apiRequest",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "_switch",
    "switch2"
  ],
  layout: [
    "layout",
    "apiRequest",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "_switch",
    "switch2"
  ],
  apiRequest: [
    "apiRequest",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "_switch",
    "switch2"
  ],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput4: ["fragmentInput4"],
  fragmentInput5: ["fragmentInput5"],
  _switch: ["_switch"],
  switch2: ["switch2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  apiRequest: typeof ApiRequest;
  fragmentInput3: typeof Input;
  fragmentInput4: typeof Input;
  fragmentInput5: typeof Input;
  _switch: typeof Switch;
  switch2: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuildAuthorization__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuildAuthorization__VariantsArgs;
    args?: PlasmicBuildAuthorization__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuildAuthorization__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBuildAuthorization__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBuildAuthorization__ArgProps,
          internalVariantPropNames: PlasmicBuildAuthorization__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBuildAuthorization__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuildAuthorization";
  } else {
    func.displayName = `PlasmicBuildAuthorization.${nodeName}`;
  }
  return func;
}

export const PlasmicBuildAuthorization = Object.assign(
  // Top-level PlasmicBuildAuthorization renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    apiRequest: makeNodeComponent("apiRequest"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput4: makeNodeComponent("fragmentInput4"),
    fragmentInput5: makeNodeComponent("fragmentInput5"),
    _switch: makeNodeComponent("_switch"),
    switch2: makeNodeComponent("switch2"),

    // Metadata about props expected for PlasmicBuildAuthorization
    internalVariantProps: PlasmicBuildAuthorization__VariantProps,
    internalArgProps: PlasmicBuildAuthorization__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "OAuth و دسترسی‌ها",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBuildAuthorization;
/* prettier-ignore-end */
