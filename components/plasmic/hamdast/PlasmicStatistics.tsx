// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: nAbrCePpa8PZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import Menu from "../../Menu"; // plasmic-import: 73TqujunaOu5/component
import FetchData from "../../FetchData"; // plasmic-import: -UcPqMSXVAGv/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import Filter from "../../Filter"; // plasmic-import: YY41SIghQUgw/component
import { Chart } from "@/fragment/components/chart"; // plasmic-import: oU2v2at0brmo/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicStatistics.module.css"; // plasmic-import: nAbrCePpa8PZ/css

import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: t3gBl-ZhsAb2/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: 1FObiVFN1kNa/icon

createPlasmicElementProxy;

export type PlasmicStatistics__VariantMembers = {};
export type PlasmicStatistics__VariantsArgs = {};
type VariantPropType = keyof PlasmicStatistics__VariantsArgs;
export const PlasmicStatistics__VariantProps = new Array<VariantPropType>();

export type PlasmicStatistics__ArgsType = {};
type ArgPropType = keyof PlasmicStatistics__ArgsType;
export const PlasmicStatistics__ArgProps = new Array<ArgPropType>();

export type PlasmicStatistics__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  fetchData?: Flex__<typeof FetchData>;
  pageViewApi?: Flex__<typeof ApiRequest>;
  activeUserApi?: Flex__<typeof ApiRequest>;
  fragmentApiRequest2?: Flex__<typeof ApiRequest>;
  filter?: Flex__<typeof Filter>;
  fetchData2?: Flex__<typeof FetchData>;
};

export interface DefaultStatisticsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatistics__RenderFunc(props: {
  variants: PlasmicStatistics__VariantsArgs;
  args: PlasmicStatistics__ArgsType;
  overrides: PlasmicStatistics__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "menu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return -1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "day",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "fetchData2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pageViewApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pageViewApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pageViewApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activeUserApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activeUserApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "activeUserApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicStatistics.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicStatistics.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicStatistics.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/style.css"\r\n/>\r\n<script src="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={generateStateOnChangeProp($state, [
              "authProvider",
              "apps"
            ])}
            onUserChange={generateStateOnChangeProp($state, [
              "authProvider",
              "user"
            ])}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute.split("/")[3][0].toUpperCase() +
                    $ctx.pageRoute.split("/")[3].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jnlGg)}>
                <div className={classNames(projectcss.all, sty.freeBox__dmEfe)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pg3E7)}
                  >
                    <Menu
                      active={(() => {
                        try {
                          return -1 === $state.menu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.menu__graj)}
                      compact={true}
                      icon={true}
                      iconWrapper={
                        <Icon17Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8TMae
                          )}
                          role={"img"}
                        />
                      }
                      name={"\u0646\u06af\u0627\u0647 \u06a9\u0644\u06cc"}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateDay"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["day"]
                                },
                                operation: 0,
                                value: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDay"] != null &&
                          typeof $steps["updateDay"] === "object" &&
                          typeof $steps["updateDay"].then === "function"
                        ) {
                          $steps["updateDay"] = await $steps["updateDay"];
                        }

                        $steps["updateMenu"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["menu"]
                                },
                                operation: 0,
                                value: -1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMenu"] != null &&
                          typeof $steps["updateMenu"] === "object" &&
                          typeof $steps["updateMenu"].then === "function"
                        ) {
                          $steps["updateMenu"] = await $steps["updateMenu"];
                        }
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qy6Ib
                      )}
                    >
                      {
                        "\u0645\u0646\u0648\u0647\u0627\u06cc \u0627\u064e\u0628\u0632\u0627\u0631\u06a9"
                      }
                    </div>
                    <FetchData
                      data-plasmic-name={"fetchData"}
                      data-plasmic-override={overrides.fetchData}
                      className={classNames("__wab_instance", sty.fetchData)}
                      loadingStatus={
                        <Icon15Icon
                          className={classNames(projectcss.all, sty.svg__qmEup)}
                          role={"img"}
                        />
                      }
                      onDataChange={generateStateOnChangeProp($state, [
                        "fetchData",
                        "data"
                      ])}
                      onLoadingChange={generateStateOnChangeProp($state, [
                        "fetchData",
                        "loading"
                      ])}
                      url={(() => {
                        try {
                          return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yRzdo
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.fetchData.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Menu
                              active={(() => {
                                try {
                                  return currentItem.id === $state.menu;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.menu__j6YWr
                              )}
                              compact={true}
                              icon={false}
                              iconWrapper={null}
                              key={currentIndex}
                              name={(() => {
                                try {
                                  return currentItem.name_fa;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async () => {
                                const $steps = {};

                                $steps["updateDay"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["day"]
                                        },
                                        operation: 0,
                                        value: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDay"] != null &&
                                  typeof $steps["updateDay"] === "object" &&
                                  typeof $steps["updateDay"].then === "function"
                                ) {
                                  $steps["updateDay"] = await $steps[
                                    "updateDay"
                                  ];
                                }

                                $steps["updateMenu"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["menu"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateMenu"] != null &&
                                  typeof $steps["updateMenu"] === "object" &&
                                  typeof $steps["updateMenu"].then ===
                                    "function"
                                ) {
                                  $steps["updateMenu"] = await $steps[
                                    "updateMenu"
                                  ];
                                }
                              }}
                            />
                          );
                        })}
                      </Stack__>
                    </FetchData>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jnCjc)}
                  >
                    {(() => {
                      try {
                        return $state.fetchData2.data?.length != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tm7Ne
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fc4Id
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bca2T
                            )}
                          >
                            <ApiRequest
                              data-plasmic-name={"pageViewApi"}
                              data-plasmic-override={overrides.pageViewApi}
                              className={classNames(
                                "__wab_instance",
                                sty.pageViewApi
                              )}
                              errorDisplay={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__b3Knp
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4YVw
                                    )}
                                  >
                                    {
                                      "\u0628\u0627\u0632\u062f\u06cc\u062f \u0627\u0632 \u0635\u0641\u062d\u0627\u062a"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tvlJu
                                    )}
                                  >
                                    {
                                      "\u0645\u06cc\u0632\u0627\u0646 \u0628\u0627\u0632\u062f\u06cc\u062f \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                    }
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qDf0A
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kfIja
                                      )}
                                    >
                                      {"\u06f0"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yEyk
                                      )}
                                    >
                                      {"\u0628\u0627\u0632\u062f\u06cc\u062f"}
                                    </div>
                                  </Stack__>
                                </Stack__>
                              }
                              loadingDisplay={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__p5WL7
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4LQlp
                                    )}
                                  >
                                    {
                                      "\u0628\u0627\u0632\u062f\u06cc\u062f \u0627\u0632 \u0635\u0641\u062d\u0627\u062a"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__d0Z0
                                    )}
                                  >
                                    {
                                      "\u0645\u06cc\u0632\u0627\u0646 \u0628\u0627\u0632\u062f\u06cc\u062f \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                    }
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wq9IF
                                    )}
                                  >
                                    <Icon15Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__jwkEj
                                      )}
                                      role={"img"}
                                    />
                                  </Stack__>
                                </div>
                              }
                              method={"GET"}
                              onError={generateStateOnChangeProp($state, [
                                "pageViewApi",
                                "error"
                              ])}
                              onLoading={generateStateOnChangeProp($state, [
                                "pageViewApi",
                                "loading"
                              ])}
                              onSuccess={generateStateOnChangeProp($state, [
                                "pageViewApi",
                                "data"
                              ])}
                              url={(() => {
                                try {
                                  return (() => {
                                    if ($state.menu === -1) {
                                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/analytics/?days_ago=30`;
                                    }
                                    return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/${$state.menu}/analytics/?days_ago=30`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___167Xt
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__azACw
                                  )}
                                >
                                  {
                                    "\u0628\u0627\u0632\u062f\u06cc\u062f \u0627\u0632 \u0635\u0641\u062d\u0627\u062a"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___08At
                                  )}
                                >
                                  {
                                    "\u0645\u06cc\u0632\u0627\u0646 \u0628\u0627\u0632\u062f\u06cc\u062f \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                  }
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fh7Qo
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qBk6W
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return new Intl.NumberFormat(
                                            "fa-IR"
                                          ).format(
                                            $state.pageViewApi.data?.length
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0641\u0639\u0627\u0644";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jLo5
                                    )}
                                  >
                                    {"\u0628\u0627\u0632\u062f\u06cc\u062f"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </ApiRequest>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xK8V3
                            )}
                          >
                            <ApiRequest
                              data-plasmic-name={"activeUserApi"}
                              data-plasmic-override={overrides.activeUserApi}
                              className={classNames(
                                "__wab_instance",
                                sty.activeUserApi
                              )}
                              errorDisplay={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__d3M2H
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tgRwa
                                    )}
                                  >
                                    {
                                      "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0641\u0639\u0627\u0644"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__twFwy
                                    )}
                                  >
                                    {
                                      "\u062a\u0639\u062f\u0627\u062f \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u06cc\u06a9\u062a\u0627 \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                    }
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__aovi9
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yrbVa
                                      )}
                                    >
                                      {"\u06f0"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qss5Q
                                      )}
                                    >
                                      {"\u06a9\u0627\u0631\u0628\u0631"}
                                    </div>
                                  </Stack__>
                                </Stack__>
                              }
                              loadingDisplay={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__usmKj
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__f7DuK
                                    )}
                                  >
                                    {
                                      "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0641\u0639\u0627\u0644"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__esj6Y
                                    )}
                                  >
                                    {
                                      "\u062a\u0639\u062f\u0627\u062f \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u06cc\u06a9\u062a\u0627 \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                    }
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___1Hfuf
                                    )}
                                  >
                                    <Icon15Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__xt4Mh
                                      )}
                                      role={"img"}
                                    />
                                  </Stack__>
                                </div>
                              }
                              method={"GET"}
                              onError={generateStateOnChangeProp($state, [
                                "activeUserApi",
                                "error"
                              ])}
                              onLoading={generateStateOnChangeProp($state, [
                                "activeUserApi",
                                "loading"
                              ])}
                              onSuccess={generateStateOnChangeProp($state, [
                                "activeUserApi",
                                "data"
                              ])}
                              url={(() => {
                                try {
                                  return (() => {
                                    if ($state.menu === -1) {
                                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/analytics/?days_ago=30&active_user=true`;
                                    }
                                    return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/${$state.menu}/analytics/?days_ago=30&active_user=true`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m4Sx
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6S7HZ
                                  )}
                                >
                                  {
                                    "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0641\u0639\u0627\u0644"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rBk
                                  )}
                                >
                                  {
                                    "\u062a\u0639\u062f\u0627\u062f \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u06cc\u06a9\u062a\u0627 \u062f\u0631 \u06f3\u06f0 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647"
                                  }
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fO60
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__peQHt
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.pageViewApi.data
                                            .filter(
                                              (item, index, self) =>
                                                self.findIndex(
                                                  t =>
                                                    t.user_id === item.user_id
                                                ) === index
                                            )
                                            .length.toLocaleString("fa");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u06f0";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wkzuM
                                    )}
                                  >
                                    {"\u06a9\u0627\u0631\u0628\u0631"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </ApiRequest>
                          </div>
                          {(() => {
                            try {
                              return $state.menu == -1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jDagA
                              )}
                            >
                              <ApiRequest
                                data-plasmic-name={"fragmentApiRequest2"}
                                data-plasmic-override={
                                  overrides.fragmentApiRequest2
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.fragmentApiRequest2
                                )}
                                errorDisplay={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__msCuv
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__enJuP
                                      )}
                                    >
                                      {"\u062f\u0631\u0622\u0645\u062f"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gYxqP
                                      )}
                                    >
                                      {
                                        "\u062f\u0631\u0622\u0645\u062f \u06a9\u0633\u0628 \u0634\u062f\u0647 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631\u06a9"
                                      }
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__l5H0H
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jNZz
                                        )}
                                      >
                                        {"\u06f0"}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zVn2F
                                        )}
                                      >
                                        {"\u062a\u0648\u0645\u0627\u0646"}
                                      </div>
                                    </Stack__>
                                  </div>
                                }
                                loadingDisplay={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__msCga
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hw3Ls
                                      )}
                                    >
                                      {"\u062f\u0631\u0622\u0645\u062f"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___5Ymdr
                                      )}
                                    >
                                      {
                                        "\u062f\u0631\u0622\u0645\u062f \u06a9\u0633\u0628 \u0634\u062f\u0647 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631\u06a9"
                                      }
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__sIMoH
                                      )}
                                    >
                                      <Icon15Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__eEwS
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </div>
                                }
                                method={"GET"}
                                onError={generateStateOnChangeProp($state, [
                                  "fragmentApiRequest2",
                                  "error"
                                ])}
                                onLoading={generateStateOnChangeProp($state, [
                                  "fragmentApiRequest2",
                                  "loading"
                                ])}
                                onSuccess={generateStateOnChangeProp($state, [
                                  "fragmentApiRequest2",
                                  "data"
                                ])}
                                url={(() => {
                                  try {
                                    return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/incomes`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__d9Vx
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cu8Iw
                                    )}
                                  >
                                    {"\u062f\u0631\u0622\u0645\u062f"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bbZd5
                                    )}
                                  >
                                    {
                                      "\u062f\u0631\u0622\u0645\u062f \u06a9\u0633\u0628 \u0634\u062f\u0647 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631\u06a9"
                                    }
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hxBE
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__glozv
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Intl.NumberFormat(
                                              "fa-IR"
                                            ).format(
                                              (
                                                $state.fragmentApiRequest2.data
                                                  ?.amount ?? 0
                                              )
                                                .toString()
                                                .slice(0, -1)
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u06f0";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dpUyq
                                      )}
                                    >
                                      {"\u062a\u0648\u0645\u0627\u0646"}
                                    </div>
                                  </Stack__>
                                </div>
                              </ApiRequest>
                            </div>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__reWz8
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nDmB
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return [
                                    {
                                      text: "امروز/دیروز",
                                      value: 1
                                    },
                                    {
                                      text: "۳ روز اخیر",
                                      value: 3
                                    },
                                    {
                                      text: "۷ روز اخیر",
                                      value: 7
                                    },
                                    {
                                      text: "۳۰ روز اخیر",
                                      value: 30
                                    }
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Filter
                                  data-plasmic-name={"filter"}
                                  data-plasmic-override={overrides.filter}
                                  active={(() => {
                                    try {
                                      return currentItem.value === $state.day;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.filter
                                  )}
                                  key={currentIndex}
                                  onClick={async () => {
                                    const $steps = {};

                                    $steps["updateDay"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["day"]
                                            },
                                            operation: 0,
                                            value: currentItem.value
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDay"] != null &&
                                      typeof $steps["updateDay"] === "object" &&
                                      typeof $steps["updateDay"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDay"] = await $steps[
                                        "updateDay"
                                      ];
                                    }
                                  }}
                                  text={(() => {
                                    try {
                                      return currentItem.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                          </Stack__>
                        </div>
                        <FetchData
                          data-plasmic-name={"fetchData2"}
                          data-plasmic-override={overrides.fetchData2}
                          className={classNames(
                            "__wab_instance",
                            sty.fetchData2
                          )}
                          loadingStatus={
                            <Icon15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3T8ZG
                              )}
                              role={"img"}
                            />
                          }
                          onDataChange={generateStateOnChangeProp($state, [
                            "fetchData2",
                            "data"
                          ])}
                          onLoadingChange={generateStateOnChangeProp($state, [
                            "fetchData2",
                            "loading"
                          ])}
                          url={(() => {
                            try {
                              return (() => {
                                if ($state.menu === -1) {
                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/analytics/?days_ago=${$state.day}`;
                                }
                                return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/${$state.menu}/analytics/?days_ago=${$state.day}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          {(() => {
                            try {
                              return $state.fetchData2.data?.length == 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__t4Zgx
                              )}
                            >
                              <Icon18Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hCh1A
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__poXpJ
                                )}
                              >
                                {
                                  "\u0622\u0645\u0627\u0631\u06cc \u062f\u0631 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                                }
                              </div>
                            </Stack__>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8Yie6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sE5LK
                              )}
                            >
                              <Chart
                                cartesianGrid={["horizontal"]}
                                chartConfig={(() => {
                                  const __composite = [
                                    {
                                      color: null,
                                      type: null,
                                      dot: null,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    }
                                  ];
                                  __composite["0"]["color"] = "#000000";
                                  __composite["0"]["type"] = "natural";
                                  __composite["0"]["dot"] = true;
                                  __composite["0"]["key"] = "visitors";
                                  __composite["0"]["label"] =
                                    "\u0628\u0627\u0632\u062f\u06cc\u062f";
                                  __composite["1"]["color"] = "#5E5E5E";
                                  __composite["1"]["key"] = "active_users";
                                  __composite["1"]["label"] =
                                    "\u06a9\u0627\u0631\u0628\u0631";
                                  return __composite;
                                })()}
                                className={classNames(
                                  "__wab_instance",
                                  sty.fragmentChart___5PUtz
                                )}
                                data={(() => {
                                  try {
                                    return (() => {
                                      const groupByDateAndCountVisitors =
                                        data => {
                                          const groupedData = data.reduce(
                                            (acc, entry) => {
                                              const date = new Date(
                                                entry.p_timestamp
                                              ).toLocaleDateString("fa-IR", {
                                                day: "2-digit",
                                                month: "short"
                                              });
                                              if (!acc[date]) {
                                                acc[date] = {
                                                  visitors: 0,
                                                  userIds: new Set()
                                                };
                                              }
                                              acc[date].visitors++;
                                              acc[date].userIds.add(
                                                entry.user_id
                                              );
                                              return acc;
                                            },
                                            {}
                                          );

                                          const result = Object.keys(
                                            groupedData
                                          ).map(date => ({
                                            visitors:
                                              groupedData[date].visitors,
                                            active_users:
                                              groupedData[date].userIds.size,
                                            date: date
                                          }));

                                          return result;
                                        };
                                      return groupByDateAndCountVisitors(
                                        $state.fetchData2?.data ?? []
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                label={false}
                                layout={"horizontal"}
                                legend={true}
                                tooltip={(() => {
                                  const __composite = {
                                    enabled: null,
                                    indicator: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["indicator"] = "dot";
                                  return __composite;
                                })()}
                                type={"bar"}
                                xAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null,
                                    tickLine: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "date";
                                  __composite["type"] = "category";
                                  __composite["tickLine"] = false;
                                  return __composite;
                                })()}
                                yAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "visitors";
                                  __composite["type"] = "number";
                                  return __composite;
                                })()}
                              />

                              {(() => {
                                try {
                                  return $state.menu == -1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Chart
                                  cartesianGrid={["horizontal"]}
                                  chartConfig={(() => {
                                    const __composite = [
                                      {
                                        color: null,
                                        type: "natural",
                                        dot: null,
                                        key: null,
                                        label: null
                                      },
                                      {
                                        color: null,
                                        type: "natural",
                                        dot: false,
                                        key: null,
                                        label: null
                                      }
                                    ];
                                    __composite["0"]["color"] = "#000000";
                                    __composite["0"]["dot"] = true;
                                    __composite["0"]["key"] = "visitors";
                                    __composite["0"]["label"] =
                                      "\u0628\u0627\u0632\u062f\u06cc\u062f \u06a9\u0646\u0646\u062f\u0647";
                                    __composite["1"]["color"] = "#5E5E5E";
                                    __composite["1"]["key"] = "users";
                                    __composite["1"]["label"] =
                                      "\u06a9\u0627\u0631\u0628\u0631";
                                    return __composite;
                                  })()}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.fragmentChart__l2El
                                  )}
                                  data={(() => {
                                    try {
                                      return (() => {
                                        function countVisitorsAndUsersByMenu(
                                          data
                                        ) {
                                          const menuCount = {};

                                          data.forEach(entry => {
                                            const menu =
                                              entry.menu.toLowerCase();
                                            if (!menuCount[menu]) {
                                              menuCount[menu] = {
                                                visitors: 0,
                                                users: new Set()
                                              };
                                            }
                                            menuCount[menu].visitors++;
                                            menuCount[menu].users.add(
                                              entry.user_id
                                            );
                                          });

                                          return Object.keys(menuCount).map(
                                            menu => {
                                              return {
                                                menu: $state.fetchData.data.find(
                                                  item => item.id === menu
                                                ).name_fa,
                                                visitors:
                                                  menuCount[menu].visitors,
                                                users:
                                                  menuCount[menu].users.size
                                              };
                                            }
                                          );
                                        }
                                        return countVisitorsAndUsersByMenu(
                                          $state.fetchData2?.data ?? []
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  label={false}
                                  layout={"horizontal"}
                                  legend={true}
                                  stack={false}
                                  tooltip={(() => {
                                    const __composite = {
                                      enabled: null,
                                      indicator: null
                                    };
                                    __composite["enabled"] = true;
                                    __composite["indicator"] = "dot";
                                    return __composite;
                                  })()}
                                  type={"bar"}
                                  xAxis={(() => {
                                    const __composite = {
                                      enabled: null,
                                      key: null,
                                      type: null,
                                      tickLine: null
                                    };
                                    __composite["enabled"] = true;
                                    __composite["key"] = "menu";
                                    __composite["type"] = "category";
                                    __composite["tickLine"] = false;
                                    return __composite;
                                  })()}
                                  yAxis={(() => {
                                    const __composite = {
                                      enabled: null,
                                      key: null,
                                      type: null
                                    };
                                    __composite["enabled"] = true;
                                    __composite["key"] = "visitors";
                                    __composite["type"] = "number";
                                    return __composite;
                                  })()}
                                />
                              ) : null}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8A8L
                              )}
                            >
                              <Chart
                                cartesianGrid={["horizontal"]}
                                chartConfig={(() => {
                                  const __composite = [
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: null,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: "#000000",
                                      type: "natural",
                                      dot: false
                                    }
                                  ];
                                  __composite["0"]["color"] =
                                    "var(--token-EueuB3d74YKA)";
                                  __composite["0"]["dot"] = true;
                                  __composite["0"]["key"] = "doctor";
                                  __composite["0"]["label"] =
                                    "\u067e\u0632\u0634\u06a9";
                                  return __composite;
                                })()}
                                className={classNames(
                                  "__wab_instance",
                                  sty.fragmentChart___68V5T
                                )}
                                data={(() => {
                                  try {
                                    return (() => {
                                      function countVisitorsByBrowser(data) {
                                        const browserCount = {};
                                        data.forEach(entry => {
                                          const browser =
                                            entry.job_title.toLowerCase();
                                          if (browserCount[browser]) {
                                            browserCount[browser]++;
                                          } else {
                                            browserCount[browser] = 1;
                                          }
                                        });
                                        return Object.keys(browserCount).map(
                                          browser => {
                                            return {
                                              browser: browser,
                                              visitor: browserCount[browser]
                                            };
                                          }
                                        );
                                      }
                                      return countVisitorsByBrowser(
                                        $state.fetchData2?.data ?? []
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                dataKey={(() => {
                                  const __composite = {
                                    key: null,
                                    label: null
                                  };
                                  __composite["key"] = "visitor";
                                  __composite["label"] =
                                    "\u0646\u0648\u0639 \u06a9\u0627\u0631\u0628\u0631";
                                  return __composite;
                                })()}
                                label={false}
                                layout={"horizontal"}
                                legend={true}
                                nameKey={(() => {
                                  const __composite = { key: null };
                                  __composite["key"] = "browser";
                                  return __composite;
                                })()}
                                tooltip={(() => {
                                  const __composite = {
                                    enabled: null,
                                    indicator: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["indicator"] = "line";
                                  return __composite;
                                })()}
                                type={"pie"}
                                xAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null,
                                    tickLine: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "date";
                                  __composite["type"] = "category";
                                  __composite["tickLine"] = false;
                                  return __composite;
                                })()}
                                yAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "visitors";
                                  __composite["type"] = "number";
                                  return __composite;
                                })()}
                              />

                              <Chart
                                cartesianGrid={["horizontal"]}
                                chartConfig={(() => {
                                  const __composite = [
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    }
                                  ];
                                  __composite["0"]["color"] =
                                    "var(--token-u21Gzl9DygXI)";
                                  __composite["0"]["key"] = "mobile";
                                  __composite["0"]["label"] =
                                    "\u0645\u0648\u0628\u0627\u06cc\u0644";
                                  __composite["1"]["color"] =
                                    "var(--token-EueuB3d74YKA)";
                                  __composite["1"]["key"] = "desktop";
                                  __composite["1"]["label"] =
                                    "\u062f\u0633\u06a9\u062a\u0627\u067e";
                                  return __composite;
                                })()}
                                className={classNames(
                                  "__wab_instance",
                                  sty.fragmentChart__oHdoe
                                )}
                                data={(() => {
                                  try {
                                    return (() => {
                                      function countVisitorsByBrowser(data) {
                                        const browserCount = {};
                                        data.forEach(entry => {
                                          const browser =
                                            entry.device.toLowerCase();
                                          if (browserCount[browser]) {
                                            browserCount[browser]++;
                                          } else {
                                            browserCount[browser] = 1;
                                          }
                                        });
                                        return Object.keys(browserCount).map(
                                          browser => {
                                            return {
                                              browser: browser,
                                              visitor: browserCount[browser]
                                            };
                                          }
                                        );
                                      }
                                      return countVisitorsByBrowser(
                                        $state.fetchData2?.data ?? []
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                dataKey={(() => {
                                  const __composite = {
                                    key: null,
                                    label: null
                                  };
                                  __composite["key"] = "visitor";
                                  __composite["label"] =
                                    "\u062f\u0633\u062a\u06af\u0627\u0647";
                                  return __composite;
                                })()}
                                label={false}
                                layout={"horizontal"}
                                legend={true}
                                nameKey={(() => {
                                  const __composite = { key: null };
                                  __composite["key"] = "browser";
                                  return __composite;
                                })()}
                                tooltip={(() => {
                                  const __composite = {
                                    enabled: null,
                                    indicator: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["indicator"] = "line";
                                  return __composite;
                                })()}
                                type={"pie"}
                                xAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null,
                                    tickLine: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "date";
                                  __composite["type"] = "category";
                                  __composite["tickLine"] = false;
                                  return __composite;
                                })()}
                                yAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "visitors";
                                  __composite["type"] = "number";
                                  return __composite;
                                })()}
                              />

                              <Chart
                                cartesianGrid={["horizontal"]}
                                chartConfig={(() => {
                                  const __composite = [
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: null,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    },
                                    {
                                      color: null,
                                      type: "natural",
                                      dot: false,
                                      key: null,
                                      label: null
                                    }
                                  ];
                                  __composite["0"]["color"] = "#2A9D90";
                                  __composite["0"]["dot"] = true;
                                  __composite["0"]["key"] = "chrome";
                                  __composite["0"]["label"] =
                                    "\u06a9\u0631\u0648\u0645";
                                  __composite["1"]["color"] = "#E76E50";
                                  __composite["1"]["key"] = "safari";
                                  __composite["1"]["label"] =
                                    "\u0633\u0627\u0641\u0627\u0631\u06cc";
                                  __composite["2"]["color"] = "#1B3E4C";
                                  __composite["2"]["key"] = "firefox";
                                  __composite["2"]["label"] =
                                    "\u0641\u0627\u06cc\u0631\u0641\u0627\u06a9\u0633";
                                  __composite["3"]["color"] = "#E8C468";
                                  __composite["3"]["key"] = "microsoft edge";
                                  __composite["3"]["label"] = "\u0627\u062c";
                                  return __composite;
                                })()}
                                className={classNames(
                                  "__wab_instance",
                                  sty.fragmentChart__op3Vz
                                )}
                                data={(() => {
                                  try {
                                    return (() => {
                                      function countVisitorsByBrowser(data) {
                                        const browserCount = {};
                                        data.forEach(entry => {
                                          const browser =
                                            entry.browser.toLowerCase();
                                          if (browserCount[browser]) {
                                            browserCount[browser]++;
                                          } else {
                                            browserCount[browser] = 1;
                                          }
                                        });
                                        return Object.keys(browserCount).map(
                                          browser => {
                                            return {
                                              browser: browser,
                                              visitor: browserCount[browser]
                                            };
                                          }
                                        );
                                      }
                                      return countVisitorsByBrowser(
                                        $state.fetchData2?.data ?? []
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                dataKey={(() => {
                                  const __composite = {
                                    key: null,
                                    label: null
                                  };
                                  __composite["key"] = "visitor";
                                  __composite["label"] =
                                    "\u0645\u0631\u0648\u0631\u06af\u0631";
                                  return __composite;
                                })()}
                                label={false}
                                layout={"horizontal"}
                                legend={true}
                                nameKey={(() => {
                                  const __composite = { key: null };
                                  __composite["key"] = "browser";
                                  return __composite;
                                })()}
                                tooltip={(() => {
                                  const __composite = {
                                    enabled: null,
                                    indicator: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["indicator"] = "line";
                                  return __composite;
                                })()}
                                type={"pie"}
                                xAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null,
                                    tickLine: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "date";
                                  __composite["type"] = "category";
                                  __composite["tickLine"] = false;
                                  return __composite;
                                })()}
                                yAxis={(() => {
                                  const __composite = {
                                    enabled: null,
                                    key: null,
                                    type: null
                                  };
                                  __composite["enabled"] = true;
                                  __composite["key"] = "visitors";
                                  __composite["type"] = "number";
                                  return __composite;
                                })()}
                              />
                            </div>
                          </div>
                        </FetchData>
                      </div>
                    ) : null}
                  </Stack__>
                </div>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "fetchData",
    "pageViewApi",
    "activeUserApi",
    "fragmentApiRequest2",
    "filter",
    "fetchData2"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "fetchData",
    "pageViewApi",
    "activeUserApi",
    "fragmentApiRequest2",
    "filter",
    "fetchData2"
  ],
  layout: [
    "layout",
    "fetchData",
    "pageViewApi",
    "activeUserApi",
    "fragmentApiRequest2",
    "filter",
    "fetchData2"
  ],
  fetchData: ["fetchData"],
  pageViewApi: ["pageViewApi"],
  activeUserApi: ["activeUserApi"],
  fragmentApiRequest2: ["fragmentApiRequest2"],
  filter: ["filter"],
  fetchData2: ["fetchData2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  fetchData: typeof FetchData;
  pageViewApi: typeof ApiRequest;
  activeUserApi: typeof ApiRequest;
  fragmentApiRequest2: typeof ApiRequest;
  filter: typeof Filter;
  fetchData2: typeof FetchData;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatistics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatistics__VariantsArgs;
    args?: PlasmicStatistics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatistics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStatistics__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatistics__ArgProps,
          internalVariantPropNames: PlasmicStatistics__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatistics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStatistics";
  } else {
    func.displayName = `PlasmicStatistics.${nodeName}`;
  }
  return func;
}

export const PlasmicStatistics = Object.assign(
  // Top-level PlasmicStatistics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    fetchData: makeNodeComponent("fetchData"),
    pageViewApi: makeNodeComponent("pageViewApi"),
    activeUserApi: makeNodeComponent("activeUserApi"),
    fragmentApiRequest2: makeNodeComponent("fragmentApiRequest2"),
    filter: makeNodeComponent("filter"),
    fetchData2: makeNodeComponent("fetchData2"),

    // Metadata about props expected for PlasmicStatistics
    internalVariantProps: PlasmicStatistics__VariantProps,
    internalArgProps: PlasmicStatistics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "رفتار کاربران",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStatistics;
/* prettier-ignore-end */
