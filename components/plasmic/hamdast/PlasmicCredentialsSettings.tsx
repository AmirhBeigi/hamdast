/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: RAtxP5ozw8mB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: FXUsKM4SitKY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicCredentialsSettings.module.css"; // plasmic-import: RAtxP5ozw8mB/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: UuDHOUXMn1lI/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon

createPlasmicElementProxy;

export type PlasmicCredentialsSettings__VariantMembers = {};
export type PlasmicCredentialsSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicCredentialsSettings__VariantsArgs;
export const PlasmicCredentialsSettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCredentialsSettings__ArgsType = {};
type ArgPropType = keyof PlasmicCredentialsSettings__ArgsType;
export const PlasmicCredentialsSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicCredentialsSettings__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  newApiKeyDialog?: Flex__<typeof Paziresh24Dialog>;
  apiKeyNameField?: Flex__<typeof Input>;
  apiRequest?: Flex__<typeof ApiRequest>;
  productCard?: Flex__<typeof ProductCard>;
};

export interface DefaultCredentialsSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCredentialsSettings__RenderFunc(props: {
  variants: PlasmicCredentialsSettings__VariantsArgs;
  args: PlasmicCredentialsSettings__ArgsType;
  overrides: PlasmicCredentialsSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "newApiKeyDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiKeyNameField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "oauthCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newApikeyButtonLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicCredentialsSettings.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicCredentialsSettings.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicCredentialsSettings.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_ravi_design_system_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              hideAppsSidebar={true}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1][0].toUpperCase() +
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___8NQy,
                  "no-scroll"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cq8K8
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#0000003D" }}
                    >
                      {
                        "\u0648\u0628 \u0633\u0631\u0648\u06cc\u0633\u200c\u0647\u0627 / "
                      }
                    </span>
                    <React.Fragment>
                      {"\u06a9\u0644\u06cc\u062f API"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kWxwe)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ouCv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wrYWg
                      )}
                    >
                      {"\u0646\u0627\u0645"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bBeS6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m85Jc
                      )}
                    >
                      {"\u06a9\u0644\u06cc\u062f API"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2Sx7W)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gbsv0
                      )}
                    >
                      {""}
                    </div>
                    <Paziresh24Button
                      children2={
                        "\u0627\u06cc\u062c\u0627\u062f \u06a9\u0644\u06cc\u062f API"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__iiieG
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return function openOAuthPopup() {
                                    const width = 500;
                                    const height = 600;
                                    const left = (screen.width - width) / 2;
                                    const top = (screen.height - height) / 2;

                                    const popup = window.open(
                                      `https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth?client_id=hamdast&redirect_uri=https://hamdast.paziresh24.com/credentials/oauth/${$state.authProvider.user.id}/&response_type=code&kc_idp_hint=gozar`,
                                      "OAuthPopup",
                                      `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=yes`
                                    );

                                    if (popup) {
                                      // Optional: monitor the popup for closure or message
                                      const timer = setInterval(() => {
                                        const popupUrl = popup.location.href;

                                        // Check if we're on the redirect URL and it has a code
                                        if (popupUrl.includes("code=")) {
                                          const url = new URL(popupUrl);
                                          const code =
                                            url.searchParams.get("code");
                                          console.log("OAuth code:", code);
                                          $state.oauthCode = code;
                                          $state.newApiKeyDialog.open = true;

                                          clearInterval(interval);
                                          popup.close();
                                        }
                                      }, 500);
                                    } else {
                                      alert(
                                        "Popup blocked. Please allow popups for this site."
                                      );
                                    }
                                  };
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      showStartIcon={true}
                      size={"compact"}
                      startIcon={
                        <Icon21Icon
                          className={classNames(projectcss.all, sty.svg__cZoa7)}
                          role={"img"}
                        />
                      }
                    />

                    <Paziresh24Dialog
                      data-plasmic-name={"newApiKeyDialog"}
                      data-plasmic-override={overrides.newApiKeyDialog}
                      body={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xCrK9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rgu9E
                            )}
                          >
                            {"\u0646\u0627\u0645"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cA5Ok
                            )}
                          >
                            {
                              "\u06cc\u06a9 \u0627\u0633\u0645 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 API Key \u0628\u06af\u0630\u0627\u0631."
                            }
                          </div>
                          <Input
                            data-plasmic-name={"apiKeyNameField"}
                            data-plasmic-override={overrides.apiKeyNameField}
                            className={classNames(
                              "__wab_instance",
                              sty.apiKeyNameField
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "apiKeyNameField",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "apiKeyNameField",
                              "value"
                            ])}
                          />

                          <Paziresh24Button
                            children2={"\u0627\u06cc\u062c\u0627\u062f API Key"}
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__ddEjf
                            )}
                            loading={(() => {
                              try {
                                return $state.newApikeyButtonLoading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading"] != null &&
                                typeof $steps["updateLoading"] === "object" &&
                                typeof $steps["updateLoading"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading"] = await $steps[
                                  "updateLoading"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://hamdast.paziresh24.com/api/v1/credentials",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              code: $state.oauthCode,
                                              name: $state.apiKeyNameField.value
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["updateLoading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["newApikeyButtonLoading"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading2"] != null &&
                                typeof $steps["updateLoading2"] === "object" &&
                                typeof $steps["updateLoading2"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading2"] = await $steps[
                                  "updateLoading2"
                                ];
                              }

                              $steps["updateLoading3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "newApiKeyDialog",
                                          "open"
                                        ]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading3"] != null &&
                                typeof $steps["updateLoading3"] === "object" &&
                                typeof $steps["updateLoading3"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading3"] = await $steps[
                                  "updateLoading3"
                                ];
                              }

                              $steps["updateLoading4"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "apiRequest",
                                      action: "refresh"
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading4"] != null &&
                                typeof $steps["updateLoading4"] === "object" &&
                                typeof $steps["updateLoading4"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading4"] = await $steps[
                                  "updateLoading4"
                                ];
                              }
                            }}
                          />
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.newApiKeyDialog
                      )}
                      noTrigger={true}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "newApiKeyDialog",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, [
                        "newApiKeyDialog",
                        "open"
                      ])}
                      title={"\u0627\u06cc\u062c\u0627\u062f API Key"}
                      trigger={null}
                    />
                  </Stack__>
                </Stack__>
                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={null}
                  loadingDisplay={
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg__runKy)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/credentials/`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {(() => {
                    try {
                      return $state.apiRequest.data.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6ObQ
                      )}
                    >
                      {
                        "\u0647\u0646\u0648\u0632 \u0686\u06cc\u0632\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                      }
                    </div>
                  ) : null}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <ProductCard
                        data-plasmic-name={"productCard"}
                        data-plasmic-override={overrides.productCard}
                        className={classNames(
                          "__wab_instance",
                          sty.productCard
                        )}
                        currentItem={currentItem}
                        key={currentIndex}
                        refresh={async () => {
                          const $steps = {};

                          $steps["runActionOnApiRequest"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "apiRequest",
                                  action: "refresh"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnApiRequest"] != null &&
                            typeof $steps["runActionOnApiRequest"] ===
                              "object" &&
                            typeof $steps["runActionOnApiRequest"].then ===
                              "function"
                          ) {
                            $steps["runActionOnApiRequest"] = await $steps[
                              "runActionOnApiRequest"
                            ];
                          }
                        }}
                      />
                    );
                  })}
                </ApiRequest>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "newApiKeyDialog",
    "apiKeyNameField",
    "apiRequest",
    "productCard"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "newApiKeyDialog",
    "apiKeyNameField",
    "apiRequest",
    "productCard"
  ],
  layout: [
    "layout",
    "newApiKeyDialog",
    "apiKeyNameField",
    "apiRequest",
    "productCard"
  ],
  newApiKeyDialog: ["newApiKeyDialog", "apiKeyNameField"],
  apiKeyNameField: ["apiKeyNameField"],
  apiRequest: ["apiRequest", "productCard"],
  productCard: ["productCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  newApiKeyDialog: typeof Paziresh24Dialog;
  apiKeyNameField: typeof Input;
  apiRequest: typeof ApiRequest;
  productCard: typeof ProductCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCredentialsSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCredentialsSettings__VariantsArgs;
    args?: PlasmicCredentialsSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCredentialsSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCredentialsSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCredentialsSettings__ArgProps,
          internalVariantPropNames: PlasmicCredentialsSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCredentialsSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCredentialsSettings";
  } else {
    func.displayName = `PlasmicCredentialsSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicCredentialsSettings = Object.assign(
  // Top-level PlasmicCredentialsSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    newApiKeyDialog: makeNodeComponent("newApiKeyDialog"),
    apiKeyNameField: makeNodeComponent("apiKeyNameField"),
    apiRequest: makeNodeComponent("apiRequest"),
    productCard: makeNodeComponent("productCard"),

    // Metadata about props expected for PlasmicCredentialsSettings
    internalVariantProps: PlasmicCredentialsSettings__VariantProps,
    internalArgProps: PlasmicCredentialsSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "کلید api",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCredentialsSettings;
/* prettier-ignore-end */
