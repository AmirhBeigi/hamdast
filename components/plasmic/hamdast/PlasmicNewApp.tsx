// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: IdTcu_EF7CVl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import AppType from "../../AppType"; // plasmic-import: N2XFsVyv799E/component
import Button from "../../Button"; // plasmic-import: _T6T2fNvkUfo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicNewApp.module.css"; // plasmic-import: IdTcu_EF7CVl/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: uNpsRe8HBlEO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: VepSFu0Y3Pyk/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: CmW94FEF71d7/icon

createPlasmicElementProxy;

export type PlasmicNewApp__VariantMembers = {};
export type PlasmicNewApp__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewApp__VariantsArgs;
export const PlasmicNewApp__VariantProps = new Array<VariantPropType>();

export type PlasmicNewApp__ArgsType = {};
type ArgPropType = keyof PlasmicNewApp__ArgsType;
export const PlasmicNewApp__ArgProps = new Array<ArgPropType>();

export type PlasmicNewApp__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  nameInput?: Flex__<typeof Input>;
  keyInput?: Flex__<typeof Input>;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
};

export interface DefaultNewAppProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewApp__RenderFunc(props: {
  variants: PlasmicNewApp__VariantsArgs;
  args: PlasmicNewApp__ArgsType;
  overrides: PlasmicNewApp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "type",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "keyInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicNewApp.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicNewApp.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicNewApp.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/style.css"\r\n/>\r\n<script src="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={generateStateOnChangeProp($state, [
              "authProvider",
              "apps"
            ])}
            onUserChange={generateStateOnChangeProp($state, [
              "authProvider",
              "user"
            ])}
            withOutUser={false}
          >
            <div className={classNames(projectcss.all, sty.freeBox__myAsb)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__qqQri)}
                direction={"down"}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tp9)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vu16Q)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Vyei
                      )}
                    >
                      {"\u0647\u0645\u200c\u062f\u0633\u062a"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Whux
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___95Me
                      )}
                    >
                      {
                        "\u062a\u0648\u0633\u0639\u0647 \u062f\u0647\u0646\u062f\u0647"
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hthxa)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zS7UP)}
                    >
                      <Icon12Icon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pi2RT
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (!$state.authProvider.user?.id) {
                                  return `کاربر بی نام`;
                                }
                                return `${$state.authProvider.user.name} ${$state.authProvider.user.family}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0622\u06cc\u062f\u0627 \u0627\u0631\u062f\u0627\u0646\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
              </Reveal>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__lSx74)}
                delay={1000}
                effect={"fade"}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__feser)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bpoUp)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rypiP)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vwS2
                        )}
                      >
                        {(() => {
                          try {
                            return !!$state.authProvider.user.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dMZzz
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${$state.authProvider.user.name}،`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062e\u0648\u0634 \u0622\u0645\u062f\u06cc\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xaG0K
                          )}
                        >
                          {"\u062e\u0648\u0634 \u0622\u0645\u062f\u06cc"}
                        </div>
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"24px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"24px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/hamdast/images/partypng.png",
                            fullWidth: 160,
                            fullHeight: 160,
                            aspectRatio: undefined
                          }}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yia9K
                        )}
                      >
                        {
                          "\u062b\u0628\u062a \u0646\u0627\u0645 \u0634\u0645\u0627 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u062a\u0648\u0633\u0639\u0647 \u062f\u0647\u0646\u062f\u0647 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u061b \u0628\u0627 \u067e\u0631 \u06a9\u0631\u062f\u0646 \u0641\u0631\u0645 \u0631\u0648\u0628\u0647 \u0631\u0648 \u0627\u0648\u0644\u06cc\u0646 \u0627\u064e\u0628\u0632\u0627\u0631\u06a9 \u062e\u0648\u062f\u062a\u0648 \u0628\u0633\u0627\u0632."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7LqB
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0647\u0631 \u06a9\u062c\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0634\u062a\u06cc \u0628\u0647 "
                            }
                          </React.Fragment>
                          {
                            <PlasmicLink__
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link
                              )}
                              component={Link}
                              href={"https://t.me/AmirhBeigi"}
                              platform={"nextjs"}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{
                                    color: "#1479C2",
                                    fontWeight: 700,
                                    textDecorationLine: "underline"
                                  }}
                                >
                                  {
                                    "\u062a\u0644\u06af\u0631\u0627\u0645 \u0645\u0646"
                                  }
                                </span>
                              </React.Fragment>
                            </PlasmicLink__>
                          }
                          <React.Fragment>
                            {" \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647."}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rXWpE)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hEfgr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lokS
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u0627\u0628\u0632\u0627\u0631\u06a9"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5Wrxb
                          )}
                        >
                          {
                            "\u06cc\u06a9 \u0646\u0627\u0645 \u0628\u0647 \u0641\u0627\u0631\u0633\u06cc \u0628\u0631\u0627\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0646\u0627\u0645 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zZr7Y
                          )}
                        >
                          {
                            "\u0627\u06cc\u0646 \u0646\u0627\u0645 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0634\u0645\u0627\u0633\u062a\u060c \u0644\u0637\u0641\u0627 \u0646\u0627\u0645 \u0635\u0641\u062d\u0647 \u0647\u0627 \u06cc\u0627 \u0645\u0646\u0648\u0647\u0627\u06cc \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                        <Input
                          data-plasmic-name={"nameInput"}
                          data-plasmic-override={overrides.nameInput}
                          className={classNames(
                            "__wab_instance",
                            sty.nameInput
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "nameInput",
                            "value"
                          ])}
                          placeholder={
                            "\u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc"
                          }
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "nameInput",
                            "value"
                          ])}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y28Qv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cx5Lf
                          )}
                        >
                          {"\u0634\u0646\u0627\u0633\u0647"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dxc7W
                          )}
                        >
                          {
                            "\u06cc\u06a9 \u0634\u0646\u0627\u0633\u0647 \u0645\u0646\u062d\u0635\u0631 \u0628\u0647 \u0641\u0631\u062f \u0628\u0631\u0627\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                          }
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kKwDc
                          )}
                        >
                          <Input
                            data-plasmic-name={"keyInput"}
                            data-plasmic-override={overrides.keyInput}
                            attributes={{ dir: "ltr" }}
                            className={classNames(
                              "__wab_instance",
                              sty.keyInput
                            )}
                            onChange={generateStateOnChangeProp($state, [
                              "keyInput",
                              "value"
                            ])}
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "keyInput",
                              "value"
                            ])}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__blxR1
                            )}
                            dir={"ltr"}
                          >
                            {"https://www.paziresh24.com/_/"}
                          </div>
                        </Stack__>
                        {(() => {
                          try {
                            return (
                              !!$state.keyInput.value &&
                              !$state.keyInput.value.match(/[\u0600-\u06FF]/) &&
                              $state.keyInput.value.length >= 4
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lmjdq
                            )}
                          >
                            <ApiRequest
                              data-plasmic-name={"fragmentApiRequest"}
                              data-plasmic-override={
                                overrides.fragmentApiRequest
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.fragmentApiRequest
                              )}
                              errorDisplay={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__i8Lb4
                                  )}
                                >
                                  {
                                    "\u0642\u0628\u0644\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u062f\u0647 \u0627\u0633\u062a."
                                  }
                                </div>
                              }
                              loadingDisplay={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rtsds
                                  )}
                                >
                                  {
                                    "\u062f\u0631\u062d\u0627\u0644 \u0628\u0631\u0631\u0633\u06cc ..."
                                  }
                                </div>
                              }
                              method={"GET"}
                              onError={generateStateOnChangeProp($state, [
                                "fragmentApiRequest",
                                "error"
                              ])}
                              onLoading={generateStateOnChangeProp($state, [
                                "fragmentApiRequest",
                                "loading"
                              ])}
                              onSuccess={generateStateOnChangeProp($state, [
                                "fragmentApiRequest",
                                "data"
                              ])}
                              params={(() => {
                                try {
                                  return {
                                    key: $state.keyInput.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              url={
                                "https://hamdast.paziresh24.com/api/v1/apps/key"
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bugyn
                                )}
                              >
                                {
                                  "\u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0633\u062a."
                                }
                              </div>
                            </ApiRequest>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              !!$state.keyInput.value &&
                              (!!$state.keyInput.value.match(
                                /[\u0600-\u06FF]/
                              ) ||
                                $state.keyInput.value.length < 4)
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mjWcn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__enj3L
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const keyInputValue =
                                        $state.keyInput.value;
                                      const hasPersianCharacters =
                                        keyInputValue.match(/[\u0600-\u06FF]/);
                                      const isShort = keyInputValue.length < 4;

                                      if (hasPersianCharacters) {
                                        return "شناسه باید با حروف انگلیسی باشد.";
                                      } else if (isShort) {
                                        return "شناسه باید حداقل ۴ کاراکتر باشد.";
                                      } else {
                                        return "";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0633\u062a.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sd9Q7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oDOh
                          )}
                        >
                          {
                            "\u0646\u0648\u0639 \u0627\u0628\u0632\u0627\u0631\u06a9"
                          }
                        </div>
                        <AppType
                          caption={
                            "\u0627\u0632 \u0627\u06cc\u0646 \u0627\u064e\u0628\u0632\u0627\u0631\u06a9 \u0647\u0645\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u0646\u062f."
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.appType___4EuR
                          )}
                          name={
                            "\u0647\u0645\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                          }
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["type"]
                                    },
                                    operation: 0,
                                    value: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateType"] != null &&
                              typeof $steps["updateType"] === "object" &&
                              typeof $steps["updateType"].then === "function"
                            ) {
                              $steps["updateType"] = await $steps["updateType"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.type == 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "selected";
                              }
                              throw e;
                            }
                          })()}
                        />

                        <AppType
                          caption={
                            "\u0627\u0632 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0627\u06cc\u0646 \u0627\u064e\u0628\u0632\u0627\u0631\u06a9 \u0641\u0642\u0637 \u067e\u0632\u0634\u06a9\u0627\u0646 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u0646\u062f."
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.appType__omKma
                          )}
                          name={
                            "\u0645\u062e\u0635\u0648\u0635 \u067e\u0632\u0634\u06a9\u0627\u0646"
                          }
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["type"]
                                    },
                                    operation: 0,
                                    value: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateType"] != null &&
                              typeof $steps["updateType"] === "object" &&
                              typeof $steps["updateType"].then === "function"
                            ) {
                              $steps["updateType"] = await $steps["updateType"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.type == 2;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "selected";
                              }
                              throw e;
                            }
                          })()}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__enYpW
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hOqT8
                            )}
                          >
                            {
                              "\u0645\u062f\u06cc\u0631\u0627\u0646 \u0645\u0631\u06a9\u0632\u062f\u0631\u0645\u0627\u0646\u06cc (\u0628\u0632\u0648\u062f\u06cc)"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__prtEx
                            )}
                          >
                            {
                              "\u0627\u064e\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627\u06cc \u062f\u0631 \u0627\u06cc\u0646 \u0646\u0648\u0639 \u0628\u0631\u0627\u06cc \u0645\u062f\u0627\u06cc\u0631\u0627\u0646 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                            }
                          </div>
                        </Stack__>
                      </Stack__>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        isDisabled={(() => {
                          try {
                            return $state.loading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] =
                            $state.nameInput.value === "" ||
                            $state.keyInput.value === ""
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      (() => {
                                        try {
                                          return $state.nameInput.value ===
                                            "" && $state.keyInput.value === ""
                                            ? "نام و کلید نمی تواند خالی باشد"
                                            : $state.nameInput.value === ""
                                            ? "نام نمی تواند خالی باشد"
                                            : "شناسه یکتا نمی تواند خالی باشد";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      "top-center"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["invokeGlobalAction2"] =
                            !!$state.nameInput.value &&
                            !!$state.keyInput.value &&
                            ($state.keyInput.value.length < 4 ||
                              !/^[a-zA-Z0-9_]*$/.test($state.keyInput.value) ||
                              !!$state.fragmentApiRequest.error)
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0634\u0646\u0627\u0633\u0647 \u06cc\u06a9\u062a\u0627 \u0631\u0627 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                                      "top-center"
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] = await $steps[
                              "invokeGlobalAction2"
                            ];
                          }

                          $steps["updateLoading"] =
                            !!$state.nameInput.value &&
                            !!$state.keyInput.value &&
                            $state.keyInput.value.length >= 4 &&
                            /^[a-zA-Z0-9_]*$/.test($state.keyInput.value) &&
                            !$state.fragmentApiRequest.error
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLoading"] != null &&
                            typeof $steps["updateLoading"] === "object" &&
                            typeof $steps["updateLoading"].then === "function"
                          ) {
                            $steps["updateLoading"] = await $steps[
                              "updateLoading"
                            ];
                          }

                          $steps["createApp"] =
                            !!$state.nameInput.value &&
                            !!$state.keyInput.value &&
                            $state.keyInput.value.length >= 4 &&
                            /^[a-zA-Z0-9_]*$/.test($state.keyInput.value) &&
                            !$state.fragmentApiRequest.error
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://hamdast.paziresh24.com/api/v1/apps",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            name_fa: $state.nameInput.value,
                                            key: $state.keyInput.value,
                                            type:
                                              $state.type == 1
                                                ? "users"
                                                : "providers"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["createApp"] != null &&
                            typeof $steps["createApp"] === "object" &&
                            typeof $steps["createApp"].then === "function"
                          ) {
                            $steps["createApp"] = await $steps["createApp"];
                          }

                          $steps["updateLoading2"] =
                            !!$state.nameInput.value &&
                            !!$state.keyInput.value &&
                            $state.keyInput.value.length >= 4 &&
                            /^[a-zA-Z0-9_]*$/.test($state.keyInput.value) &&
                            !$state.fragmentApiRequest.error
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLoading2"] != null &&
                            typeof $steps["updateLoading2"] === "object" &&
                            typeof $steps["updateLoading2"].then === "function"
                          ) {
                            $steps["updateLoading2"] = await $steps[
                              "updateLoading2"
                            ];
                          }

                          $steps["goToStatistics"] =
                            !!$state.nameInput.value &&
                            !!$state.keyInput.value &&
                            $state.keyInput.value.length >= 4 &&
                            /^[a-zA-Z0-9_]*$/.test($state.keyInput.value) &&
                            !$state.fragmentApiRequest.error &&
                            $steps.createApp?.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/apps/${(() => {
                                      try {
                                        return $steps.createApp?.data?.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}/statistics`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToStatistics"] != null &&
                            typeof $steps["goToStatistics"] === "object" &&
                            typeof $steps["goToStatistics"].then === "function"
                          ) {
                            $steps["goToStatistics"] = await $steps[
                              "goToStatistics"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (window.data.apps = [
                                      $steps.createApp?.data
                                    ]);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3BTya
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.loading
                                  ? "صبر کنید..."
                                  : "ساخت ابزارک";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0633\u0627\u062e\u062a \u0627\u064e\u0628\u0632\u0627\u0631\u06a9";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Button>
                    </Stack__>
                  </div>
                </div>
              </Reveal>
            </div>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "svg",
    "img",
    "link",
    "nameInput",
    "keyInput",
    "fragmentApiRequest",
    "button"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "svg",
    "img",
    "link",
    "nameInput",
    "keyInput",
    "fragmentApiRequest",
    "button"
  ],
  svg: ["svg"],
  img: ["img"],
  link: ["link"],
  nameInput: ["nameInput"],
  keyInput: ["keyInput"],
  fragmentApiRequest: ["fragmentApiRequest"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  svg: "svg";
  img: typeof PlasmicImg__;
  link: "a";
  nameInput: typeof Input;
  keyInput: typeof Input;
  fragmentApiRequest: typeof ApiRequest;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewApp__VariantsArgs;
    args?: PlasmicNewApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewApp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewApp__ArgProps,
          internalVariantPropNames: PlasmicNewApp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewApp";
  } else {
    func.displayName = `PlasmicNewApp.${nodeName}`;
  }
  return func;
}

export const PlasmicNewApp = Object.assign(
  // Top-level PlasmicNewApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    nameInput: makeNodeComponent("nameInput"),
    keyInput: makeNodeComponent("keyInput"),
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNewApp
    internalVariantProps: PlasmicNewApp__VariantProps,
    internalArgProps: PlasmicNewApp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ساخت اَبزارک جدید",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewApp;
/* prettier-ignore-end */
