/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: RN8QdSWhw1VG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import AppType from "../../AppType"; // plasmic-import: N2XFsVyv799E/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicNew.module.css"; // plasmic-import: RN8QdSWhw1VG/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: uNpsRe8HBlEO/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicNew__VariantMembers = {};
export type PlasmicNew__VariantsArgs = {};
type VariantPropType = keyof PlasmicNew__VariantsArgs;
export const PlasmicNew__VariantProps = new Array<VariantPropType>();

export type PlasmicNew__ArgsType = {};
type ArgPropType = keyof PlasmicNew__ArgsType;
export const PlasmicNew__ArgProps = new Array<ArgPropType>();

export type PlasmicNew__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
};

export interface DefaultNewProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNew__RenderFunc(props: {
  variants: PlasmicNew__VariantsArgs;
  args: PlasmicNew__ArgsType;
  overrides: PlasmicNew__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "type",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicNew.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicNew.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicNew.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_ravi_design_system_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/style.css"\r\n/>\r\n<script src="https://cdn.jsdelivr.net/npm/rrweb-player@latest/dist/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            withOutUser={false}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vJmmm)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__wRpu)}
                direction={"down"}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__f4Yb0)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jknp4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Cty0
                      )}
                    >
                      {"\u0647\u0645\u200c\u062f\u0633\u062a"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4HgfM
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yh79W
                      )}
                    >
                      {
                        "\u062a\u0648\u0633\u0639\u0647 \u062f\u0647\u0646\u062f\u0647"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ef8HT)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fr3Y)}
                    >
                      <Icon12Icon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sAGkN
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (!$state.authProvider.user?.id) {
                                  return `کاربر بی نام`;
                                }
                                return `${$state.authProvider.user.name} ${$state.authProvider.user.family}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0622\u06cc\u062f\u0627 \u0627\u0631\u062f\u0627\u0646\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
              </Reveal>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__wwkFm)}
                delay={1000}
                effect={"fade"}
                triggerOnce={true}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0DBur)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfQA)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vhsCg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tJlry
                        )}
                      >
                        {(() => {
                          try {
                            return !!$state.authProvider.user.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__euva1
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${$state.authProvider.user.name}،`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062e\u0648\u0634 \u0622\u0645\u062f\u06cc\u062f.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jz7NY
                          )}
                        >
                          {"\u062e\u0648\u0634 \u0622\u0645\u062f\u06cc"}
                        </div>
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"24px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"24px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/hamdast/images/partyPng.png",
                            fullWidth: 160,
                            fullHeight: 160,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nf2Ut
                        )}
                      >
                        {
                          "\u062b\u0628\u062a \u0646\u0627\u0645 \u0634\u0645\u0627 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u062a\u0648\u0633\u0639\u0647 \u062f\u0647\u0646\u062f\u0647 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u061b \u062e\u062f\u0645\u062a \u0645\u062f\u0646\u0638\u0631 \u062e\u0648\u062f\u062a\u0648\u0646 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mZh2F
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0647\u0631 \u06a9\u062c\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u062f\u0627\u0634\u062a\u06cc \u0628\u0647 "
                            }
                          </React.Fragment>
                          {
                            <PlasmicLink__
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link
                              )}
                              component={Link}
                              href={"https://t.me/AmirhBeigi"}
                              platform={"nextjs"}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{
                                    color: "#1479C2",
                                    fontWeight: 700,
                                    textDecorationLine: "underline"
                                  }}
                                >
                                  {
                                    "\u062a\u0644\u06af\u0631\u0627\u0645 \u0645\u0646"
                                  }
                                </span>
                              </React.Fragment>
                            </PlasmicLink__>
                          }
                          <React.Fragment>
                            {" \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647."}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ds9Rm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3YW7I
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ogw5V
                          )}
                        >
                          {"\u062e\u062f\u0645\u062a"}
                        </div>
                        <AppType
                          caption={
                            "\u062f\u0631\u06cc\u0627\u0641\u062a API key \u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u0628 \u0633\u0631\u0648\u06cc\u0633 \u0647\u0627\u06cc \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.appType__wh42X
                          )}
                          name={"\u0648\u0628 \u0633\u0631\u0648\u06cc\u0633"}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["type"]
                                    },
                                    operation: 0,
                                    value: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateType"] != null &&
                              typeof $steps["updateType"] === "object" &&
                              typeof $steps["updateType"].then === "function"
                            ) {
                              $steps["updateType"] = await $steps["updateType"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.type == 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "selected";
                              }
                              throw e;
                            }
                          })()}
                        />

                        <AppType
                          caption={
                            "\u062a\u0648\u0633\u0639\u0647 \u0648 \u0627\u0646\u062a\u0634\u0627\u0631 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627\u06cc \u062e\u0648\u062f \u062f\u0631 \u0633\u0627\u06cc\u062a \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.appType__awVgb
                          )}
                          name={"\u0627\u0628\u0632\u0627\u0631\u06a9 "}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateType"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["type"]
                                    },
                                    operation: 0,
                                    value: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateType"] != null &&
                              typeof $steps["updateType"] === "object" &&
                              typeof $steps["updateType"].then === "function"
                            ) {
                              $steps["updateType"] = await $steps["updateType"];
                            }
                          }}
                          selected={(() => {
                            try {
                              return $state.type == 2;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "selected";
                              }
                              throw e;
                            }
                          })()}
                        />

                        <AppType
                          caption={
                            "\u0645\u0634\u0627\u0647\u062f\u0647 \u0648 \u06a9\u0627\u0631 \u0628\u0627 \u067e\u0646\u0644 \u067e\u0632\u0634\u06a9\u0627\u0646"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.appType__nmdhg
                          )}
                          name={
                            "\u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9"
                          }
                          selected={(() => {
                            try {
                              return $state.type == 3;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "selected";
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <Paziresh24Button
                        data-plasmic-name={"paziresh24Button"}
                        data-plasmic-override={overrides.paziresh24Button}
                        children2={"\u0627\u062f\u0627\u0645\u0647"}
                        className={classNames(
                          "__wab_instance",
                          sty.paziresh24Button
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToNewApp"] =
                            $state.type == 2
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/apps/new`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToNewApp"] != null &&
                            typeof $steps["goToNewApp"] === "object" &&
                            typeof $steps["goToNewApp"].then === "function"
                          ) {
                            $steps["goToNewApp"] = await $steps["goToNewApp"];
                          }

                          $steps["goToCredentialsSettings"] =
                            $state.type == 1
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/credentials`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToCredentialsSettings"] != null &&
                            typeof $steps["goToCredentialsSettings"] ===
                              "object" &&
                            typeof $steps["goToCredentialsSettings"].then ===
                              "function"
                          ) {
                            $steps["goToCredentialsSettings"] = await $steps[
                              "goToCredentialsSettings"
                            ];
                          }
                        }}
                      />
                    </div>
                  </div>
                </div>
              </Reveal>
            </div>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "svg",
    "img",
    "link",
    "paziresh24Button"
  ],
  embedHtml: ["embedHtml"],
  authProvider: ["authProvider", "svg", "img", "link", "paziresh24Button"],
  svg: ["svg"],
  img: ["img"],
  link: ["link"],
  paziresh24Button: ["paziresh24Button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  svg: "svg";
  img: typeof PlasmicImg__;
  link: "a";
  paziresh24Button: typeof Paziresh24Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNew__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNew__VariantsArgs;
    args?: PlasmicNew__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNew__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNew__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNew__ArgProps,
          internalVariantPropNames: PlasmicNew__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNew__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNew";
  } else {
    func.displayName = `PlasmicNew.${nodeName}`;
  }
  return func;
}

export const PlasmicNew = Object.assign(
  // Top-level PlasmicNew renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),

    // Metadata about props expected for PlasmicNew
    internalVariantProps: PlasmicNew__VariantProps,
    internalArgProps: PlasmicNew__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "جدید",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNew;
/* prettier-ignore-end */
