/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: H16Cvh_Kg1CW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import { Switch } from "@/fragment/components/switch"; // plasmic-import: Zc1MrGUtH5nc/codeComponent
import Button from "../../Button"; // plasmic-import: _T6T2fNvkUfo/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicPageItem.module.css"; // plasmic-import: H16Cvh_Kg1CW/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: TGgY6td-PfjR/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: iYZxMqrkbIkm/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: dF9hk944lHvi/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: WZWdkuuTy9hb/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: UuDHOUXMn1lI/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: VepSFu0Y3Pyk/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: CmW94FEF71d7/icon

createPlasmicElementProxy;

export type PlasmicPageItem__VariantMembers = {};
export type PlasmicPageItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageItem__VariantsArgs;
export const PlasmicPageItem__VariantProps = new Array<VariantPropType>();

export type PlasmicPageItem__ArgsType = {
  pageKey?: string;
  isOpen?: boolean;
  onSelect?: () => void;
  appKey?: string;
  defaultValues?: any;
  notSave?: boolean;
  appId?: string;
  pageId?: string;
  onSave?: (id: string, data: any) => void;
  onDelete?: (id: string) => void;
};
type ArgPropType = keyof PlasmicPageItem__ArgsType;
export const PlasmicPageItem__ArgProps = new Array<ArgPropType>(
  "pageKey",
  "isOpen",
  "onSelect",
  "appKey",
  "defaultValues",
  "notSave",
  "appId",
  "pageId",
  "onSave",
  "onDelete"
);

export type PlasmicPageItem__OverridesType = {
  root?: Flex__<"div">;
  nameInput?: Flex__<typeof Input>;
  keyInput?: Flex__<typeof Input>;
  pathParameterInput?: Flex__<typeof Input>;
  embedInput?: Flex__<typeof Input>;
  fragmentSwitch?: Flex__<typeof Switch>;
  fragmentSwitch2?: Flex__<typeof Switch>;
  fragmentSwitch3?: Flex__<typeof Switch>;
  fragmentSwitch4?: Flex__<typeof Switch>;
};

export interface DefaultPageItemProps {
  pageKey?: string;
  isOpen?: boolean;
  onSelect?: () => void;
  appKey?: string;
  defaultValues?: any;
  notSave?: boolean;
  appId?: string;
  pageId?: string;
  onSave?: (id: string, data: any) => void;
  onDelete?: (id: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageItem__RenderFunc(props: {
  variants: PlasmicPageItem__VariantsArgs;
  args: PlasmicPageItem__ArgsType;
  overrides: PlasmicPageItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isOpen: false,
          defaultValues: {
            name: "\u0628\u0631\u06af\u0647 1",
            key: "page",
            parameters: [],
            embed_src: "",
            layout: {
              show_footer: true,
              show_header: true,
              show_bottom_navigation: true
            },
            is_protected_route: false
          },
          notSave: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues?.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "keyInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues?.key;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "parametersList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.parameters;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "pathParameterInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "embedInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.embed_src;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.layout.show_header;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch2.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.layout.show_footer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch3.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.layout.show_bottom_navigation;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentSwitch4.checked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.is_protected_route;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__yPin5)}
        onClick={async event => {
          const $steps = {};

          $steps["runOnSelect"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onSelect"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnSelect"] != null &&
            typeof $steps["runOnSelect"] === "object" &&
            typeof $steps["runOnSelect"].then === "function"
          ) {
            $steps["runOnSelect"] = await $steps["runOnSelect"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__r8Iwy)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__y6FEa
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.nameInput?.value
                    ? $state.nameInput?.value
                    : $props.defaultValues?.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0646\u0627\u0645 \u0628\u0631\u06af\u0647";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Icon22Icon
            className={classNames(projectcss.all, sty.svg__oi4OG)}
            role={"img"}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__vh5Wd)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1E7Dz
            )}
            dir={"ltr"}
          >
            <React.Fragment>
              <React.Fragment>{"#"}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__u520W
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.keyInput?.value
                          ? $state.keyInput?.value
                          : $props.defaultValues?.key;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "page";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          {(() => {
            try {
              return !$props.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg___1WbFf)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $props.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronUpSvgIcon
              className={classNames(projectcss.all, sty.svg___2VjCo)}
              role={"img"}
            />
          ) : null}
        </div>
      </div>
      {(() => {
        try {
          return $props.isOpen;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox___0ICey)}>
          <div className={classNames(projectcss.all, sty.freeBox__yaeuk)}>
            <div className={classNames(projectcss.all, sty.freeBox__f9Co)}>
              <div className={classNames(projectcss.all, sty.freeBox__p4Qgc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7SIqq
                  )}
                >
                  {"\u0646\u0627\u0645 \u0628\u0631\u06af\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6JgTl
                  )}
                >
                  {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xhvnq
                )}
              >
                {
                  "\u06cc\u06a9 \u0646\u0627\u0645 \u0628\u0647 \u0641\u0627\u0631\u0633\u06cc \u0628\u0631\u0627\u06cc \u0628\u0631\u06af\u0647 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0646\u0627\u0645 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                }
              </div>
              <Input
                data-plasmic-name={"nameInput"}
                data-plasmic-override={overrides.nameInput}
                className={classNames("__wab_instance", sty.nameInput)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "nameInput",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={(() => {
                  try {
                    return $state.nameInput?.value
                      ? $state.nameInput?.value
                      : $props.defaultValues?.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                type={"text"}
                value={generateStateValueProp($state, ["nameInput", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__r1Glu)}>
              <div className={classNames(projectcss.all, sty.freeBox__n0Ce)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tfwTe
                  )}
                >
                  {"\u0634\u0646\u0627\u0633\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bOjrw
                  )}
                >
                  {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__diLwv
                )}
              >
                {
                  "\u06cc\u06a9 \u0634\u0646\u0627\u0633\u0647 \u0645\u0646\u062d\u0635\u0631 \u0628\u0647 \u0641\u0631\u062f \u0628\u0631\u0627\u06cc \u0635\u0641\u062d\u0647 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ypni)}>
                <Input
                  data-plasmic-name={"keyInput"}
                  data-plasmic-override={overrides.keyInput}
                  attributes={{ dir: "ltr" }}
                  className={classNames("__wab_instance", sty.keyInput)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "keyInput",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $state.keyInput?.value
                        ? $state.keyInput?.value
                        : $props.defaultValues?.key;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  type={"text"}
                  value={generateStateValueProp($state, ["keyInput", "value"])}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i1TcC
                  )}
                  dir={"ltr"}
                >
                  <React.Fragment>
                    <React.Fragment>{"/_/"}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span___6Sg6
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.appKey;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "booking";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </span>
                    }
                    <React.Fragment>{"/"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__uNJn)}>
            <div className={classNames(projectcss.all, sty.freeBox__j9XhM)}>
              <div className={classNames(projectcss.all, sty.freeBox__hqFe6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w4SkR
                  )}
                >
                  {"\u067e\u0627\u0631\u0627\u0645\u062a\u0631 \u0647\u0627"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__is1K)}>
                  {(() => {
                    try {
                      return $state.parametersList?.length !== 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u8YkA)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateParametersList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["parametersList"]
                                },
                                operation: 6,
                                value: (() => {
                                  {
                                    key: "";
                                  }
                                })(),
                                deleteCount: 1,
                                startIndex: (() => {
                                  try {
                                    return (
                                      $state.pathParameterInput?.length - 1
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const arr = $stateGet(objRoot, variablePath);
                                arr.splice(startIndex, deleteCount);
                                return arr;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateParametersList"] != null &&
                          typeof $steps["updateParametersList"] === "object" &&
                          typeof $steps["updateParametersList"].then ===
                            "function"
                        ) {
                          $steps["updateParametersList"] = await $steps[
                            "updateParametersList"
                          ];
                        }

                        $steps["updatePathParameterInput"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pathParameterInput"]
                                },
                                operation: 6,
                                startIndex: (() => {
                                  try {
                                    return (
                                      $state.pathParameterInput?.length - 1
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 0;
                                    }
                                    throw e;
                                  }
                                })(),
                                deleteCount: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const arr = $stateGet(objRoot, variablePath);
                                arr.splice(startIndex, deleteCount);
                                return arr;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePathParameterInput"] != null &&
                          typeof $steps["updatePathParameterInput"] ===
                            "object" &&
                          typeof $steps["updatePathParameterInput"].then ===
                            "function"
                        ) {
                          $steps["updatePathParameterInput"] = await $steps[
                            "updatePathParameterInput"
                          ];
                        }
                      }}
                    >
                      <Icon23Icon
                        className={classNames(projectcss.all, sty.svg___08O8Y)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xj2FA
                        )}
                      >
                        {
                          "\u062d\u0630\u0641 \u067e\u0627\u0631\u0627\u0645\u062a\u0631"
                        }
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tu7Hq)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateParametersList"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["parametersList"]
                              },
                              operation: 5,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const arr = $stateGet(objRoot, variablePath);
                              arr.push(value);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateParametersList"] != null &&
                        typeof $steps["updateParametersList"] === "object" &&
                        typeof $steps["updateParametersList"].then ===
                          "function"
                      ) {
                        $steps["updateParametersList"] = await $steps[
                          "updateParametersList"
                        ];
                      }
                    }}
                  >
                    <Icon21Icon
                      className={classNames(projectcss.all, sty.svg__bmhui)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mwkue
                      )}
                    >
                      {
                        "\u0627\u0641\u0632\u0648\u062f\u0646 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 \u062c\u062f\u06cc\u062f"
                      }
                    </div>
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return $state.parametersList?.length != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__jjEJe)}
                  dir={"ltr"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__orYwT
                    )}
                    dir={"ltr"}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"https://www.paziresh24.com/_/"}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__aeouj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.appKey;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "booking";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </span>
                      }
                      <React.Fragment>{"/"}</React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__tzq5E
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.keyInput.value
                                  ? $state.keyInput.value
                                  : $props.pageKey;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "factor";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </span>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.parametersList;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lvWmJ
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ndklI
                          )}
                        >
                          {"/"}
                        </div>
                        {(() => {
                          const child$Props = {
                            attributes: { dir: "ltr" },
                            className: classNames(
                              "__wab_instance",
                              sty.pathParameterInput
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "pathParameterInput",
                                __plasmic_idx_0,
                                "value"
                              ]).apply(null, eventArgs);
                            },
                            placeholder: ``,
                            type: "text",
                            value: generateStateValueProp($state, [
                              "pathParameterInput",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "pathParameterInput[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "pathParameterInput[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Input
                              data-plasmic-name={"pathParameterInput"}
                              data-plasmic-override={
                                overrides.pathParameterInput
                              }
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    );
                  })}
                </div>
              ) : null}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5BQrx)}>
            <div className={classNames(projectcss.all, sty.freeBox___4G9TR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kqwtu
                )}
              >
                {"\u0622\u062f\u0631\u0633 embed"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nW7Tx
                )}
              >
                {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sx2Sk
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u0622\u062f\u0631\u0633 \u0627\u0634\u0627\u0631\u0647 \u06a9\u0646\u0646\u062f\u0647 \u0628\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f. \u062c\u0647\u062a \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 \u0647\u0627\u06cc \u0628\u0631\u06af\u0647 \u0644\u0627\u0632\u0645\u0647 \u0622\u0646 \u0631\u0627 \u062f\u0631 "
                  }
                </React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__ucXso
                    )}
                  >
                    {"{{ }}"}
                  </span>
                }
                <React.Fragment>
                  {
                    " \u0642\u0631\u0627\u0631 \u062f\u0647\u06cc\u062f\u060c \u0645\u062b\u0627\u0644 "
                  }
                </React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__dgblw
                    )}
                  >
                    {"https://example.com/page/{{id}}"}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lr0W
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u0622\u062f\u0631\u0633 \u062d\u062a\u0645\u0627 \u0628\u0627\u06cc\u062f \u0647\u0645\u0631\u0627\u0647 \u0628\u0627 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"https "}
                </span>
                <React.Fragment>{"\u0628\u0627\u0634\u062f."}</React.Fragment>
              </React.Fragment>
            </div>
            <Input
              data-plasmic-name={"embedInput"}
              data-plasmic-override={overrides.embedInput}
              attributes={{ dir: "ltr" }}
              className={classNames("__wab_instance", sty.embedInput)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "embedInput",
                  "value"
                ]).apply(null, eventArgs);
              }}
              type={"text"}
              value={generateStateValueProp($state, ["embedInput", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gksbm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oSh6D
              )}
            >
              {
                "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0646\u0645\u0627\u06cc\u0634\u06cc"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___2SP9B)}>
              <div className={classNames(projectcss.all, sty.freeBox___6TzSl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7ZhbJ
                  )}
                >
                  {"\u0646\u0645\u0627\u06cc\u0634 \u0647\u062f\u0631"}
                </div>
                <Switch
                  data-plasmic-name={"fragmentSwitch"}
                  data-plasmic-override={overrides.fragmentSwitch}
                  checked={generateStateValueProp($state, [
                    "fragmentSwitch",
                    "checked"
                  ])}
                  className={classNames("__wab_instance", sty.fragmentSwitch)}
                  onCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentSwitch",
                      "checked"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jcF3Z)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zb9A7
                  )}
                >
                  {"\u0646\u0645\u0627\u06cc\u0634 \u0641\u0648\u062a\u0631"}
                </div>
                <Switch
                  data-plasmic-name={"fragmentSwitch2"}
                  data-plasmic-override={overrides.fragmentSwitch2}
                  checked={generateStateValueProp($state, [
                    "fragmentSwitch2",
                    "checked"
                  ])}
                  className={classNames("__wab_instance", sty.fragmentSwitch2)}
                  onCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentSwitch2",
                      "checked"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kWudv)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9JvSe
                  )}
                >
                  {
                    "\u0646\u0645\u0627\u06cc\u0634 \u0645\u0646\u0648 \u0646\u0627\u0648\u0628\u0631\u06cc \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <Switch
                  data-plasmic-name={"fragmentSwitch3"}
                  data-plasmic-override={overrides.fragmentSwitch3}
                  checked={generateStateValueProp($state, [
                    "fragmentSwitch3",
                    "checked"
                  ])}
                  className={classNames("__wab_instance", sty.fragmentSwitch3)}
                  onCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentSwitch3",
                      "checked"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lwjD)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ygBsM
              )}
            >
              {
                "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0645\u0646\u06cc\u062a\u06cc"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__w4R2W)}>
              <div className={classNames(projectcss.all, sty.freeBox__vpWdf)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__neDh7
                  )}
                >
                  {
                    "\u062f\u0633\u062a\u0631\u0633\u06cc \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0634\u062f\u0647 \u0645\u062c\u0627\u0632 \u0628\u0627\u0634\u062f."
                  }
                </div>
                <Switch
                  data-plasmic-name={"fragmentSwitch4"}
                  data-plasmic-override={overrides.fragmentSwitch4}
                  checked={generateStateValueProp($state, [
                    "fragmentSwitch4",
                    "checked"
                  ])}
                  className={classNames("__wab_instance", sty.fragmentSwitch4)}
                  onCheckedChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentSwitch4",
                      "checked"
                    ]).apply(null, eventArgs);
                  }}
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7Vpw)}>
            <Button
              className={classNames("__wab_instance", sty.button__eV5F)}
              color={"softRed"}
              isDisabled={(() => {
                try {
                  return $state.deleteLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateDeleteLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteLoading"] != null &&
                  typeof $steps["updateDeleteLoading"] === "object" &&
                  typeof $steps["updateDeleteLoading"].then === "function"
                ) {
                  $steps["updateDeleteLoading"] = await $steps[
                    "updateDeleteLoading"
                  ];
                }

                $steps["create"] = !$props.notSave
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "DELETE",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/pages/${$props.pageId}/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          undefined
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["create"] != null &&
                  typeof $steps["create"] === "object" &&
                  typeof $steps["create"].then === "function"
                ) {
                  $steps["create"] = await $steps["create"];
                }

                $steps["runOnDelete"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onDelete"],
                        args: [
                          (() => {
                            try {
                              return $props.appId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value,
                                layout: {
                                  show_header:
                                    $state.fragmentSwitch.checked ?? false,
                                  show_footer:
                                    $state.fragmentSwitch2.checked ?? false,
                                  show_bottom_navigation:
                                    $state.fragmentSwitch3.checked ?? false
                                },
                                parameters:
                                  $state?.pathParameterInput?.map(
                                    item => item.value
                                  ) ?? [],
                                is_protected_route:
                                  $state.fragmentSwitch4.checked
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnDelete"] != null &&
                  typeof $steps["runOnDelete"] === "object" &&
                  typeof $steps["runOnDelete"].then === "function"
                ) {
                  $steps["runOnDelete"] = await $steps["runOnDelete"];
                }

                $steps["updateIsLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading2"] != null &&
                  typeof $steps["updateIsLoading2"] === "object" &&
                  typeof $steps["updateIsLoading2"].then === "function"
                ) {
                  $steps["updateIsLoading2"] = await $steps["updateIsLoading2"];
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tfPfs
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.deleteLoading ? "صبر کنید..." : "حذف";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0630\u062e\u06cc\u0631\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___5Fe0C)}
              isDisabled={(() => {
                try {
                  return $state.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading"] != null &&
                  typeof $steps["updateIsLoading"] === "object" &&
                  typeof $steps["updateIsLoading"].then === "function"
                ) {
                  $steps["updateIsLoading"] = await $steps["updateIsLoading"];
                }

                $steps["create"] = $props.notSave
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/pages/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value,
                                layout: {
                                  show_header:
                                    $state.fragmentSwitch.checked ?? false,
                                  show_footer:
                                    $state.fragmentSwitch2.checked ?? false,
                                  show_bottom_navigation:
                                    $state.fragmentSwitch3.checked ?? false
                                },
                                parameters:
                                  $state?.pathParameterInput?.map(
                                    item => item.value
                                  ) ?? [],
                                is_protected_route:
                                  $state.fragmentSwitch4.checked
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["create"] != null &&
                  typeof $steps["create"] === "object" &&
                  typeof $steps["create"].then === "function"
                ) {
                  $steps["create"] = await $steps["create"];
                }

                $steps["update"] = !$props.notSave
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PUT",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/pages/${$props.pageId}/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value,
                                layout: {
                                  show_header:
                                    $state.fragmentSwitch.checked ?? false,
                                  show_footer:
                                    $state.fragmentSwitch2.checked ?? false,
                                  show_bottom_navigation:
                                    $state.fragmentSwitch3.checked ?? false
                                },
                                parameters:
                                  $state?.pathParameterInput?.map(
                                    item => item.value
                                  ) ?? [],
                                is_protected_route:
                                  $state.fragmentSwitch4.checked
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["runOnSave"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSave"],
                        args: [
                          (() => {
                            try {
                              return $props.notSave
                                ? $steps.create?.data?.id
                                : $steps.update?.data?.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value,
                                layout: {
                                  show_header:
                                    $state.fragmentSwitch.checked ?? false,
                                  show_footer:
                                    $state.fragmentSwitch2.checked ?? false,
                                  show_bottom_navigation:
                                    $state.fragmentSwitch3.checked ?? false
                                },
                                parameters:
                                  $state?.pathParameterInput?.map(
                                    item => item.value
                                  ) ?? [],
                                is_protected_route:
                                  $state.fragmentSwitch4.checked
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSave"] != null &&
                  typeof $steps["runOnSave"] === "object" &&
                  typeof $steps["runOnSave"].then === "function"
                ) {
                  $steps["runOnSave"] = await $steps["runOnSave"];
                }

                $steps["updateIsLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading2"] != null &&
                  typeof $steps["updateIsLoading2"] === "object" &&
                  typeof $steps["updateIsLoading2"].then === "function"
                ) {
                  $steps["updateIsLoading2"] = await $steps["updateIsLoading2"];
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nbqlv
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.isLoading ? "صبر کنید..." : "ذخیره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0630\u062e\u06cc\u0631\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nameInput",
    "keyInput",
    "pathParameterInput",
    "embedInput",
    "fragmentSwitch",
    "fragmentSwitch2",
    "fragmentSwitch3",
    "fragmentSwitch4"
  ],
  nameInput: ["nameInput"],
  keyInput: ["keyInput"],
  pathParameterInput: ["pathParameterInput"],
  embedInput: ["embedInput"],
  fragmentSwitch: ["fragmentSwitch"],
  fragmentSwitch2: ["fragmentSwitch2"],
  fragmentSwitch3: ["fragmentSwitch3"],
  fragmentSwitch4: ["fragmentSwitch4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nameInput: typeof Input;
  keyInput: typeof Input;
  pathParameterInput: typeof Input;
  embedInput: typeof Input;
  fragmentSwitch: typeof Switch;
  fragmentSwitch2: typeof Switch;
  fragmentSwitch3: typeof Switch;
  fragmentSwitch4: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageItem__VariantsArgs;
    args?: PlasmicPageItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageItem__ArgProps,
          internalVariantPropNames: PlasmicPageItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageItem";
  } else {
    func.displayName = `PlasmicPageItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPageItem = Object.assign(
  // Top-level PlasmicPageItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nameInput: makeNodeComponent("nameInput"),
    keyInput: makeNodeComponent("keyInput"),
    pathParameterInput: makeNodeComponent("pathParameterInput"),
    embedInput: makeNodeComponent("embedInput"),
    fragmentSwitch: makeNodeComponent("fragmentSwitch"),
    fragmentSwitch2: makeNodeComponent("fragmentSwitch2"),
    fragmentSwitch3: makeNodeComponent("fragmentSwitch3"),
    fragmentSwitch4: makeNodeComponent("fragmentSwitch4"),

    // Metadata about props expected for PlasmicPageItem
    internalVariantProps: PlasmicPageItem__VariantProps,
    internalArgProps: PlasmicPageItem__ArgProps
  }
);

export default PlasmicPageItem;
/* prettier-ignore-end */
