// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: 7ri-iU6uUwQF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import Menu from "../../Menu"; // plasmic-import: 73TqujunaOu5/component
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import Button from "../../Button"; // plasmic-import: _T6T2fNvkUfo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicSettting.module.css"; // plasmic-import: 7ri-iU6uUwQF/css

import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 09kUgGvbipjq/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: zU9ql4OiZyfC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: VepSFu0Y3Pyk/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: CmW94FEF71d7/icon

createPlasmicElementProxy;

export type PlasmicSettting__VariantMembers = {};
export type PlasmicSettting__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettting__VariantsArgs;
export const PlasmicSettting__VariantProps = new Array<VariantPropType>();

export type PlasmicSettting__ArgsType = {};
type ArgPropType = keyof PlasmicSettting__ArgsType;
export const PlasmicSettting__ArgProps = new Array<ArgPropType>();

export type PlasmicSettting__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  fragmentInput?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
};

export interface DefaultSetttingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettting__RenderFunc(props: {
  variants: PlasmicSettting__VariantsArgs;
  args: PlasmicSettting__ArgsType;
  overrides: PlasmicSettting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "menu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "API Key";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.authProvider.user.api_key;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.authProvider.apps[0].key;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSettting.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSettting.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSettting.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={generateStateOnChangeProp($state, [
              "authProvider",
              "apps"
            ])}
            onUserChange={generateStateOnChangeProp($state, [
              "authProvider",
              "user"
            ])}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute.split("/")[3][0].toUpperCase() +
                    $ctx.pageRoute.split("/")[3].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pLoc7)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__as44O)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tFyjQ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yl7Vx
                      )}
                    >
                      {"\u0639\u0645\u0648\u0645\u06cc"}
                    </div>
                    <Menu
                      active={(() => {
                        try {
                          return "App" === $state.menu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.menu__sm1Zy)}
                      compact={true}
                      disabled={true}
                      icon={false}
                      iconWrapper={null}
                      name={
                        "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u064e\u0628\u0632\u0627\u0631\u06a9"
                      }
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateMenu"] = false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["menu"]
                                },
                                operation: 0,
                                value: "App"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMenu"] != null &&
                          typeof $steps["updateMenu"] === "object" &&
                          typeof $steps["updateMenu"].then === "function"
                        ) {
                          $steps["updateMenu"] = await $steps["updateMenu"];
                        }
                      }}
                    />

                    <Menu
                      active={(() => {
                        try {
                          return "API Key" === $state.menu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.menu__rsWhz)}
                      compact={true}
                      icon={false}
                      iconWrapper={null}
                      name={
                        "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 API"
                      }
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateMenu"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["menu"]
                                },
                                operation: 0,
                                value: "API Key"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMenu"] != null &&
                          typeof $steps["updateMenu"] === "object" &&
                          typeof $steps["updateMenu"].then === "function"
                        ) {
                          $steps["updateMenu"] = await $steps["updateMenu"];
                        }
                      }}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__axPke)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Cjn7
                      )}
                    >
                      {"\u0645\u0646\u0648"}
                    </div>
                    <Menu
                      active={(() => {
                        try {
                          return "Menu" === $state.menu;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.menu__dJhv)}
                      compact={true}
                      disabled={true}
                      icon={false}
                      iconWrapper={null}
                      name={
                        "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0645\u0646\u0648"
                      }
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateMenu"] = false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["menu"]
                                },
                                operation: 0,
                                value: "Menu"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMenu"] != null &&
                          typeof $steps["updateMenu"] === "object" &&
                          typeof $steps["updateMenu"].then === "function"
                        ) {
                          $steps["updateMenu"] = await $steps["updateMenu"];
                        }
                      }}
                    />
                  </Stack__>
                </Stack__>
                {(() => {
                  try {
                    return $state.menu === "API Key";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__esqEs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dCbqe
                      )}
                    >
                      {"\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 API"}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sshHq)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b9Y9Z
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__a7HMj
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__siiZ
                            )}
                          >
                            <Icon19Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tKadL
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yu4Hk
                              )}
                            >
                              {"API Key"}
                            </div>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gvqWd
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u0628 \u0633\u0631\u0648\u06cc\u0633\u200c\u0647\u0627\u06cc \u0647\u0645\u200c\u062f\u0633\u062a\u060c \u0627\u0632 API Key \u0628\u0647\u0631\u0647 \u0628\u06af\u06cc\u0631\u06cc\u062f. \u0644\u0637\u0641\u0627\u064b \u062f\u0631 \u062d\u0641\u0638 \u0648 \u0646\u06af\u0647\u062f\u0627\u0631\u06cc \u0622\u0646 \u062f\u0642\u062a \u06a9\u0646\u06cc\u062f\u060c \u0632\u06cc\u0631\u0627 \u0627\u06cc\u0646 \u06a9\u0644\u06cc\u062f "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token--ypw6enySR1T)" }}
                              >
                                {"\u0645\u062d\u0631\u0645\u0627\u0646\u0647"}
                              </span>
                              <React.Fragment>
                                {" \u0627\u0633\u062a."}
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                        <Input
                          data-plasmic-name={"fragmentInput"}
                          data-plasmic-override={overrides.fragmentInput}
                          attributes={{ dir: "ltr", readOnly: true }}
                          className={classNames(
                            "__wab_instance",
                            sty.fragmentInput
                          )}
                          disabled={false}
                          onChange={generateStateOnChangeProp($state, [
                            "fragmentInput",
                            "value"
                          ])}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "fragmentInput",
                            "value"
                          ])}
                        />
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gCdn)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qIbDj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qfruk
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n0Hb3
                            )}
                          >
                            <Icon16Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h3U8R
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4USow
                              )}
                            >
                              {
                                "\u0634\u0646\u0627\u0633\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9"
                              }
                            </div>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dTs9H
                            )}
                          >
                            {
                              "\u0627\u064e\u0628\u0632\u0627\u0631\u06a9 \u0634\u0645\u0627 \u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u0634\u0646\u0627\u0633\u0647 \u0634\u0646\u0627\u0633\u0627\u06cc\u06cc \u0645\u06cc\u200c\u0634\u0648\u062f."
                            }
                          </div>
                        </div>
                        <Input
                          data-plasmic-name={"fragmentInput2"}
                          data-plasmic-override={overrides.fragmentInput2}
                          attributes={{ dir: "ltr", readOnly: true }}
                          className={classNames(
                            "__wab_instance",
                            sty.fragmentInput2
                          )}
                          disabled={false}
                          onChange={generateStateOnChangeProp($state, [
                            "fragmentInput2",
                            "value"
                          ])}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "fragmentInput2",
                            "value"
                          ])}
                        />
                      </Stack__>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3MLvn
                      )}
                    >
                      {
                        "\u062f\u0631\u062e\u0648\u0627\u0633\u062a\u200c\u0647\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc"
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mmn3N)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nn7Sa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Xw5Z
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sqZlm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b8CN
                              )}
                            >
                              {
                                "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0627\u06cc\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__toxH0
                              )}
                            >
                              {
                                "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0627\u06cc\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646\u060c \u0645\u0627\u0646\u0646\u062f \u0646\u0627\u0645\u200c\u060c \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u062f\u0627\u06af\u06cc \u0648 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                              }
                            </div>
                          </div>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__wy0Lv
                            )}
                            color={"softSand"}
                            isDisabled={(() => {
                              try {
                                return $state.authProvider.apps
                                  ?.find(item => item.id === $ctx?.params?.id)
                                  .permissions?.includes("USER");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rUIu4
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.authProvider.apps
                                      ?.find(
                                        item => item.id === $ctx?.params?.id
                                      )
                                      .permissions?.includes("USER")
                                      ? "دسترسی داده شد."
                                      : "درخواست دسترسی";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062f\u0633\u062a\u0631\u0633\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x792V)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__egWk0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Ckds
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v4FPf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Pwgm
                              )}
                            >
                              {
                                "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0627\u06cc\u0647 \u067e\u0632\u0634\u06a9\u0627\u0646"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8K5Ni
                              )}
                            >
                              {
                                "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0627\u06cc\u0647 \u067e\u0632\u0634\u06a9\u0627\u0646\u060c \u0645\u0627\u0646\u0646\u062f \u0627\u0633\u0644\u0627\u06af \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u060c \u06a9\u062f\u0646\u0638\u0627\u0645 \u067e\u0632\u0634\u06a9\u06cc\u060c \u0628\u06cc\u0648\u06af\u0631\u0627\u0641\u06cc"
                              }
                            </div>
                          </div>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__j2VYs
                            )}
                            size={"compact"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Rsu9
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.authProvider.apps
                                      ?.find(
                                        item => item.id === $ctx?.params?.id
                                      )
                                      .permissions?.includes("PROVIDER")
                                      ? "دسترسی داده شد."
                                      : "درخواست دسترسی";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062f\u0633\u062a\u0631\u0633\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                ) : null}
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "fragmentInput",
    "fragmentInput2"
  ],
  embedHtml: ["embedHtml"],
  authProvider: ["authProvider", "layout", "fragmentInput", "fragmentInput2"],
  layout: ["layout", "fragmentInput", "fragmentInput2"],
  fragmentInput: ["fragmentInput"],
  fragmentInput2: ["fragmentInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  fragmentInput: typeof Input;
  fragmentInput2: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettting__VariantsArgs;
    args?: PlasmicSettting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSettting__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettting__ArgProps,
          internalVariantPropNames: PlasmicSettting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettting";
  } else {
    func.displayName = `PlasmicSettting.${nodeName}`;
  }
  return func;
}

export const PlasmicSettting = Object.assign(
  // Top-level PlasmicSettting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),

    // Metadata about props expected for PlasmicSettting
    internalVariantProps: PlasmicSettting__VariantProps,
    internalArgProps: PlasmicSettting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تنظیمات اَبزارک",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettting;
/* prettier-ignore-end */
