/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: hhjL63F0Jui4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import Filter from "../../Filter"; // plasmic-import: YY41SIghQUgw/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import TransactionCard from "../../TransactionCard"; // plasmic-import: hnKe0-Td8nYz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_ravi_design_system } from "../ravi_design_system/PlasmicStyleTokensProvider"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicTransactions.module.css"; // plasmic-import: hhjL63F0Jui4/css

import Icon42Icon from "./icons/PlasmicIcon__Icon42"; // plasmic-import: QvI77t3YrvM9/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: AGSEC-pNDNUM/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: TmLWglGupeVI/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicTransactions__VariantMembers = {};
export type PlasmicTransactions__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransactions__VariantsArgs;
export const PlasmicTransactions__VariantProps = new Array<VariantPropType>();

export type PlasmicTransactions__ArgsType = {};
type ArgPropType = keyof PlasmicTransactions__ArgsType;
export const PlasmicTransactions__ArgProps = new Array<ArgPropType>();

export type PlasmicTransactions__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  fragmentApiRequest2?: Flex__<typeof ApiRequest>;
  fragmentApiRequest3?: Flex__<typeof ApiRequest>;
  fragmentApiRequest4?: Flex__<typeof ApiRequest>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  input?: Flex__<typeof Input>;
  apiRequest3?: Flex__<typeof ApiRequest>;
  apiRequest?: Flex__<typeof ApiRequest>;
  transactionCard?: Flex__<typeof TransactionCard>;
};

export interface DefaultTransactionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactions__RenderFunc(props: {
  variants: PlasmicTransactions__VariantsArgs;
  args: PlasmicTransactions__ArgsType;
  overrides: PlasmicTransactions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "fragmentApiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest2"
      },
      {
        path: "fragmentApiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest2"
      },
      {
        path: "fragmentApiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest2"
      },
      {
        path: "statusFilter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "done"
      },
      {
        path: "fragmentApiRequest3.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest3"
      },
      {
        path: "fragmentApiRequest3.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest3"
      },
      {
        path: "fragmentApiRequest3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest3"
      },
      {
        path: "fragmentApiRequest4.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest4"
      },
      {
        path: "fragmentApiRequest4.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest4"
      },
      {
        path: "fragmentApiRequest4.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "fragmentApiRequest4"
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest2[].data",
        type: "private",
        variableType: "object",

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2[].error",
        type: "private",
        variableType: "object",

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2[].loading",
        type: "private",
        variableType: "boolean",

        refName: "apiRequest2"
      },
      {
        path: "selectedUserForWithdraw",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest3.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest3"
      },
      {
        path: "apiRequest3.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest3"
      },
      {
        path: "apiRequest3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest3"
      },
      {
        path: "withdrawLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_ravi_design_system =
    useStyleTokens_ravi_design_system();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicTransactions.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicTransactions.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicTransactions.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_ravi_design_system,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return undefined;
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1][0].toUpperCase() +
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__x4Hja,
                  "no-scroll"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6KWmF
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#0000003D" }}
                    >
                      {"\u06a9\u0633\u0628 \u062f\u0631\u0622\u0645\u062f / "}
                    </span>
                    <React.Fragment>
                      {
                        "\u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0645\u0627\u0644\u06cc"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6DFfd)}
                >
                  <ApiRequest
                    data-plasmic-name={"fragmentApiRequest2"}
                    data-plasmic-override={overrides.fragmentApiRequest2}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentApiRequest2
                    )}
                    errorDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dvOz
                        )}
                      >
                        <Icon42Icon
                          className={classNames(projectcss.all, sty.svg__jsHyB)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oPoYc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xyrgT
                            )}
                          >
                            {"\u062f\u0631\u0622\u0645\u062f"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ceK7X
                            )}
                          >
                            <Icon15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7YTz6
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8T8Aq
                              )}
                            >
                              {"\u062a\u0648\u0645\u0627\u0646"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aHeWv
                            )}
                          >
                            {
                              "\u0645\u06cc\u0632\u0627\u0646 \u0641\u0631\u0648\u0634 \u0627\u0632 \u0627\u0648\u0644 \u062a\u0627 \u0628\u0647 \u0627\u0644\u0627\u0646"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    loadingDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zd5Im
                        )}
                      >
                        <Icon42Icon
                          className={classNames(projectcss.all, sty.svg__nMt4E)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__njL7E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__b1Isr
                            )}
                          >
                            {"\u062f\u0631\u0622\u0645\u062f"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__liGa
                            )}
                          >
                            <Icon15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9VxzD
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yPntm
                              )}
                            >
                              {"\u062a\u0648\u0645\u0627\u0646"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ebIsW
                            )}
                          >
                            {
                              "\u0645\u06cc\u0632\u0627\u0646 \u0641\u0631\u0648\u0634 \u0627\u0632 \u0627\u0648\u0644 \u062a\u0627 \u0628\u0647 \u0627\u0644\u0627\u0646"
                            }
                          </div>
                        </div>
                      </div>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest2",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest2",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest2",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    ref={ref => {
                      $refs["fragmentApiRequest2"] = ref;
                    }}
                    url={(() => {
                      try {
                        return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/sales`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v1IWt)}
                    >
                      <Icon42Icon
                        className={classNames(projectcss.all, sty.svg__g7Ca)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Uip2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__spBo3
                          )}
                        >
                          {
                            "\u0645\u06cc\u0632\u0627\u0646 \u0641\u0631\u0648\u0634"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qQhVf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lYc0K
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return new Intl.NumberFormat("fa-IR").format(
                                    (
                                      $state.fragmentApiRequest2?.data
                                        ?.balance ?? 0
                                    )
                                      .toString()
                                      .slice(0, -1)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06f0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rY3WF
                            )}
                          >
                            {"\u062a\u0648\u0645\u0627\u0646"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2QmCz
                          )}
                        >
                          {
                            "\u0645\u06cc\u0632\u0627\u0646 \u0641\u0631\u0648\u0634 \u0627\u0632 \u0627\u0648\u0644 \u062a\u0627 \u0628\u0647 \u0627\u0644\u0627\u0646"
                          }
                        </div>
                      </div>
                    </div>
                  </ApiRequest>
                  <ApiRequest
                    data-plasmic-name={"fragmentApiRequest3"}
                    data-plasmic-override={overrides.fragmentApiRequest3}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentApiRequest3
                    )}
                    errorDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qnjOw
                        )}
                      >
                        <Icon25Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___79Sn6
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nZn4F
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cZRl
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4WO9Q
                            )}
                          >
                            <Icon15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iFcci
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w7Loe
                              )}
                            >
                              {"\u062a\u0648\u0645\u0627\u0646"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___89JAl
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627\u06cc\u06cc \u06a9\u0647 "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"\u06f7 \u0631\u0648\u0632"}
                              </span>
                              <React.Fragment>
                                {
                                  " \u0627\u0632 \u0632\u0645\u0627\u0646\u200c\u0634\u0627\u0646 \u06af\u0630\u0634\u062a\u0647 \u0627\u0634\u062a."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__feXi9
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"\u06f3\u06f0\u066a"}
                              </span>
                              <React.Fragment>
                                {
                                  " \u0628\u0627\u0628\u062a \u06a9\u0627\u0631\u0645\u0632\u062f \u062e\u062f\u0645\u0627\u062a \u0647\u0645\u200c\u062f\u0633\u062a \u06a9\u0645 \u0634\u062f\u0647 \u0627\u0633\u062a."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    }
                    loadingDisplay={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tl3UU
                        )}
                      >
                        <Icon25Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___22Vdg
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bEcJc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hA49V
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7GJ7Q
                            )}
                          >
                            <Icon15Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___6LZxu
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4LgA2
                              )}
                            >
                              {"\u062a\u0648\u0645\u0627\u0646"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___94Xv
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627\u06cc\u06cc \u06a9\u0647 "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"\u06f7 \u0631\u0648\u0632"}
                              </span>
                              <React.Fragment>
                                {
                                  " \u0627\u0632 \u0632\u0645\u0627\u0646\u200c\u0634\u0627\u0646 \u06af\u0630\u0634\u062a\u0647 \u0627\u0634\u062a."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mjlMf
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"\u06f3\u06f0\u066a"}
                              </span>
                              <React.Fragment>
                                {
                                  " \u0628\u0627\u0628\u062a \u06a9\u0627\u0631\u0645\u0632\u062f \u062e\u062f\u0645\u0627\u062a \u0647\u0645\u200c\u062f\u0633\u062a \u06a9\u0645 \u0634\u062f\u0647 \u0627\u0633\u062a."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest3",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest3",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentApiRequest3",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    ref={ref => {
                      $refs["fragmentApiRequest3"] = ref;
                    }}
                    url={(() => {
                      try {
                        return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/withdrawable`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rRgx7)}
                    >
                      <Icon25Icon
                        className={classNames(projectcss.all, sty.svg__sevT2)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wlJmn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__znxbX
                          )}
                        >
                          {
                            "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u0628\u0631\u062f\u0627\u0634\u062a"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jyZ9Y
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__s1NwH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return new Intl.NumberFormat("fa-IR").format(
                                    (
                                      $state.fragmentApiRequest3.data
                                        ?.balance ?? 0
                                    )
                                      .toString()
                                      .slice(0, -1)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06f0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Hynf
                            )}
                          >
                            {"\u062a\u0648\u0645\u0627\u0646"}
                          </div>
                          <ApiRequest
                            data-plasmic-name={"fragmentApiRequest4"}
                            data-plasmic-override={
                              overrides.fragmentApiRequest4
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.fragmentApiRequest4
                            )}
                            errorDisplay={null}
                            loadingDisplay={
                              <Icon15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uaqbN
                                )}
                                role={"img"}
                              />
                            }
                            method={"GET"}
                            onError={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "fragmentApiRequest4",
                                "error"
                              ]).apply(null, eventArgs);
                            }}
                            onLoading={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "fragmentApiRequest4",
                                "loading"
                              ]).apply(null, eventArgs);
                            }}
                            onSuccess={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "fragmentApiRequest4",
                                "data"
                              ]).apply(null, eventArgs);
                            }}
                            ref={ref => {
                              $refs["fragmentApiRequest4"] = ref;
                            }}
                            url={(() => {
                              try {
                                return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/escrow`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qOqQx
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5Aram
                                )}
                              >
                                {
                                  "\u062f\u0631 \u0627\u0646\u062a\u0638\u0627\u0631"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tktVb
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oD7Hy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return new Intl.NumberFormat(
                                          "fa-IR"
                                        ).format(
                                          (
                                            $state.fragmentApiRequest4.data
                                              ?.balance ?? 0
                                          )
                                            .toString()
                                            .slice(0, -1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06f0";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lp1SI
                                  )}
                                >
                                  {"\u062a\u0648\u0645\u0627\u0646"}
                                </div>
                              </div>
                            </div>
                          </ApiRequest>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6EMt
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627\u06cc\u06cc \u06a9\u0647 "
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"\u06f7 \u0631\u0648\u0632"}
                            </span>
                            <React.Fragment>
                              {
                                " \u0627\u0632 \u0632\u0645\u0627\u0646\u200c\u0634\u0627\u0646 \u06af\u0630\u0634\u062a\u0647 \u0627\u0633\u062a."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Kwcy
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"\u06f3\u06f0\u066a"}
                            </span>
                            <React.Fragment>
                              {
                                " \u0628\u0627\u0628\u062a \u06a9\u0627\u0631\u0645\u0632\u062f \u062e\u062f\u0645\u0627\u062a \u0647\u0645\u200c\u062f\u0633\u062a \u06a9\u0645 \u0634\u062f\u0647 \u0627\u0633\u062a."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </ApiRequest>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rggxG)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zf2Kk)}
                  >
                    <Icon43Icon
                      className={classNames(projectcss.all, sty.svg___1ApIl)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h7JZ8
                      )}
                    >
                      {"\u0648\u0636\u0639\u06cc\u062a"}
                    </div>
                  </div>
                  <Filter
                    active={(() => {
                      try {
                        return $state.statusFilter == "done";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.filter___6Ch5D)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateStatusFilter"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["statusFilter"]
                              },
                              operation: 0,
                              value: "done"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStatusFilter"] != null &&
                        typeof $steps["updateStatusFilter"] === "object" &&
                        typeof $steps["updateStatusFilter"].then === "function"
                      ) {
                        $steps["updateStatusFilter"] = await $steps[
                          "updateStatusFilter"
                        ];
                      }
                    }}
                    text={"\u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647"}
                  />

                  <Filter
                    active={(() => {
                      try {
                        return $state.statusFilter == "pending";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.filter__oKEaO)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateStatusFilter"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["statusFilter"]
                              },
                              operation: 0,
                              value: "pending"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStatusFilter"] != null &&
                        typeof $steps["updateStatusFilter"] === "object" &&
                        typeof $steps["updateStatusFilter"].then === "function"
                      ) {
                        $steps["updateStatusFilter"] = await $steps[
                          "updateStatusFilter"
                        ];
                      }
                    }}
                    text={
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647"
                    }
                  />

                  <Filter
                    active={(() => {
                      try {
                        return $state.statusFilter == "canceled";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    className={classNames("__wab_instance", sty.filter___59CFa)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateStatusFilter"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["statusFilter"]
                              },
                              operation: 0,
                              value: "canceled"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStatusFilter"] != null &&
                        typeof $steps["updateStatusFilter"] === "object" &&
                        typeof $steps["updateStatusFilter"].then === "function"
                      ) {
                        $steps["updateStatusFilter"] = await $steps[
                          "updateStatusFilter"
                        ];
                      }
                    }}
                    text={
                      "\u062a\u0627\u06cc\u06cc\u062f \u0646\u0634\u062f\u0647 / \u067e\u0633 \u062f\u0627\u062f\u0647 \u0634\u062f\u0647"
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__aoClD)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xtE4O)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cBfo
                      )}
                    >
                      {"\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hoH9K)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xBL
                      )}
                    >
                      {"\u0645\u0628\u0644\u063a"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__olFdy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x7TEm
                      )}
                    >
                      {"\u0646\u0627\u0645 \u0645\u062d\u0635\u0648\u0644"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__npcuE)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wv5Y
                      )}
                    >
                      {"\u0632\u0645\u0627\u0646"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v2PS4)}
                  >
                    <Paziresh24Dialog
                      data-plasmic-name={"dialog"}
                      data-plasmic-override={overrides.dialog}
                      body={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iKenu
                            )}
                          >
                            {
                              "\u0628\u0631\u0627\u06cc \u0628\u0631\u062f\u0627\u0634\u062a \u067e\u0648\u0644 \u0627\u0632 \u062d\u0633\u0627\u0628 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0628\u0627\u06cc\u062f \u0622\u0646 \u0631\u0627 \u0628\u0647 \u06cc\u06a9 \u062d\u0633\u0627\u0628 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0646\u062a\u0642\u0627\u0644 \u062f\u0647\u06cc\u062f \u0648 \u0633\u067e\u0633 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0622\u0646 \u062a\u0633\u0648\u06cc\u0647 \u06a9\u0646\u06cc\u062f \u06cc\u0627 \u0627\u0632 \u062e\u062f\u0645\u0627\u062a \u062f\u06cc\u06af\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u06a9\u0646\u06cc\u062f."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9D8En
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oaEm
                              )}
                            >
                              {
                                "\u0627\u0639\u0636\u0627\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hgqu4
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.authProvider.apps
                                      ?.find?.(
                                        item => item.id === $ctx?.params?.id
                                      )
                                      ?.collaborators?.filter(
                                        (item, index, items) =>
                                          items?.length > 1
                                            ? item?.paziresh24_user_id !==
                                              "3313319"
                                            : true
                                      );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cwVJa
                                    )}
                                    key={currentIndex}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateSelectedUserForWithdraw"] =
                                        true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "selectedUserForWithdraw"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.selectedUserForWithdraw !=
                                                  currentItem?.id
                                                    ? currentItem.paziresh24_user_id
                                                    : null
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps[
                                          "updateSelectedUserForWithdraw"
                                        ] != null &&
                                        typeof $steps[
                                          "updateSelectedUserForWithdraw"
                                        ] === "object" &&
                                        typeof $steps[
                                          "updateSelectedUserForWithdraw"
                                        ].then === "function"
                                      ) {
                                        $steps[
                                          "updateSelectedUserForWithdraw"
                                        ] = await $steps[
                                          "updateSelectedUserForWithdraw"
                                        ];
                                      }

                                      $steps["updateInputValue"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["input", "value"]
                                              },
                                              operation: 0,
                                              value: ""
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateInputValue"] != null &&
                                        typeof $steps["updateInputValue"] ===
                                          "object" &&
                                        typeof $steps["updateInputValue"]
                                          .then === "function"
                                      ) {
                                        $steps["updateInputValue"] =
                                          await $steps["updateInputValue"];
                                      }
                                    }}
                                    style={(() => {
                                      try {
                                        return {
                                          background:
                                            currentItem.paziresh24_user_id ===
                                            $state.selectedUserForWithdraw
                                              ? "#F1F5F9"
                                              : ""
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    <ApiRequest
                                      data-plasmic-name={"apiRequest2"}
                                      data-plasmic-override={
                                        overrides.apiRequest2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.apiRequest2
                                      )}
                                      errorDisplay={null}
                                      loadingDisplay={
                                        <Icon15Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__vGyeL
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      method={"GET"}
                                      onError={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "apiRequest2",
                                          __plasmic_idx_0,
                                          "error"
                                        ]).apply(null, eventArgs);
                                      }}
                                      onLoading={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "apiRequest2",
                                          __plasmic_idx_0,
                                          "loading"
                                        ]).apply(null, eventArgs);
                                      }}
                                      onSuccess={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "apiRequest2",
                                          __plasmic_idx_0,
                                          "data"
                                        ]).apply(null, eventArgs);
                                      }}
                                      ref={ref => {
                                        $refs["apiRequest2"] = ref;
                                      }}
                                      url={(() => {
                                        try {
                                          return `https://apigw.paziresh24.com/v1/users/${currentItem?.paziresh24_user_id}`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__e66B3
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                $state.apiRequest2?.[
                                                  currentIndex
                                                ]?.data?.users?.[0]?.name +
                                                " " +
                                                $state.apiRequest2?.[
                                                  currentIndex
                                                ]?.data?.users?.[0]?.family
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </ApiRequest>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uLSf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___84Zf
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s5E1
                              )}
                            >
                              {"\u06cc\u0627"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7GfmL
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vlfyc
                            )}
                          >
                            {
                              "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zkCem
                            )}
                          >
                            <Input
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              className={classNames(
                                "__wab_instance",
                                sty.input
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "input",
                                  "value"
                                ]).apply(null, eventArgs);

                                (async value => {
                                  const $steps = {};

                                  $steps["updateSelectedUserForWithdraw"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "selectedUserForWithdraw"
                                            ]
                                          },
                                          operation: 1
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            undefined
                                          );
                                          return undefined;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelectedUserForWithdraw"] !=
                                      null &&
                                    typeof $steps[
                                      "updateSelectedUserForWithdraw"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateSelectedUserForWithdraw"
                                    ].then === "function"
                                  ) {
                                    $steps["updateSelectedUserForWithdraw"] =
                                      await $steps[
                                        "updateSelectedUserForWithdraw"
                                      ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              placeholder={"09"}
                              type={"tel"}
                              value={generateStateValueProp($state, [
                                "input",
                                "value"
                              ])}
                            />

                            {(() => {
                              try {
                                return $state.input.value?.length > 10;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pukI
                                )}
                              >
                                <ApiRequest
                                  data-plasmic-name={"apiRequest3"}
                                  data-plasmic-override={overrides.apiRequest3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.apiRequest3
                                  )}
                                  errorDisplay={null}
                                  loadingDisplay={
                                    <Icon15Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__yIxYk
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  method={"GET"}
                                  onError={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "apiRequest3",
                                      "error"
                                    ]).apply(null, eventArgs);
                                  }}
                                  onLoading={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "apiRequest3",
                                      "loading"
                                    ]).apply(null, eventArgs);
                                  }}
                                  onSuccess={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "apiRequest3",
                                      "data"
                                    ]).apply(null, eventArgs);
                                  }}
                                  params={(() => {
                                    try {
                                      return {
                                        cell: $state?.input?.value?.replace(
                                          /^0/,
                                          ""
                                        )
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  ref={ref => {
                                    $refs["apiRequest3"] = ref;
                                  }}
                                  url={(() => {
                                    try {
                                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/users`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  {(() => {
                                    try {
                                      return $state.apiRequest3.data?.userid;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kaAc
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              $state.apiRequest3.data.name +
                                              " " +
                                              $state.apiRequest3.data.family
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return !$state.apiRequest3.data?.userid;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__a1PT
                                      )}
                                    >
                                      {
                                        "\u06a9\u0627\u0631\u0628\u0631\u06cc \u067e\u06cc\u062f\u0627 \u0646\u0634\u062f!"
                                      }
                                    </div>
                                  ) : null}
                                </ApiRequest>
                              </div>
                            ) : null}
                          </div>
                          <Paziresh24Button
                            children2={
                              "\u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647"
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__i7Vmu
                            )}
                            isDisabled={(() => {
                              try {
                                return $state?.input?.value?.length > 10
                                  ? !$state?.apiRequest3?.data?.userid
                                  : !$state.selectedUserForWithdraw;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            loading={(() => {
                              try {
                                return $state.withdrawLoading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateWithdrawLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["withdrawLoading"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateWithdrawLoading"] != null &&
                                typeof $steps["updateWithdrawLoading"] ===
                                  "object" &&
                                typeof $steps["updateWithdrawLoading"].then ===
                                  "function"
                              ) {
                                $steps["updateWithdrawLoading"] = await $steps[
                                  "updateWithdrawLoading"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        (() => {
                                          try {
                                            return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/withdraw`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              amount:
                                                $state?.fragmentApiRequest3
                                                  ?.data?.balance,
                                              userid:
                                                $state?.selectedUserForWithdraw
                                                  ? $state?.selectedUserForWithdraw
                                                  : $state?.apiRequest3?.data
                                                      ?.userid
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["updateWithdrawLoading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["withdrawLoading"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateWithdrawLoading2"] != null &&
                                typeof $steps["updateWithdrawLoading2"] ===
                                  "object" &&
                                typeof $steps["updateWithdrawLoading2"].then ===
                                  "function"
                              ) {
                                $steps["updateWithdrawLoading2"] = await $steps[
                                  "updateWithdrawLoading2"
                                ];
                              }

                              $steps["invokeGlobalAction2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "\u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u062f\u0647 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.",
                                        "top-center",
                                        5000
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }

                              $steps["updateDialogOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dialog", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDialogOpen"] != null &&
                                typeof $steps["updateDialogOpen"] ===
                                  "object" &&
                                typeof $steps["updateDialogOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateDialogOpen"] = await $steps[
                                  "updateDialogOpen"
                                ];
                              }

                              $steps["runActionOnFragmentApiRequest3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "fragmentApiRequest3",
                                      action: "refresh"
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runActionOnFragmentApiRequest3"] !=
                                  null &&
                                typeof $steps[
                                  "runActionOnFragmentApiRequest3"
                                ] === "object" &&
                                typeof $steps["runActionOnFragmentApiRequest3"]
                                  .then === "function"
                              ) {
                                $steps["runActionOnFragmentApiRequest3"] =
                                  await $steps[
                                    "runActionOnFragmentApiRequest3"
                                  ];
                              }

                              $steps["runActionOnFragmentApiRequest4"] = true
                                ? (() => {
                                    const actionArgs = {
                                      tplRef: "fragmentApiRequest4",
                                      action: "refresh"
                                    };
                                    return (({ tplRef, action, args }) => {
                                      return $refs?.[tplRef]?.[action]?.(
                                        ...(args ?? [])
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runActionOnFragmentApiRequest4"] !=
                                  null &&
                                typeof $steps[
                                  "runActionOnFragmentApiRequest4"
                                ] === "object" &&
                                typeof $steps["runActionOnFragmentApiRequest4"]
                                  .then === "function"
                              ) {
                                $steps["runActionOnFragmentApiRequest4"] =
                                  await $steps[
                                    "runActionOnFragmentApiRequest4"
                                  ];
                              }
                            }}
                          />
                        </React.Fragment>
                      }
                      className={classNames("__wab_instance", sty.dialog)}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dialog",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, ["dialog", "open"])}
                      title={
                        "\u0628\u0631\u062f\u0627\u0634\u062a \u067e\u0648\u0644 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631\u06a9"
                      }
                      trigger={
                        <Paziresh24Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qZqZa
                              )}
                            >
                              {
                                "\u0628\u0631\u062f\u0627\u0634\u062a \u067e\u0648\u0644"
                              }
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button__beAs
                          )}
                          isDisabled={(() => {
                            try {
                              return (
                                $state.fragmentApiRequest3.data.balance == 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return undefined;
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        />
                      }
                    />
                  </div>
                </div>
                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={null}
                  loadingDisplay={
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg___8SO3)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  params={(() => {
                    try {
                      return {
                        status: $state.statusFilter
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {(() => {
                    try {
                      return $state.apiRequest.data.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fg1Nh
                      )}
                    >
                      {
                        "\u062a\u0631\u0627\u06a9\u0646\u0634\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                      }
                    </div>
                  ) : null}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <TransactionCard
                        data-plasmic-name={"transactionCard"}
                        data-plasmic-override={overrides.transactionCard}
                        className={classNames(
                          "__wab_instance",
                          sty.transactionCard
                        )}
                        currentIndex={currentIndex}
                        currentItem={currentItem}
                        hideButton={(() => {
                          try {
                            return $state.statusFilter != "done";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                      />
                    );
                  })}
                </ApiRequest>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "fragmentApiRequest2",
    "fragmentApiRequest3",
    "fragmentApiRequest4",
    "dialog",
    "apiRequest2",
    "input",
    "apiRequest3",
    "apiRequest",
    "transactionCard"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "fragmentApiRequest2",
    "fragmentApiRequest3",
    "fragmentApiRequest4",
    "dialog",
    "apiRequest2",
    "input",
    "apiRequest3",
    "apiRequest",
    "transactionCard"
  ],
  layout: [
    "layout",
    "fragmentApiRequest2",
    "fragmentApiRequest3",
    "fragmentApiRequest4",
    "dialog",
    "apiRequest2",
    "input",
    "apiRequest3",
    "apiRequest",
    "transactionCard"
  ],
  fragmentApiRequest2: ["fragmentApiRequest2"],
  fragmentApiRequest3: ["fragmentApiRequest3", "fragmentApiRequest4"],
  fragmentApiRequest4: ["fragmentApiRequest4"],
  dialog: ["dialog", "apiRequest2", "input", "apiRequest3"],
  apiRequest2: ["apiRequest2"],
  input: ["input"],
  apiRequest3: ["apiRequest3"],
  apiRequest: ["apiRequest", "transactionCard"],
  transactionCard: ["transactionCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  fragmentApiRequest2: typeof ApiRequest;
  fragmentApiRequest3: typeof ApiRequest;
  fragmentApiRequest4: typeof ApiRequest;
  dialog: typeof Paziresh24Dialog;
  apiRequest2: typeof ApiRequest;
  input: typeof Input;
  apiRequest3: typeof ApiRequest;
  apiRequest: typeof ApiRequest;
  transactionCard: typeof TransactionCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactions__VariantsArgs;
    args?: PlasmicTransactions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransactions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransactions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactions__ArgProps,
          internalVariantPropNames: PlasmicTransactions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactions";
  } else {
    func.displayName = `PlasmicTransactions.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactions = Object.assign(
  // Top-level PlasmicTransactions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    fragmentApiRequest2: makeNodeComponent("fragmentApiRequest2"),
    fragmentApiRequest3: makeNodeComponent("fragmentApiRequest3"),
    fragmentApiRequest4: makeNodeComponent("fragmentApiRequest4"),
    dialog: makeNodeComponent("dialog"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    input: makeNodeComponent("input"),
    apiRequest3: makeNodeComponent("apiRequest3"),
    apiRequest: makeNodeComponent("apiRequest"),
    transactionCard: makeNodeComponent("transactionCard"),

    // Metadata about props expected for PlasmicTransactions
    internalVariantProps: PlasmicTransactions__VariantProps,
    internalArgProps: PlasmicTransactions__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تراکنش‌های مالی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTransactions;
/* prettier-ignore-end */
