/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: hnKe0-Td8nYz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import FragmentLineClamp from "../../FragmentLineClamp"; // plasmic-import: UrqY_XZuYhn2/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicTransactionCard.module.css"; // plasmic-import: hnKe0-Td8nYz/css

import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicTransactionCard__VariantMembers = {};
export type PlasmicTransactionCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransactionCard__VariantsArgs;
export const PlasmicTransactionCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTransactionCard__ArgsType = {
  currentItem?: any;
  currentIndex?: any;
  onRefresh?: () => void;
};
type ArgPropType = keyof PlasmicTransactionCard__ArgsType;
export const PlasmicTransactionCard__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "currentIndex",
  "onRefresh"
);

export type PlasmicTransactionCard__OverridesType = {
  root?: Flex__<"div">;
  apiRequest2?: Flex__<typeof ApiRequest>;
  avatar?: Flex__<typeof AntdAvatar>;
  fragmentLineClamp?: Flex__<typeof FragmentLineClamp>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
};

export interface DefaultTransactionCardProps {
  currentItem?: any;
  currentIndex?: any;
  onRefresh?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactionCard__RenderFunc(props: {
  variants: PlasmicTransactionCard__VariantsArgs;
  args: PlasmicTransactionCard__ArgsType;
  overrides: PlasmicTransactionCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest2"}
        data-plasmic-override={overrides.apiRequest2}
        className={classNames("__wab_instance", sty.apiRequest2)}
        config={{ headers: {} }}
        errorDisplay={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2N0G1)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__no0Ef)} />

            <div className={classNames(projectcss.all, sty.freeBox__ervX1)} />
          </Stack__>
        }
        loadingDisplay={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uNeyn)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zUuIe)} />

            <div className={classNames(projectcss.all, sty.freeBox__muf6M)} />
          </Stack__>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest2"] = ref;
        }}
        url={`https://apigw.paziresh24.com/v1/users/${$props.currentItem.userid}`}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sKbtl)}
        >
          <AntdAvatar
            data-plasmic-name={"avatar"}
            data-plasmic-override={overrides.avatar}
            className={classNames("__wab_instance", sty.avatar)}
            letters={(() => {
              try {
                return (() => {
                  const name = $state.apiRequest2?.data?.users?.[0]?.name?.[0];
                  const family =
                    $state.apiRequest2?.data?.users?.[0]?.family?.[0];
                  return (name ? name : "ک") + "" + (family ? family : "ب");
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shape={"circle"}
            size={"large"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gnaiq
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    const name = $state.apiRequest2?.data?.users?.[0]?.name;
                    const family = $state.apiRequest2?.data?.users?.[0]?.family;
                    return (
                      (name ? name : "کاربر") +
                      " " +
                      (family ? family : "بدون نام")
                    );
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </ApiRequest>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8JEmc)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bt4Ma
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (
                  ($props.currentItem.amount / 10).toLocaleString("fa-IR") +
                  " تومان"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__e7X3Q)}
      >
        <FragmentLineClamp
          data-plasmic-name={"fragmentLineClamp"}
          data-plasmic-override={overrides.fragmentLineClamp}
          className={classNames("__wab_instance", sty.fragmentLineClamp)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__c6Iv9
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </FragmentLineClamp>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___7OSRs)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qQk8
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return new Date(
                  $props.currentItem.register_date +
                    " " +
                    $props.currentItem.register_time
                ).toLocaleString("fa-IR", {
                  timeStyle: "short",
                  dateStyle: "medium"
                });
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fqvXr)}
      >
        <Paziresh24Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yflDr)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__coFlP
                )}
              >
                {
                  "\u0627\u06af\u0631 \u0627\u0632 \u062a\u0627\u0631\u06cc\u062e \u062a\u0631\u0627\u06a9\u0646\u0634 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06f1\u06f5 \u0631\u0648\u0632 \u06af\u0630\u0634\u062a\u0647 \u0628\u0627\u0634\u0647\u060c \u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062f\u06cc\u06af\u0631 \u0627\u0645\u06a9\u0627\u0646 \u067e\u0633 \u062f\u0627\u062f\u0646 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u0647."
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zJbk)}
              >
                <Paziresh24Button
                  children2={"\u067e\u0633 \u062f\u0627\u062f\u0646"}
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__wIOhB
                  )}
                  isDisabled={(() => {
                    try {
                      return (
                        new Date($props.currentItem.register_date) <
                        new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "isDisabled";
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["startLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["startLoading"] != null &&
                      typeof $steps["startLoading"] === "object" &&
                      typeof $steps["startLoading"].then === "function"
                    ) {
                      $steps["startLoading"] = await $steps["startLoading"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              (() => {
                                try {
                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/monetization/transactions/${$props.currentItem.receipt_id}/refund/`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["refresh"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onRefresh"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["refresh"] != null &&
                      typeof $steps["refresh"] === "object" &&
                      typeof $steps["refresh"].then === "function"
                    ) {
                      $steps["refresh"] = await $steps["refresh"];
                    }

                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }
                  }}
                />

                <Paziresh24Button
                  children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__agZx4
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDialogOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpen"] != null &&
                      typeof $steps["updateDialogOpen"] === "object" &&
                      typeof $steps["updateDialogOpen"].then === "function"
                    ) {
                      $steps["updateDialogOpen"] = await $steps[
                        "updateDialogOpen"
                      ];
                    }
                  }}
                  outline={true}
                />
              </Stack__>
            </Stack__>
          }
          className={classNames("__wab_instance", sty.dialog)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={
            "\u067e\u0633 \u062f\u0627\u062f\u0646\u0650 \u067e\u0648\u0644"
          }
          trigger={
            <Paziresh24Button
              children2={
                "\u067e\u0633 \u062f\u0627\u062f\u0646\u0650 \u067e\u0648\u0644"
              }
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__p2DWw
              )}
              outline={true}
              size={"compact"}
            />
          }
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest2", "avatar", "fragmentLineClamp", "dialog"],
  apiRequest2: ["apiRequest2", "avatar"],
  avatar: ["avatar"],
  fragmentLineClamp: ["fragmentLineClamp"],
  dialog: ["dialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest2: typeof ApiRequest;
  avatar: typeof AntdAvatar;
  fragmentLineClamp: typeof FragmentLineClamp;
  dialog: typeof Paziresh24Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactionCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactionCard__VariantsArgs;
    args?: PlasmicTransactionCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransactionCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransactionCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactionCard__ArgProps,
          internalVariantPropNames: PlasmicTransactionCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactionCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactionCard";
  } else {
    func.displayName = `PlasmicTransactionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactionCard = Object.assign(
  // Top-level PlasmicTransactionCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest2: makeNodeComponent("apiRequest2"),
    avatar: makeNodeComponent("avatar"),
    fragmentLineClamp: makeNodeComponent("fragmentLineClamp"),
    dialog: makeNodeComponent("dialog"),

    // Metadata about props expected for PlasmicTransactionCard
    internalVariantProps: PlasmicTransactionCard__VariantProps,
    internalArgProps: PlasmicTransactionCard__ArgProps
  }
);

export default PlasmicTransactionCard;
/* prettier-ignore-end */
