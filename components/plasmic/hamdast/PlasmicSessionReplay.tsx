// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: LDPTNOmbf3qw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import FetchData from "../../FetchData"; // plasmic-import: -UcPqMSXVAGv/component
import Menu from "../../Menu"; // plasmic-import: 73TqujunaOu5/component
import Filter from "../../Filter"; // plasmic-import: YY41SIghQUgw/component
import RecordCard from "../../RecordCard"; // plasmic-import: 07VZfuNk1JDL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicSessionReplay.module.css"; // plasmic-import: LDPTNOmbf3qw/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: zU9ql4OiZyfC/icon

createPlasmicElementProxy;

export type PlasmicSessionReplay__VariantMembers = {};
export type PlasmicSessionReplay__VariantsArgs = {};
type VariantPropType = keyof PlasmicSessionReplay__VariantsArgs;
export const PlasmicSessionReplay__VariantProps = new Array<VariantPropType>();

export type PlasmicSessionReplay__ArgsType = {};
type ArgPropType = keyof PlasmicSessionReplay__ArgsType;
export const PlasmicSessionReplay__ArgProps = new Array<ArgPropType>();

export type PlasmicSessionReplay__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  fetchData?: Flex__<typeof FetchData>;
  menu?: Flex__<typeof Menu>;
  filter?: Flex__<typeof Filter>;
  fetchData2?: Flex__<typeof FetchData>;
  recordCard?: Flex__<typeof RecordCard>;
};

export interface DefaultSessionReplayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSessionReplay__RenderFunc(props: {
  variants: PlasmicSessionReplay__VariantsArgs;
  args: PlasmicSessionReplay__ArgsType;
  overrides: PlasmicSessionReplay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fetchData2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "menu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.fetchData?.data?.[0]?.id ?? -1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "day",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSessionReplay.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSessionReplay.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSessionReplay.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute.split("/")[3][0].toUpperCase() +
                    $ctx.pageRoute.split("/")[3].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox___7SEoc)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uYljv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yf8Oq
                    )}
                  >
                    {
                      "\u0645\u0646\u0648 \u0627\u064e\u0628\u0632\u0627\u0631\u06a9"
                    }
                  </div>
                  <FetchData
                    data-plasmic-name={"fetchData"}
                    data-plasmic-override={overrides.fetchData}
                    className={classNames("__wab_instance", sty.fetchData)}
                    loadingStatus={
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__n53Le)}
                        role={"img"}
                      />
                    }
                    onDataChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fetchData",
                        "data"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fetchData",
                        "loading"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    url={(() => {
                      try {
                        return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x7G9A)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.fetchData.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Menu
                            data-plasmic-name={"menu"}
                            data-plasmic-override={overrides.menu}
                            active={(() => {
                              try {
                                return currentItem.id === $state.menu;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            className={classNames("__wab_instance", sty.menu)}
                            compact={true}
                            icon={false}
                            iconWrapper={null}
                            key={currentIndex}
                            name={(() => {
                              try {
                                return currentItem.name_fa;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateDay"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["day"]
                                      },
                                      operation: 0,
                                      value: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDay"] != null &&
                                typeof $steps["updateDay"] === "object" &&
                                typeof $steps["updateDay"].then === "function"
                              ) {
                                $steps["updateDay"] = await $steps["updateDay"];
                              }

                              $steps["updateMenu"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menu"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateMenu"] != null &&
                                typeof $steps["updateMenu"] === "object" &&
                                typeof $steps["updateMenu"].then === "function"
                              ) {
                                $steps["updateMenu"] = await $steps[
                                  "updateMenu"
                                ];
                              }
                            }}
                          />
                        );
                      })}
                      {(() => {
                        try {
                          return $state.fetchData.data.length == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jqubF
                          )}
                        >
                          {
                            "\u0645\u0646\u0648\u06cc\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                          }
                        </div>
                      ) : null}
                    </Stack__>
                  </FetchData>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mwIBa)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t0Sc6)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qIInK)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              {
                                text: "امروز",
                                value: 1
                              },
                              {
                                text: "۳ روز اخیر",
                                value: 3
                              },
                              {
                                text: "۷ روز اخیر",
                                value: 7
                              },
                              {
                                text: "۳۰ روز اخیر",
                                value: 30
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Filter
                            data-plasmic-name={"filter"}
                            data-plasmic-override={overrides.filter}
                            active={(() => {
                              try {
                                return currentItem.value === $state.day;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            className={classNames("__wab_instance", sty.filter)}
                            key={currentIndex}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateDay"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["day"]
                                      },
                                      operation: 0,
                                      value: currentItem.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDay"] != null &&
                                typeof $steps["updateDay"] === "object" &&
                                typeof $steps["updateDay"].then === "function"
                              ) {
                                $steps["updateDay"] = await $steps["updateDay"];
                              }
                            }}
                            text={(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })}
                    </Stack__>
                  </div>
                  <FetchData
                    data-plasmic-name={"fetchData2"}
                    data-plasmic-override={overrides.fetchData2}
                    className={classNames("__wab_instance", sty.fetchData2)}
                    enabled={(() => {
                      try {
                        return $state.menu;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    loadingStatus={
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__ytUbp)}
                        role={"img"}
                      />
                    }
                    onDataChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fetchData2",
                        "data"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fetchData2",
                        "loading"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    url={(() => {
                      try {
                        return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/menus/${$state.menu}/replay?days_ago=${$state.day}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(() => {
                      try {
                        return Array.isArray($state.fetchData2?.data);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__swXMv
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.fetchData2?.data;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <RecordCard
                              data-plasmic-name={"recordCard"}
                              data-plasmic-override={overrides.recordCard}
                              className={classNames(
                                "__wab_instance",
                                sty.recordCard
                              )}
                              date={(() => {
                                try {
                                  return (() => {
                                    const months = [
                                      "فروردین",
                                      "اردیبهشت",
                                      "خرداد",
                                      "تیر",
                                      "مرداد",
                                      "شهریور",
                                      "مهر",
                                      "آبان",
                                      "آذر",
                                      "دی",
                                      "بهمن",
                                      "اسفند"
                                    ];
                                    const date = new Date(
                                      currentItem.updated_at
                                    );
                                    const shamsiDate = new Intl.DateTimeFormat(
                                      "fa-IR",
                                      {
                                        day: "numeric",
                                        month: "long",
                                        hour: "2-digit",
                                        minute: "2-digit"
                                      }
                                    ).format(date);
                                    return shamsiDate.replace(
                                      /(\d+)/g,
                                      (_, p1) =>
                                        String.fromCharCode(
                                          p1.charCodeAt(0) + 1728
                                        )
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              events={(() => {
                                try {
                                  return currentItem.events;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              family={(() => {
                                try {
                                  return currentItem.user.family;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              isDoctor={(() => {
                                try {
                                  return (
                                    currentItem.user.job_title === "doctor"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                              name={(() => {
                                try {
                                  return currentItem.user.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                      </div>
                    ) : null}
                  </FetchData>
                  {(() => {
                    try {
                      return Array.isArray($state.fetchData2?.data)
                        ? $state.fetchData2.data?.length == 0
                        : $state.fetchData2?.loading
                        ? false
                        : true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___7I6)}
                    >
                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__heNuu)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Vqkb
                        )}
                      >
                        {
                          "\u0648\u06cc\u062f\u06cc\u0648 \u0636\u0628\u0637 \u0634\u062f\u0647 \u0627\u06cc \u062f\u0631 \u0627\u06cc\u0646 \u062a\u0627\u0631\u06cc\u062e \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f \u06cc\u0627 \u062a\u0646\u0638\u06cc\u0645\u0627\u062a SDK \u0628\u0647\u200c\u062f\u0631\u0633\u062a\u06cc \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u0645\u0646\u0648 \u0627\u0639\u0645\u0627\u0644 \u0646\u0634\u062f\u0647 \u0627\u0633\u062a."
                        }
                      </div>
                    </Stack__>
                  ) : null}
                </Stack__>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "fetchData",
    "menu",
    "filter",
    "fetchData2",
    "recordCard"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "fetchData",
    "menu",
    "filter",
    "fetchData2",
    "recordCard"
  ],
  layout: ["layout", "fetchData", "menu", "filter", "fetchData2", "recordCard"],
  fetchData: ["fetchData", "menu"],
  menu: ["menu"],
  filter: ["filter"],
  fetchData2: ["fetchData2", "recordCard"],
  recordCard: ["recordCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  fetchData: typeof FetchData;
  menu: typeof Menu;
  filter: typeof Filter;
  fetchData2: typeof FetchData;
  recordCard: typeof RecordCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSessionReplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSessionReplay__VariantsArgs;
    args?: PlasmicSessionReplay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSessionReplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSessionReplay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSessionReplay__ArgProps,
          internalVariantPropNames: PlasmicSessionReplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSessionReplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSessionReplay";
  } else {
    func.displayName = `PlasmicSessionReplay.${nodeName}`;
  }
  return func;
}

export const PlasmicSessionReplay = Object.assign(
  // Top-level PlasmicSessionReplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    fetchData: makeNodeComponent("fetchData"),
    menu: makeNodeComponent("menu"),
    filter: makeNodeComponent("filter"),
    fetchData2: makeNodeComponent("fetchData2"),
    recordCard: makeNodeComponent("recordCard"),

    // Metadata about props expected for PlasmicSessionReplay
    internalVariantProps: PlasmicSessionReplay__VariantProps,
    internalArgProps: PlasmicSessionReplay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "رفتار کاربران",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSessionReplay;
/* prettier-ignore-end */
