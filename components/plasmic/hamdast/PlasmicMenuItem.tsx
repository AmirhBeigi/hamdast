// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: YGfSBi-EmSgY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import Button from "../../Button"; // plasmic-import: _T6T2fNvkUfo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicMenuItem.module.css"; // plasmic-import: YGfSBi-EmSgY/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: TGgY6td-PfjR/icon
import ChevronDownSvgIcon from "./icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: iYZxMqrkbIkm/icon
import ChevronUpSvgIcon from "./icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: dF9hk944lHvi/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: VepSFu0Y3Pyk/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: CmW94FEF71d7/icon

createPlasmicElementProxy;

export type PlasmicMenuItem__VariantMembers = {};
export type PlasmicMenuItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicMenuItem__VariantsArgs;
export const PlasmicMenuItem__VariantProps = new Array<VariantPropType>();

export type PlasmicMenuItem__ArgsType = {
  pageKey?: string;
  isOpen?: boolean;
  onSelect?: () => void;
  appKey?: string;
  defaultValues?: any;
  notSave?: boolean;
  appId?: string;
  pageId?: string;
  onSave?: (id: string, data: any) => void;
  onDelete?: (id: string) => void;
};
type ArgPropType = keyof PlasmicMenuItem__ArgsType;
export const PlasmicMenuItem__ArgProps = new Array<ArgPropType>(
  "pageKey",
  "isOpen",
  "onSelect",
  "appKey",
  "defaultValues",
  "notSave",
  "appId",
  "pageId",
  "onSave",
  "onDelete"
);

export type PlasmicMenuItem__OverridesType = {
  root?: Flex__<"div">;
  nameInput?: Flex__<typeof Input>;
  keyInput?: Flex__<typeof Input>;
  embedInput?: Flex__<typeof Input>;
  embedInput2?: Flex__<typeof Input>;
};

export interface DefaultMenuItemProps {
  pageKey?: string;
  isOpen?: boolean;
  onSelect?: () => void;
  appKey?: string;
  defaultValues?: any;
  notSave?: boolean;
  appId?: string;
  pageId?: string;
  onSave?: (id: string, data: any) => void;
  onDelete?: (id: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuItem__RenderFunc(props: {
  variants: PlasmicMenuItem__VariantsArgs;
  args: PlasmicMenuItem__ArgsType;
  overrides: PlasmicMenuItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isOpen: false,
          defaultValues: {
            name: "\u0645\u0646\u0648 1",
            key: "menu",
            embed_src: ""
          },
          notSave: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues?.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "keyInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues?.key;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "parametersList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.parameters;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "embedInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValues.embed_src;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "embedInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__uDlAj)}
        onClick={async event => {
          const $steps = {};

          $steps["runOnSelect"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onSelect"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnSelect"] != null &&
            typeof $steps["runOnSelect"] === "object" &&
            typeof $steps["runOnSelect"].then === "function"
          ) {
            $steps["runOnSelect"] = await $steps["runOnSelect"];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xLHj)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___61Tiv
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.nameInput?.value
                    ? $state.nameInput?.value
                    : $props.defaultValues?.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0646\u0627\u0645 \u0628\u0631\u06af\u0647";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Icon22Icon
            className={classNames(projectcss.all, sty.svg__kzS3I)}
            role={"img"}
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__di5I)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tHIzk
            )}
            dir={"ltr"}
          >
            <React.Fragment>
              <React.Fragment>{"#"}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__l36T
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.keyInput?.value
                          ? $state.keyInput?.value
                          : $props.defaultValues?.key;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "page";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          {(() => {
            try {
              return !$props.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg__kN9N8)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $props.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronUpSvgIcon
              className={classNames(projectcss.all, sty.svg__jvG6B)}
              role={"img"}
            />
          ) : null}
        </Stack__>
      </div>
      {(() => {
        try {
          return $props.isOpen;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gQhyi)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xou9C)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__foKo)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bx61G)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dzMYv
                  )}
                >
                  {"\u0646\u0627\u0645 \u0645\u0646\u0648"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rdXxv
                  )}
                >
                  {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__atp7Z
                )}
              >
                {
                  "\u06cc\u06a9 \u0646\u0627\u0645 \u0628\u0647 \u0641\u0627\u0631\u0633\u06cc \u0628\u0631\u0627\u06cc \u0645\u0646\u0648 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0646\u0627\u0645 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                }
              </div>
              <Input
                data-plasmic-name={"nameInput"}
                data-plasmic-override={overrides.nameInput}
                className={classNames("__wab_instance", sty.nameInput)}
                onChange={generateStateOnChangeProp($state, [
                  "nameInput",
                  "value"
                ])}
                placeholder={(() => {
                  try {
                    return $state.nameInput?.value
                      ? $state.nameInput?.value
                      : $props.defaultValues?.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                type={"text"}
                value={generateStateValueProp($state, ["nameInput", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__qTHos)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__idDcy)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f2Zf
                  )}
                >
                  {"\u0634\u0646\u0627\u0633\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xxirz
                  )}
                >
                  {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aPa1S
                )}
              >
                {
                  "\u06cc\u06a9 \u0634\u0646\u0627\u0633\u0647 \u0645\u0646\u062d\u0635\u0631 \u0628\u0647 \u0641\u0631\u062f \u0628\u0631\u0627\u06cc \u0645\u0646\u0648 \u062e\u0648\u062f \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__luwxQ)}
              >
                <Input
                  data-plasmic-name={"keyInput"}
                  data-plasmic-override={overrides.keyInput}
                  attributes={{ dir: "ltr" }}
                  className={classNames("__wab_instance", sty.keyInput)}
                  onChange={generateStateOnChangeProp($state, [
                    "keyInput",
                    "value"
                  ])}
                  placeholder={(() => {
                    try {
                      return $state.keyInput?.value
                        ? $state.keyInput?.value
                        : $props.defaultValues?.key;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  type={"text"}
                  value={generateStateValueProp($state, ["keyInput", "value"])}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zAXmp
                  )}
                  dir={"ltr"}
                >
                  <React.Fragment>
                    <React.Fragment>{"/dashboard/apps/"}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__wAxAk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.appKey;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "booking";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </span>
                    }
                    <React.Fragment>{"/"}</React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__yik6Z)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8XQ9H)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vo3Oq
                )}
              >
                {"\u0622\u062f\u0631\u0633 embed"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vWata
                )}
              >
                {"\u0627\u0644\u0632\u0627\u0645\u06cc"}
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___08N
              )}
            >
              {
                "\u0622\u062f\u0631\u0633 \u0627\u0634\u0627\u0631\u0647 \u06a9\u0646\u0646\u062f\u0647 \u0628\u0647 \u0645\u0646\u0648\u06cc \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Hjhk
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u0622\u062f\u0631\u0633 \u062d\u062a\u0645\u0627 \u0628\u0627\u06cc\u062f \u0647\u0645\u0631\u0627\u0647 \u0628\u0627 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"https "}
                </span>
                <React.Fragment>{"\u0628\u0627\u0634\u062f."}</React.Fragment>
              </React.Fragment>
            </div>
            <Input
              data-plasmic-name={"embedInput"}
              data-plasmic-override={overrides.embedInput}
              attributes={{ dir: "ltr" }}
              className={classNames("__wab_instance", sty.embedInput)}
              onChange={generateStateOnChangeProp($state, [
                "embedInput",
                "value"
              ])}
              placeholder={"https://..."}
              type={"text"}
              value={generateStateValueProp($state, ["embedInput", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___94Ewm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h7EUj
              )}
            >
              {"\u0622\u062f\u0631\u0633 unread"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vo5GB
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u0622\u062f\u0631\u0633 unread \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 badge \u06a9\u0646\u0627\u0631 \u0645\u0646\u0648 \u0627\u0633\u062a."
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {" "}
                </span>
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__aSxb1
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0628\u0631\u0627\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0634\u062a\u0631 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f."
                        }
                      </span>
                    </React.Fragment>
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <Input
              data-plasmic-name={"embedInput2"}
              data-plasmic-override={overrides.embedInput2}
              attributes={{ dir: "ltr" }}
              className={classNames("__wab_instance", sty.embedInput2)}
              onChange={generateStateOnChangeProp($state, [
                "embedInput2",
                "value"
              ])}
              placeholder={"https://..."}
              type={"text"}
              value={generateStateValueProp($state, ["embedInput2", "value"])}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___6PUq)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__tsegk)}
              color={"softRed"}
              onClick={async event => {
                const $steps = {};

                $steps["updateDeleteLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteLoading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteLoading"] != null &&
                  typeof $steps["updateDeleteLoading"] === "object" &&
                  typeof $steps["updateDeleteLoading"].then === "function"
                ) {
                  $steps["updateDeleteLoading"] = await $steps[
                    "updateDeleteLoading"
                  ];
                }

                $steps["updateDeleteLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteLoading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteLoading2"] != null &&
                  typeof $steps["updateDeleteLoading2"] === "object" &&
                  typeof $steps["updateDeleteLoading2"].then === "function"
                ) {
                  $steps["updateDeleteLoading2"] = await $steps[
                    "updateDeleteLoading2"
                  ];
                }

                $steps["runOnDelete"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onDelete"],
                        args: [
                          (() => {
                            try {
                              return $props.pageId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnDelete"] != null &&
                  typeof $steps["runOnDelete"] === "object" &&
                  typeof $steps["runOnDelete"].then === "function"
                ) {
                  $steps["runOnDelete"] = await $steps["runOnDelete"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "DELETE",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/menus/${$props.pageId}/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9OhYv
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.deleteLoading ? "صبر کنید..." : "حذف";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0630\u062e\u06cc\u0631\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__f7DcO)}
              isDisabled={(() => {
                try {
                  return $state.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading"] != null &&
                  typeof $steps["updateIsLoading"] === "object" &&
                  typeof $steps["updateIsLoading"].then === "function"
                ) {
                  $steps["updateIsLoading"] = await $steps["updateIsLoading"];
                }

                $steps["create"] = $props.notSave
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/menus/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["create"] != null &&
                  typeof $steps["create"] === "object" &&
                  typeof $steps["create"].then === "function"
                ) {
                  $steps["create"] = await $steps["create"];
                }

                $steps["update"] = !$props.notSave
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PUT",
                          (() => {
                            try {
                              return `https://hamdast.paziresh24.com/api/v1/apps/${$props.appId}/menus/${$props.pageId}/`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["update"] != null &&
                  typeof $steps["update"] === "object" &&
                  typeof $steps["update"].then === "function"
                ) {
                  $steps["update"] = await $steps["update"];
                }

                $steps["runOnSave"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSave"],
                        args: [
                          (() => {
                            try {
                              return $props.notSave
                                ? $steps.create?.data?.id
                                : $steps.update?.data?.id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return {
                                key: $state.keyInput.value,
                                name_fa: $state.nameInput.value,
                                embed_src: $state.embedInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSave"] != null &&
                  typeof $steps["runOnSave"] === "object" &&
                  typeof $steps["runOnSave"].then === "function"
                ) {
                  $steps["runOnSave"] = await $steps["runOnSave"];
                }

                $steps["updateIsLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading2"] != null &&
                  typeof $steps["updateIsLoading2"] === "object" &&
                  typeof $steps["updateIsLoading2"].then === "function"
                ) {
                  $steps["updateIsLoading2"] = await $steps["updateIsLoading2"];
                }
              }}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8NWvg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.isLoading ? "صبر کنید..." : "ذخیره";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0630\u062e\u06cc\u0631\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Button>
          </Stack__>
        </Stack__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "nameInput", "keyInput", "embedInput", "embedInput2"],
  nameInput: ["nameInput"],
  keyInput: ["keyInput"],
  embedInput: ["embedInput"],
  embedInput2: ["embedInput2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nameInput: typeof Input;
  keyInput: typeof Input;
  embedInput: typeof Input;
  embedInput2: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuItem__VariantsArgs;
    args?: PlasmicMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenuItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuItem__ArgProps,
          internalVariantPropNames: PlasmicMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuItem";
  } else {
    func.displayName = `PlasmicMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItem = Object.assign(
  // Top-level PlasmicMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nameInput: makeNodeComponent("nameInput"),
    keyInput: makeNodeComponent("keyInput"),
    embedInput: makeNodeComponent("embedInput"),
    embedInput2: makeNodeComponent("embedInput2"),

    // Metadata about props expected for PlasmicMenuItem
    internalVariantProps: PlasmicMenuItem__VariantProps,
    internalArgProps: PlasmicMenuItem__ArgProps
  }
);

export default PlasmicMenuItem;
/* prettier-ignore-end */
