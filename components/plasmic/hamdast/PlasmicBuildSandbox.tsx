/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: eT9QQuVFBchb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicBuildSandbox.module.css"; // plasmic-import: eT9QQuVFBchb/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon
import Icon40Icon from "./icons/PlasmicIcon__Icon40"; // plasmic-import: RLm5CHqIuRxP/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import IconIcon from "../ravi_design_system/icons/PlasmicIcon__Icon"; // plasmic-import: 2uzLLHig1Vpp/icon

createPlasmicElementProxy;

export type PlasmicBuildSandbox__VariantMembers = {};
export type PlasmicBuildSandbox__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuildSandbox__VariantsArgs;
export const PlasmicBuildSandbox__VariantProps = new Array<VariantPropType>();

export type PlasmicBuildSandbox__ArgsType = {};
type ArgPropType = keyof PlasmicBuildSandbox__ArgsType;
export const PlasmicBuildSandbox__ArgProps = new Array<ArgPropType>();

export type PlasmicBuildSandbox__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  apiRequest?: Flex__<typeof ApiRequest>;
  ul?: Flex__<"ul">;
  apiRequest2?: Flex__<typeof ApiRequest>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
};

export interface DefaultBuildSandboxProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBuildSandbox__RenderFunc(props: {
  variants: PlasmicBuildSandbox__VariantsArgs;
  args: PlasmicBuildSandbox__ArgsType;
  overrides: PlasmicBuildSandbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBuildSandbox.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBuildSandbox.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBuildSandbox.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1][0].toUpperCase() +
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__qn3Gh,
                  "no-scroll"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kcUw0
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#0000003D" }}
                    >
                      {"\u0633\u0627\u062e\u062a / "}
                    </span>
                    <React.Fragment>
                      {"\u0633\u0646\u062f\u0628\u0627\u06a9\u0633"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <ApiRequest
                  data-plasmic-name={"apiRequest"}
                  data-plasmic-override={overrides.apiRequest}
                  className={classNames("__wab_instance", sty.apiRequest)}
                  errorDisplay={null}
                  loadingDisplay={
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg__l9PyC)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["apiRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/sandbox/`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rvYRk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cFb5N)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ncu8V
                        )}
                      >
                        {
                          "\u0645\u062d\u06cc\u0637 \u062a\u0633\u062a \u067e\u0632\u0634\u06a9"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ztP3W
                        )}
                      >
                        {
                          "\u0686\u0631\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9 \u062f\u0627\u0631\u0645\u061f"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__enqIj
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <ul
                              data-plasmic-name={"ul"}
                              data-plasmic-override={overrides.ul}
                              className={classNames(
                                projectcss.all,
                                projectcss.ul,
                                sty.ul
                              )}
                            >
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li__xUsob
                                )}
                              >
                                {
                                  "\u062a\u0648\u0633\u0639\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0628\u0631\u0627\u06cc \u067e\u0632\u0634\u06a9\u0627\u0646"
                                }
                              </li>
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li__r2HMf
                                )}
                              >
                                {
                                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u0648 \u062a\u0633\u062a \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627\u06cc \u067e\u0632\u0634\u06a9\u0627\u0646"
                                }
                              </li>
                              <li
                                className={classNames(
                                  projectcss.all,
                                  projectcss.li,
                                  projectcss.__wab_text,
                                  sty.li__yK7K
                                )}
                              >
                                {
                                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u0648 \u06a9\u0627\u0631 \u0628\u0627 \u067e\u0646\u0644 \u067e\u0632\u0634\u06a9\u0627\u0646"
                                }
                              </li>
                            </ul>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                    {(() => {
                      try {
                        return !!$state.apiRequest.data.slug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___70Hrg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pdWA
                          )}
                        >
                          <ApiRequest
                            data-plasmic-name={"apiRequest2"}
                            data-plasmic-override={overrides.apiRequest2}
                            className={classNames(
                              "__wab_instance",
                              sty.apiRequest2
                            )}
                            errorDisplay={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kGEpJ
                                )}
                              >
                                {"Error fetching data"}
                              </div>
                            }
                            loadingDisplay={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oknNb
                                )}
                              >
                                {"Loading..."}
                              </div>
                            }
                            method={"GET"}
                            onError={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "apiRequest2",
                                "error"
                              ]).apply(null, eventArgs);
                            }}
                            onLoading={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "apiRequest2",
                                "loading"
                              ]).apply(null, eventArgs);
                            }}
                            onSuccess={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "apiRequest2",
                                "data"
                              ]).apply(null, eventArgs);
                            }}
                            ref={ref => {
                              $refs["apiRequest2"] = ref;
                            }}
                            url={(() => {
                              try {
                                return `https://apigw.paziresh24.com/v1/full-profile/${$state.apiRequest.data.slug}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sqQNa
                              )}
                            >
                              <Paziresh24Avatar
                                data-plasmic-name={"paziresh24Avatar"}
                                data-plasmic-override={
                                  overrides.paziresh24Avatar
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.paziresh24Avatar
                                )}
                                src={(() => {
                                  try {
                                    return (
                                      "https://cdn.paziresh24.com" +
                                      $state.apiRequest2.data.data.image
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uo7Fu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___329RO
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.apiRequest2.data.data
                                          .display_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hn3Gm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.apiRequest2.data.data
                                            .expertises[0].alias_title ??
                                          `${
                                            $state.apiRequest2.data.data
                                              .expertises[0].degree.name ?? ""
                                          } ${
                                            $state.apiRequest2.data.data
                                              .expertises[0].expertise.name
                                          }`
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </ApiRequest>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bwgNs
                            )}
                          >
                            <Paziresh24Button
                              children2={
                                "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0639\u0645\u0648\u0645\u06cc"
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button__dUJeA
                              )}
                              link={(() => {
                                try {
                                  return $state.apiRequest.data.profile_url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              showStartIcon={true}
                              startIcon={
                                <Icon40Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__tuoUg
                                  )}
                                  role={"img"}
                                />
                              }
                              target={true}
                            />

                            <Paziresh24Button
                              children2={
                                "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button__bipT
                              )}
                              link={
                                "https://www.paziresh24.com/dashboard/profile/"
                              }
                              outline={true}
                              showStartIcon={true}
                              startIcon={
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oqsMr
                                  )}
                                  role={"img"}
                                />
                              }
                              target={true}
                            />
                          </div>
                        </div>
                        <Paziresh24Button
                          children2={
                            "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button___57GO6
                          )}
                          color={"red"}
                          loading={(() => {
                            try {
                              return $state.loading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateLoading"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading"] != null &&
                              typeof $steps["updateLoading"] === "object" &&
                              typeof $steps["updateLoading"].then === "function"
                            ) {
                              $steps["updateLoading"] = await $steps[
                                "updateLoading"
                              ];
                            }

                            $steps["deactiveSandbox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "DELETE",
                                      (() => {
                                        try {
                                          return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/sandbox/`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["deactiveSandbox"] != null &&
                              typeof $steps["deactiveSandbox"] === "object" &&
                              typeof $steps["deactiveSandbox"].then ===
                                "function"
                            ) {
                              $steps["deactiveSandbox"] = await $steps[
                                "deactiveSandbox"
                              ];
                            }

                            $steps["updateLoading2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading2"] != null &&
                              typeof $steps["updateLoading2"] === "object" &&
                              typeof $steps["updateLoading2"].then ===
                                "function"
                            ) {
                              $steps["updateLoading2"] = await $steps[
                                "updateLoading2"
                              ];
                            }

                            $steps["updateLoading3"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f. \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9 \u062d\u062f\u0627\u06a9\u062b\u0631 \u062a\u0627 \u06cc\u06a9 \u0633\u0627\u0639\u062a \u062f\u06cc\u06af\u0631 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u062e\u0648\u0627\u0647\u062f \u0634\u062f \u0648 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u0631\u0641\u0631\u0634 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0627\u0632 \u0648\u0636\u0639\u06cc\u062a \u0622\u0646 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f.",
                                      "top-center",
                                      15000
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading3"] != null &&
                              typeof $steps["updateLoading3"] === "object" &&
                              typeof $steps["updateLoading3"].then ===
                                "function"
                            ) {
                              $steps["updateLoading3"] = await $steps[
                                "updateLoading3"
                              ];
                            }
                          }}
                          startIcon={
                            <Icon40Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ynfB
                              )}
                              role={"img"}
                            />
                          }
                        />
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return !$state.apiRequest.data.slug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l8MVh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oBoKh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kqiBx
                            )}
                          >
                            {
                              "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9\u060c \u062d\u0633\u0627\u0628 \u0641\u0639\u0644\u06cc \u0634\u0645\u0627 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u067e\u0632\u0634\u06a9 \u062a\u0639\u0631\u06cc\u0641 \u062e\u0648\u0627\u0647\u062f \u0634\u062f \u0648 \u0645\u0645\u06a9\u0646 \u0627\u0633\u062a \u0628\u0631\u062e\u06cc \u0627\u0632 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0633\u0627\u06cc\u062a \u0628\u0647 \u0637\u0648\u0631 \u0645\u062a\u0641\u0627\u0648\u062a\u06cc \u06a9\u0627\u0631 \u06cc\u0627 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0634\u0648\u0646\u062f."
                            }
                          </div>
                        </div>
                        <Paziresh24Button
                          children2={
                            "\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button__nofdr
                          )}
                          loading={(() => {
                            try {
                              return $state.loading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateLoading"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading"] != null &&
                              typeof $steps["updateLoading"] === "object" &&
                              typeof $steps["updateLoading"].then === "function"
                            ) {
                              $steps["updateLoading"] = await $steps[
                                "updateLoading"
                              ];
                            }

                            $steps["activeSandbox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PATCH",
                                      (() => {
                                        try {
                                          return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/sandbox/`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["activeSandbox"] != null &&
                              typeof $steps["activeSandbox"] === "object" &&
                              typeof $steps["activeSandbox"].then === "function"
                            ) {
                              $steps["activeSandbox"] = await $steps[
                                "activeSandbox"
                              ];
                            }

                            $steps["updateLoading2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading2"] != null &&
                              typeof $steps["updateLoading2"] === "object" &&
                              typeof $steps["updateLoading2"].then ===
                                "function"
                            ) {
                              $steps["updateLoading2"] = await $steps[
                                "updateLoading2"
                              ];
                            }

                            $steps["updateLoading3"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f. \u0633\u0646\u062f\u0628\u0627\u06a9\u0633 \u067e\u0632\u0634\u06a9 \u062d\u062f\u0627\u06a9\u062b\u0631 \u062a\u0627 \u06cc\u06a9 \u0633\u0627\u0639\u062a \u062f\u06cc\u06af\u0631 \u0641\u0639\u0627\u0644 \u062e\u0648\u0627\u0647\u062f \u0634\u062f \u0648 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u0631\u0641\u0631\u0634 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0627\u0632 \u0648\u0636\u0639\u06cc\u062a \u0622\u0646 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f.",
                                      "top-center",
                                      15000
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading3"] != null &&
                              typeof $steps["updateLoading3"] === "object" &&
                              typeof $steps["updateLoading3"].then ===
                                "function"
                            ) {
                              $steps["updateLoading3"] = await $steps[
                                "updateLoading3"
                              ];
                            }
                          }}
                          startIcon={
                            <Icon40Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pxl0S
                              )}
                              role={"img"}
                            />
                          }
                        />
                      </div>
                    ) : null}
                  </div>
                </ApiRequest>
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "apiRequest",
    "ul",
    "apiRequest2",
    "paziresh24Avatar"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "apiRequest",
    "ul",
    "apiRequest2",
    "paziresh24Avatar"
  ],
  layout: ["layout", "apiRequest", "ul", "apiRequest2", "paziresh24Avatar"],
  apiRequest: ["apiRequest", "ul", "apiRequest2", "paziresh24Avatar"],
  ul: ["ul"],
  apiRequest2: ["apiRequest2", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  apiRequest: typeof ApiRequest;
  ul: "ul";
  apiRequest2: typeof ApiRequest;
  paziresh24Avatar: typeof Paziresh24Avatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuildSandbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuildSandbox__VariantsArgs;
    args?: PlasmicBuildSandbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuildSandbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBuildSandbox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBuildSandbox__ArgProps,
          internalVariantPropNames: PlasmicBuildSandbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBuildSandbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuildSandbox";
  } else {
    func.displayName = `PlasmicBuildSandbox.${nodeName}`;
  }
  return func;
}

export const PlasmicBuildSandbox = Object.assign(
  // Top-level PlasmicBuildSandbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    apiRequest: makeNodeComponent("apiRequest"),
    ul: makeNodeComponent("ul"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),

    // Metadata about props expected for PlasmicBuildSandbox
    internalVariantProps: PlasmicBuildSandbox__VariantProps,
    internalArgProps: PlasmicBuildSandbox__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "سندباکس",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBuildSandbox;
/* prettier-ignore-end */
