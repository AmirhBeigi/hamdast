/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bE9NMB942w5e6uFrcCxfJN
// Component: thJ-D6wl_-t8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AuthProvider from "../../AuthProvider"; // plasmic-import: KTPu1eZupEdG/component
import Layout from "../../Layout"; // plasmic-import: ve2FygUyzJYe/component
import StepsStep from "../../StepsStep"; // plasmic-import: okFwmoO5wft_/component
import StepsLine from "../../StepsLine"; // plasmic-import: 7HfoWBpGiHw6/component
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { Input } from "@/fragment/components/input"; // plasmic-import: AWE69UKwmIyg/codeComponent
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: WP6AANBbVJxr/codeComponent
import { TiptapWrapper } from "@plasmicpkgs/tiptap/skinny/registerTiptap";
import { Bold } from "@plasmicpkgs/tiptap/skinny/registerBold";
import { Italic } from "@plasmicpkgs/tiptap/skinny/registerItalic";
import { Underline } from "@plasmicpkgs/tiptap/skinny/registerUnderline";
import { Strike } from "@plasmicpkgs/tiptap/skinny/registerStrike";
import { ToolbarBold } from "@plasmicpkgs/tiptap/skinny/registerToolbarBold";
import { ToolbarItalic } from "@plasmicpkgs/tiptap/skinny/registerToolbarItalic";
import { ToolbarUnderline } from "@plasmicpkgs/tiptap/skinny/registerToolbarUnderline";
import { ToolbarStrike } from "@plasmicpkgs/tiptap/skinny/registerToolbarStrike";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bE9NMB942w5e6uFrcCxfJN/projectcss
import sty from "./PlasmicBuildFeatures.module.css"; // plasmic-import: thJ-D6wl_-t8/css

import Icon46Icon from "./icons/PlasmicIcon__Icon46"; // plasmic-import: Xk8YvYWkFI4c/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ly5Yl8idG7m1/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: YMCrtcU6nV3I/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: UuDHOUXMn1lI/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: uOAzx9LtQ5_I/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: LAq9m_Cnv9ai/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: rQsx35tf_bcf/icon

createPlasmicElementProxy;

export type PlasmicBuildFeatures__VariantMembers = {};
export type PlasmicBuildFeatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuildFeatures__VariantsArgs;
export const PlasmicBuildFeatures__VariantProps = new Array<VariantPropType>();

export type PlasmicBuildFeatures__ArgsType = {};
type ArgPropType = keyof PlasmicBuildFeatures__ArgsType;
export const PlasmicBuildFeatures__ArgProps = new Array<ArgPropType>();

export type PlasmicBuildFeatures__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  authProvider?: Flex__<typeof AuthProvider>;
  layout?: Flex__<typeof Layout>;
  dialog3?: Flex__<typeof Paziresh24Modal>;
  displayNameFa2?: Flex__<typeof Input>;
  description2?: Flex__<typeof Input>;
  embedSrc2?: Flex__<typeof Input>;
  dialog2?: Flex__<typeof Paziresh24Modal>;
  landingTitle?: Flex__<typeof Input>;
  landingDescription?: Flex__<typeof TiptapWrapper>;
  landingFeatures?: Flex__<typeof Input>;
  landingButtonText?: Flex__<typeof Input>;
  dialog4?: Flex__<typeof Paziresh24Modal>;
  landingTitle2?: Flex__<typeof Input>;
  landingDescription2?: Flex__<typeof TiptapWrapper>;
  landingFeatures2?: Flex__<typeof Input>;
  landingButtonText2?: Flex__<typeof Input>;
  userPageRequest?: Flex__<typeof ApiRequest>;
  landingPageRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultBuildFeaturesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBuildFeatures__RenderFunc(props: {
  variants: PlasmicBuildFeatures__VariantsArgs;
  args: PlasmicBuildFeatures__ArgsType;
  overrides: PlasmicBuildFeatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "authProvider.user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "authProvider.apps",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userPageRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPageRequest"
      },
      {
        path: "userPageRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPageRequest"
      },
      {
        path: "userPageRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "userPageRequest"
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "landingTitle.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "landingFeatures.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.features?.join(" | ");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "landingButtonText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.button_text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "landingDescription.content",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "landingPageRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "landingPageRequest"
      },
      {
        path: "landingPageRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "landingPageRequest"
      },
      {
        path: "landingPageRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "landingPageRequest"
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "displayNameFa2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "description2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "embedSrc2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "intialData",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "landingTitle2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "landingDescription2.content",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "landingFeatures2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.features?.join(" | ");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "landingButtonText2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.landingPageRequest.data?.button_text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBuildFeatures.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBuildFeatures.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBuildFeatures.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
          dir={"rtl"}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<link\r\n  rel="stylesheet"\r\n  href="https://hamdast.paziresh24.com/static/player/style.css"\r\n/>\r\n<script src="https://hamdast.paziresh24.com/static/player/index.js"></script>'
            }
          />

          <AuthProvider
            data-plasmic-name={"authProvider"}
            data-plasmic-override={overrides.authProvider}
            className={classNames("__wab_instance", sty.authProvider)}
            onAppsChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "apps"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onUserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["authProvider", "user"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return undefined;
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
          >
            <Layout
              data-plasmic-name={"layout"}
              data-plasmic-override={overrides.layout}
              apps={(() => {
                try {
                  return $state.authProvider.apps;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.layout)}
              selectedApp={(() => {
                try {
                  return $ctx.params.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              selectedMenu={(() => {
                try {
                  return (
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1][0].toUpperCase() +
                    $ctx.pageRoute
                      .split("/")
                      [$ctx.pageRoute.split("/")?.length - 1].slice(1)
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              user={(() => {
                try {
                  return $state.authProvider.user;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__cOmFt,
                  "no-scroll"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pCff8
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#0000003D" }}
                    >
                      {"\u0633\u0627\u062e\u062a / "}
                    </span>
                    <React.Fragment>
                      {"\u0648\u06cc\u0698\u06af\u06cc \u0647\u0627"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return (
                      (!$state.userPageRequest.loading &&
                        !$state.landingPageRequest.loading) ||
                      $state.intialData
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c5ItS)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pff0E)}
                    >
                      <StepsStep
                        active={true}
                        className={classNames(
                          "__wab_instance",
                          sty.stepsStep__yP1Rv
                        )}
                      />

                      <StepsLine
                        active={(() => {
                          try {
                            return !!$state.userPageRequest.data.embed_src;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.stepsLine___0ZApv
                        )}
                      />

                      <StepsStep
                        active={(() => {
                          try {
                            return !!$state.userPageRequest.data.embed_src;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.stepsStep__dwIci
                        )}
                        number={"2"}
                      />

                      <StepsLine
                        active={(() => {
                          try {
                            return !!$state.landingPageRequest?.data?.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.stepsLine___0SrwT
                        )}
                        dashed={true}
                      />

                      <StepsStep
                        className={classNames(
                          "__wab_instance",
                          sty.stepsStep__xz5Na
                        )}
                        number={"3"}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___184TI
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__avrln
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bXa7O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0Ysl
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nBiij
                              )}
                            >
                              <Icon46Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h3LP
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mFzUn
                                )}
                              >
                                {
                                  "\u0635\u0641\u062d\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9"
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oxuyW
                              )}
                            >
                              {
                                "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0635\u0641\u062d\u0647 \u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0628\u0632\u0627\u0631\u06a9 \u06cc\u0627 \u0635\u0641\u062d\u0647 \u0627\u06cc \u06a9\u0647 \u06a9\u0627\u0631\u0628\u0631 \u0628\u0627 \u0622\u0646 \u062a\u0639\u0627\u0645\u0644 \u0645\u06cc\u200c\u06a9\u0646\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__k08Te
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__q6Ci
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = !!$state.userPageRequest
                                  .data.embed_src
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return globalThis.open(
                                            `https://www.paziresh24.com/_/${
                                              $state.authProvider.apps?.find(
                                                item =>
                                                  item.id == $ctx.params.id
                                              )?.key
                                            }/launcher/`
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["invokeGlobalAction"] = !$state
                                  .userPageRequest.data.embed_src
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0644\u06cc\u0646\u06a9\u06cc \u0647\u0646\u0648\u0632 \u062a\u0646\u0638\u06cc\u0645 \u0646\u0634\u062f\u0647 \u0627\u0633\u062a.",
                                          "top-center"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__pPxaM)}
                                displayHeight={"40px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"40px"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return (
                                      $state.userPageRequest?.data?.icon ??
                                      "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fdefault.png?versionId="
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fdefault.png?versionId=";
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__on6Oo
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__loVwu
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.userPageRequest?.data
                                            ?.display_name_fa ??
                                          $state.displayNameFa2?.value ??
                                          "عنوان"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0639\u0646\u0648\u0627\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___23Vfl
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.userPageRequest?.data
                                            ?.description ??
                                          $state?.description2?.value ??
                                          "زیرعنوان"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0632\u06cc\u0631\u0639\u0646\u0648\u0627\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__teZx4
                            )}
                          >
                            <Paziresh24Modal
                              data-plasmic-name={"dialog3"}
                              data-plasmic-override={overrides.dialog3}
                              body={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tbsBy
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__obKjd
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__l09Dv
                                      )}
                                    >
                                      {
                                        "\u0646\u0627\u0645 \u0646\u0645\u0627\u06cc\u0634\u06cc"
                                      }
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xdBnm
                                      )}
                                    >
                                      {
                                        "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0634\u0645\u0627 \u0631\u0627 \u0628\u0627 \u0627\u06cc\u0646 \u0646\u0627\u0645 \u0645\u06cc\u200c\u0628\u06cc\u0646\u0646\u062f\r.\r"
                                      }
                                    </div>
                                    <Input
                                      data-plasmic-name={"displayNameFa2"}
                                      data-plasmic-override={
                                        overrides.displayNameFa2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.displayNameFa2
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "displayNameFa2",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      placeholder={
                                        "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645"
                                      }
                                      type={"text"}
                                      value={generateStateValueProp($state, [
                                        "displayNameFa2",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___08K3C
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jHbGs
                                      )}
                                    >
                                      {
                                        "\u0632\u06cc\u0631 \u0639\u0646\u0648\u0627\u0646\r"
                                      }
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__nd3Zn
                                      )}
                                    >
                                      {
                                        "\u0645\u062a\u0646\u06cc \u06a9\u0648\u062a\u0627\u0647 \u06a9\u0647 \u0632\u06cc\u0631 \u0646\u0627\u0645 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0634\u0645\u0627 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u200c\u0645\u06cc\u200c\u0634\u0648\u062f.\r\n\r"
                                      }
                                    </div>
                                    <Input
                                      data-plasmic-name={"description2"}
                                      data-plasmic-override={
                                        overrides.description2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.description2
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "description2",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      placeholder={
                                        "\u0627\u0641\u0632\u0648\u062f\u0646 \u067e\u0633\u062a\u200c\u0647\u0627\u06cc \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645 \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9"
                                      }
                                      type={"text"}
                                      value={generateStateValueProp($state, [
                                        "description2",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__k3We
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ope35
                                      )}
                                    >
                                      {
                                        "\u0644\u06cc\u0646\u06a9 \u0635\u0641\u062d\u0647"
                                      }
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__coEY
                                      )}
                                    >
                                      {
                                        "\u06a9\u0627\u0631\u0628\u0631 \u062f\u0631 \u0632\u0645\u0627\u0646 \u0634\u0631\u0648\u0639 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0634\u0645\u0627 \u0628\u0647 \u0627\u06cc\u0646 \u0622\u062f\u0631\u0633 \u0647\u062f\u0627\u06cc\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f. \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u0634\u0627\u0645\u0644 \u067e\u0627\u0631\u0627\u0645\u062a\u0631\u0647\u0627\u06cc \u06a9\u0648\u0626\u0631\u06cc \u0628\u0627\u0634\u062f.\r\n\r"
                                      }
                                    </div>
                                    <Input
                                      data-plasmic-name={"embedSrc2"}
                                      data-plasmic-override={
                                        overrides.embedSrc2
                                      }
                                      attributes={(() => {
                                        try {
                                          return {
                                            dir: "ltr"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.embedSrc2
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "embedSrc2",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      placeholder={"https://"}
                                      type={"text"}
                                      value={generateStateValueProp($state, [
                                        "embedSrc2",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                  <Paziresh24Button
                                    children2={"\u062b\u0628\u062a"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.paziresh24Button__tcq8C
                                    )}
                                    isDisabled={(() => {
                                      try {
                                        return (
                                          !$state.displayNameFa2.value ||
                                          !$state.description2.value ||
                                          !$state.embedSrc2.value
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    loading={(() => {
                                      try {
                                        return $state.loadingButton;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateLoadingButton"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loadingButton"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoadingButton"] != null &&
                                        typeof $steps["updateLoadingButton"] ===
                                          "object" &&
                                        typeof $steps["updateLoadingButton"]
                                          .then === "function"
                                      ) {
                                        $steps["updateLoadingButton"] =
                                          await $steps["updateLoadingButton"];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "POST",
                                                (() => {
                                                  try {
                                                    return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/features/user-page`;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                undefined,
                                                (() => {
                                                  try {
                                                    return {
                                                      display_name_fa:
                                                        $state.displayNameFa2
                                                          .value,
                                                      description:
                                                        $state.description2
                                                          .value,
                                                      embed_src:
                                                        $state.embedSrc2.value
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.apiRequest"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }

                                      $steps["updateLoadingButton3"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              tplRef: "userPageRequest",
                                              action: "refresh"
                                            };
                                            return (({
                                              tplRef,
                                              action,
                                              args
                                            }) => {
                                              return $refs?.[tplRef]?.[
                                                action
                                              ]?.(...(args ?? []));
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoadingButton3"] !=
                                          null &&
                                        typeof $steps[
                                          "updateLoadingButton3"
                                        ] === "object" &&
                                        typeof $steps["updateLoadingButton3"]
                                          .then === "function"
                                      ) {
                                        $steps["updateLoadingButton3"] =
                                          await $steps["updateLoadingButton3"];
                                      }

                                      $steps["updateLoadingButton2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loadingButton"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoadingButton2"] !=
                                          null &&
                                        typeof $steps[
                                          "updateLoadingButton2"
                                        ] === "object" &&
                                        typeof $steps["updateLoadingButton2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateLoadingButton2"] =
                                          await $steps["updateLoadingButton2"];
                                      }

                                      $steps["updateDialogOpen"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "dialog3",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateDialogOpen"] != null &&
                                        typeof $steps["updateDialogOpen"] ===
                                          "object" &&
                                        typeof $steps["updateDialogOpen"]
                                          .then === "function"
                                      ) {
                                        $steps["updateDialogOpen"] =
                                          await $steps["updateDialogOpen"];
                                      }

                                      $steps["updateDialogOpen2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                                "top-center"
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateDialogOpen2"] != null &&
                                        typeof $steps["updateDialogOpen2"] ===
                                          "object" &&
                                        typeof $steps["updateDialogOpen2"]
                                          .then === "function"
                                      ) {
                                        $steps["updateDialogOpen2"] =
                                          await $steps["updateDialogOpen2"];
                                      }
                                    }}
                                  />
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.dialog3
                              )}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "dialog3",
                                  "open"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async val => {
                                  const $steps = {};

                                  $steps["updateDisplayNameFa2Value"] =
                                    $state.dialog3.open == true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "displayNameFa2",
                                                "value"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              $state.userPageRequest.data
                                                ?.display_name_fa
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateDisplayNameFa2Value"] !=
                                      null &&
                                    typeof $steps[
                                      "updateDisplayNameFa2Value"
                                    ] === "object" &&
                                    typeof $steps["updateDisplayNameFa2Value"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDisplayNameFa2Value"] =
                                      await $steps["updateDisplayNameFa2Value"];
                                  }

                                  $steps["updateDescription2Value"] =
                                    $state.dialog3?.open == true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "description2",
                                                "value"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              $state.userPageRequest.data
                                                ?.description
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateDescription2Value"] != null &&
                                    typeof $steps["updateDescription2Value"] ===
                                      "object" &&
                                    typeof $steps["updateDescription2Value"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDescription2Value"] =
                                      await $steps["updateDescription2Value"];
                                  }

                                  $steps["updateEmbedSrc2Value"] = $state
                                    .dialog3?.open
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["embedSrc2", "value"]
                                          },
                                          operation: 0,
                                          value:
                                            $state.userPageRequest.data
                                              ?.embed_src
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateEmbedSrc2Value"] != null &&
                                    typeof $steps["updateEmbedSrc2Value"] ===
                                      "object" &&
                                    typeof $steps["updateEmbedSrc2Value"]
                                      .then === "function"
                                  ) {
                                    $steps["updateEmbedSrc2Value"] =
                                      await $steps["updateEmbedSrc2Value"];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              open={generateStateValueProp($state, [
                                "dialog3",
                                "open"
                              ])}
                              title={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__teJ4
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hf8Xf
                                    )}
                                  >
                                    {
                                      "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0635\u0641\u062d\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__om4Pf
                                    )}
                                  >
                                    {
                                      "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0635\u0641\u062d\u0647 \u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0627\u0628\u0632\u0627\u0631\u06a9 \u06cc\u0627 \u0635\u0641\u062d\u0647 \u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0628\u0627 \u0622\u0646 \u062a\u0639\u0627\u0645\u0644 \u0645\u06cc\u200c\u06a9\u0646\u062f \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                                    }
                                  </div>
                                </div>
                              }
                              trigger={
                                <Paziresh24Button
                                  children2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__u7PPm
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.userPageRequest.data
                                              .display_name_fa
                                              ? "ویرایش اطلاعات"
                                              : "راه‌اندازی صفحه";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0635\u0641\u062d\u0647";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paziresh24Button__lXbVi
                                  )}
                                  loading={(() => {
                                    try {
                                      return $state.userPageRequest.loading;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  outline={(() => {
                                    try {
                                      return !!$state.userPageRequest.data
                                        .display_name_fa;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  showStartIcon={true}
                                  size={"compact"}
                                  startIcon={
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return !$state.userPageRequest.data
                                            .display_name_fa;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Icon9Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__vwWk
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                      {(() => {
                                        try {
                                          return $state.userPageRequest.data
                                            .display_name_fa;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Icon9Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__d6XJu
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                    </React.Fragment>
                                  }
                                />
                              }
                            />
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dqxqU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__a1AJ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hbob
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pR0J
                              )}
                            >
                              <Icon47Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__l5YtY
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zgXJe
                                )}
                              >
                                {
                                  "\u0635\u0641\u062d\u0647 \u0644\u0646\u062f\u06cc\u0646\u06af"
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d5Gh1
                              )}
                            >
                              {
                                "\u0635\u0641\u062d\u0647 \u0644\u0646\u062f\u06cc\u0646\u06af \u0642\u0628\u0644 \u0627\u0632 \u0628\u0627\u0632 \u0634\u062f\u0646 \u0635\u0641\u062d\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                              }
                            </div>
                          </div>
                          <Paziresh24Modal
                            data-plasmic-name={"dialog2"}
                            data-plasmic-override={overrides.dialog2}
                            body={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7Mjl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mtT7V
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__w8YvC
                                    )}
                                  >
                                    {"\u0639\u0646\u0648\u0627\u0646"}
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingTitle"}
                                    data-plasmic-override={
                                      overrides.landingTitle
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingTitle
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingTitle",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0647\u0645\u06cc\u0627\u0631 | \u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0646\u0634\u06cc"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingTitle",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___52VmW
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__m8Eqg
                                    )}
                                  >
                                    {
                                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"
                                    }
                                  </div>
                                  <TiptapWrapper
                                    data-plasmic-name={"landingDescription"}
                                    data-plasmic-override={
                                      overrides.landingDescription
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingDescription
                                    )}
                                    contentHtml={(() => {
                                      try {
                                        return (
                                          $state.landingPageRequest.data
                                            ?.description ?? ""
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    contentJson={generateStateValueProp(
                                      $state,
                                      ["landingDescription", "content"]
                                    )}
                                    extensions={
                                      <React.Fragment>
                                        <Bold
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapBold___2Ek6I
                                          )}
                                        />

                                        <Italic
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapItalic__z1EKc
                                          )}
                                        />

                                        <Underline
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapUnderline__r849Z
                                          )}
                                        />

                                        <Strike
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapStrike__pv6Lu
                                          )}
                                        />
                                      </React.Fragment>
                                    }
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingDescription",
                                        "content"
                                      ]).apply(null, eventArgs);
                                    }}
                                    toolbar={
                                      <React.Fragment>
                                        <ToolbarBold
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapBoldToolbarOption__c4ZLl
                                          )}
                                          toolbarBoldScopeClassName={
                                            sty[
                                              "tiptapBoldToolbarOption__c4ZLl__toolbarBold"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__gUcPr
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/bold.svg"
                                            }
                                          />
                                        </ToolbarBold>
                                        <ToolbarItalic
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapItalicToolbarOption__fdRvZ
                                          )}
                                          toolbarItalicScopeClassName={
                                            sty[
                                              "tiptapItalicToolbarOption__fdRvZ__toolbarItalic"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__hGzvQ
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/italic.svg"
                                            }
                                          />
                                        </ToolbarItalic>
                                        <ToolbarUnderline
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapUnderlineToolbarOption__ye6HN
                                          )}
                                          toolbarUnderlineScopeClassName={
                                            sty[
                                              "tiptapUnderlineToolbarOption__ye6HN__toolbarUnderline"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__yFz0P
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/underline.svg"
                                            }
                                          />
                                        </ToolbarUnderline>
                                        <ToolbarStrike
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapStrikeToolbarOption___42Gsr
                                          )}
                                          toolbarStrikeScopeClassName={
                                            sty[
                                              "tiptapStrikeToolbarOption___42Gsr__toolbarStrike"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img___19P3N
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/strikethrough.svg"
                                            }
                                          />
                                        </ToolbarStrike>
                                      </React.Fragment>
                                    }
                                    useJson={false}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5UaTp
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cDn9R
                                    )}
                                  >
                                    {
                                      "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a/\u0645\u0632\u0627\u06cc\u0627"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__efAl
                                    )}
                                  >
                                    {
                                      "\u0628\u0627 | \u0627\u0632 \u0647\u0645 \u062c\u062f\u0627 \u06a9\u0646\u06cc\u062f."
                                    }
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingFeatures"}
                                    data-plasmic-override={
                                      overrides.landingFeatures
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingFeatures
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingFeatures",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0646\u0645\u0627\u06cc\u0634 \u062f\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 | \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0628\u062f\u0648\u0646 \u0627\u0641\u0634\u0627\u06cc \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc | \u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0633\u0631\u06cc\u0639 \u0628\u0627 \u06cc\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u062f\u0647"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingFeatures",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ndLoJ
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__npx6M
                                    )}
                                  >
                                    {
                                      "\u0645\u062a\u0646 \u062f\u06a9\u0645\u0647"
                                    }
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingButtonText"}
                                    data-plasmic-override={
                                      overrides.landingButtonText
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingButtonText
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingButtonText",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0648\u0631\u0648\u062f \u0628\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingButtonText",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <Paziresh24Button
                                  children2={"\u062b\u0628\u062a"}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paziresh24Button___3C0Ow
                                  )}
                                  isDisabled={(() => {
                                    try {
                                      return (
                                        !$state.landingTitle.value ||
                                        !$state.landingDescription.content ||
                                        !$state.landingFeatures.value ||
                                        !$state.landingButtonText.value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  loading={(() => {
                                    try {
                                      return $state.loadingButton;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateLoadingButton"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadingButton"] != null &&
                                      typeof $steps["updateLoadingButton"] ===
                                        "object" &&
                                      typeof $steps["updateLoadingButton"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadingButton"] =
                                        await $steps["updateLoadingButton"];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              (() => {
                                                try {
                                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/features/landing-page`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    title:
                                                      $state.landingTitle.value,
                                                    description:
                                                      $state.landingDescription
                                                        ?.content?.content?.[0]
                                                        ?.content?.[0]?.text,
                                                    features:
                                                      $state.landingFeatures.value
                                                        ?.split?.("|")
                                                        ?.map?.(item =>
                                                          item.trim()
                                                        ),
                                                    button_text:
                                                      $state.landingButtonText
                                                        .value
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["updateLoadingButton2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadingButton2"] != null &&
                                      typeof $steps["updateLoadingButton2"] ===
                                        "object" &&
                                      typeof $steps["updateLoadingButton2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadingButton2"] =
                                        await $steps["updateLoadingButton2"];
                                    }

                                    $steps["updateDialogOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["dialog2", "open"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogOpen"] != null &&
                                      typeof $steps["updateDialogOpen"] ===
                                        "object" &&
                                      typeof $steps["updateDialogOpen"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDialogOpen"] = await $steps[
                                        "updateDialogOpen"
                                      ];
                                    }

                                    $steps["updateDialogOpen2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                              "top-center"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogOpen2"] != null &&
                                      typeof $steps["updateDialogOpen2"] ===
                                        "object" &&
                                      typeof $steps["updateDialogOpen2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDialogOpen2"] =
                                        await $steps["updateDialogOpen2"];
                                    }
                                  }}
                                />
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.dialog2
                            )}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "dialog2",
                                "open"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            open={generateStateValueProp($state, [
                              "dialog2",
                              "open"
                            ])}
                            title={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__epTm
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lmr17
                                  )}
                                >
                                  {
                                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0635\u0641\u062d\u0647 \u0644\u0646\u062f\u06cc\u0646\u06af"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eLqRf
                                  )}
                                >
                                  {
                                    "\u0635\u0641\u062d\u0647 \u0644\u0646\u062f\u06cc\u0646\u06af \u0642\u0628\u0644 \u0627\u0632 \u0628\u0627\u0632 \u0634\u062f\u0646 \u0635\u0641\u062d\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0627\u0628\u0632\u0627\u0631\u06a9 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                                  }
                                </div>
                              </div>
                            }
                            trigger={
                              <Paziresh24Button
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vB6Zl
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.landingPageRequest.data
                                            .id
                                            ? "ویرایش لندینگ"
                                            : "راه‌اندازی لندینگ";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0644\u0646\u062f\u06cc\u0646\u06af";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.paziresh24Button__yjGut
                                )}
                                outline={(() => {
                                  try {
                                    return !!$state.landingPageRequest.data.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                showStartIcon={true}
                                size={"compact"}
                                startIcon={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return !$state.landingPageRequest?.data
                                          ?.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Icon9Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__d2U5H
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                    {(() => {
                                      try {
                                        return !!$state.landingPageRequest?.data
                                          ?.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Icon9Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__rgBri
                                        )}
                                        role={"img"}
                                      />
                                    ) : null}
                                  </React.Fragment>
                                }
                              />
                            }
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hw8J
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fDccl
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dAdRz
                          )}
                        >
                          {
                            "\u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0632\u06cc\u0631 \u0631\u0627 \u0628\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9 \u062e\u0648\u062f \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sctFy
                          )}
                        >
                          <Paziresh24Modal
                            data-plasmic-name={"dialog4"}
                            data-plasmic-override={overrides.dialog4}
                            body={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__tf7Hj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wnzv3
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ahZGx
                                    )}
                                  >
                                    {"\u0639\u0646\u0648\u0627\u0646"}
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingTitle2"}
                                    data-plasmic-override={
                                      overrides.landingTitle2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingTitle2
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingTitle2",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0647\u0645\u06cc\u0627\u0631 | \u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0646\u0634\u06cc"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingTitle2",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__lPaHz
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___82X
                                    )}
                                  >
                                    {
                                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"
                                    }
                                  </div>
                                  <TiptapWrapper
                                    data-plasmic-name={"landingDescription2"}
                                    data-plasmic-override={
                                      overrides.landingDescription2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingDescription2
                                    )}
                                    contentHtml={(() => {
                                      try {
                                        return (
                                          $state.landingPageRequest.data
                                            ?.description ?? ""
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    contentJson={generateStateValueProp(
                                      $state,
                                      ["landingDescription2", "content"]
                                    )}
                                    extensions={
                                      <React.Fragment>
                                        <Bold
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapBold__xOt9
                                          )}
                                        />

                                        <Italic
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapItalic__iXdPp
                                          )}
                                        />

                                        <Underline
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapUnderline__r2SAj
                                          )}
                                        />

                                        <Strike
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapStrike___4NA5X
                                          )}
                                        />
                                      </React.Fragment>
                                    }
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingDescription2",
                                        "content"
                                      ]).apply(null, eventArgs);
                                    }}
                                    toolbar={
                                      <React.Fragment>
                                        <ToolbarBold
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapBoldToolbarOption__d6Xc
                                          )}
                                          toolbarBoldScopeClassName={
                                            sty[
                                              "tiptapBoldToolbarOption__d6Xc__toolbarBold"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__x0Mva
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/bold.svg"
                                            }
                                          />
                                        </ToolbarBold>
                                        <ToolbarItalic
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapItalicToolbarOption__bi8Uc
                                          )}
                                          toolbarItalicScopeClassName={
                                            sty[
                                              "tiptapItalicToolbarOption__bi8Uc__toolbarItalic"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__x6Hc
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/italic.svg"
                                            }
                                          />
                                        </ToolbarItalic>
                                        <ToolbarUnderline
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapUnderlineToolbarOption__wHjEn
                                          )}
                                          toolbarUnderlineScopeClassName={
                                            sty[
                                              "tiptapUnderlineToolbarOption__wHjEn__toolbarUnderline"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img___7JhTj
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/underline.svg"
                                            }
                                          />
                                        </ToolbarUnderline>
                                        <ToolbarStrike
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tiptapStrikeToolbarOption__sDNxC
                                          )}
                                          toolbarStrikeScopeClassName={
                                            sty[
                                              "tiptapStrikeToolbarOption__sDNxC__toolbarStrike"
                                            ]
                                          }
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img___4Szg5
                                            )}
                                            displayHeight={"auto"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"none"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"auto"}
                                            src={
                                              "https://static1.plasmic.app/strikethrough.svg"
                                            }
                                          />
                                        </ToolbarStrike>
                                      </React.Fragment>
                                    }
                                    useJson={false}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rXbni
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cxWzZ
                                    )}
                                  >
                                    {
                                      "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a/\u0645\u0632\u0627\u06cc\u0627"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__q1ZsT
                                    )}
                                  >
                                    {
                                      "\u0628\u0627 | \u0627\u0632 \u0647\u0645 \u062c\u062f\u0627 \u06a9\u0646\u06cc\u062f."
                                    }
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingFeatures2"}
                                    data-plasmic-override={
                                      overrides.landingFeatures2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingFeatures2
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingFeatures2",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0646\u0645\u0627\u06cc\u0634 \u062f\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9 | \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u062a\u0645\u0627\u0633 \u0628\u062f\u0648\u0646 \u0627\u0641\u0634\u0627\u06cc \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc | \u0631\u0627\u0647\u200c\u0627\u0646\u062f\u0627\u0632\u06cc \u0633\u0631\u06cc\u0639 \u0628\u0627 \u06cc\u06a9 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u062f\u0647"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingFeatures2",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vcHwU
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dKdn5
                                    )}
                                  >
                                    {
                                      "\u0645\u062a\u0646 \u062f\u06a9\u0645\u0647"
                                    }
                                  </div>
                                  <Input
                                    data-plasmic-name={"landingButtonText2"}
                                    data-plasmic-override={
                                      overrides.landingButtonText2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.landingButtonText2
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "landingButtonText2",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0648\u0631\u0648\u062f \u0628\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9"
                                    }
                                    type={"text"}
                                    value={generateStateValueProp($state, [
                                      "landingButtonText2",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <Paziresh24Button
                                  children2={"\u062b\u0628\u062a"}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paziresh24Button__gWz5
                                  )}
                                  isDisabled={(() => {
                                    try {
                                      return (
                                        !$state.landingTitle2.value ||
                                        !$state.landingDescription2.content ||
                                        !$state.landingFeatures2.value ||
                                        !$state.landingButtonText2.value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  loading={(() => {
                                    try {
                                      return $state.loadingButton;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateLoadingButton"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadingButton"] != null &&
                                      typeof $steps["updateLoadingButton"] ===
                                        "object" &&
                                      typeof $steps["updateLoadingButton"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadingButton"] =
                                        await $steps["updateLoadingButton"];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              (() => {
                                                try {
                                                  return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/features/landing-page`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    title:
                                                      $state.landingTitle2
                                                        .value,
                                                    description:
                                                      $state.landingDescription2
                                                        ?.content?.content?.[0]
                                                        ?.content?.[0]?.text,
                                                    features:
                                                      $state.landingFeatures2.value
                                                        ?.split?.("|")
                                                        ?.map?.(item =>
                                                          item.trim()
                                                        ),
                                                    button_text:
                                                      $state.landingButtonText2
                                                        .value
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["updateLoadingButton2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loadingButton"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoadingButton2"] != null &&
                                      typeof $steps["updateLoadingButton2"] ===
                                        "object" &&
                                      typeof $steps["updateLoadingButton2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateLoadingButton2"] =
                                        await $steps["updateLoadingButton2"];
                                    }

                                    $steps["updateDialogOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["dialog4", "open"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogOpen"] != null &&
                                      typeof $steps["updateDialogOpen"] ===
                                        "object" &&
                                      typeof $steps["updateDialogOpen"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDialogOpen"] = await $steps[
                                        "updateDialogOpen"
                                      ];
                                    }

                                    $steps["updateDialogOpen2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                              "top-center"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogOpen2"] != null &&
                                      typeof $steps["updateDialogOpen2"] ===
                                        "object" &&
                                      typeof $steps["updateDialogOpen2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDialogOpen2"] =
                                        await $steps["updateDialogOpen2"];
                                    }
                                  }}
                                />
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.dialog4
                            )}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "dialog4",
                                "open"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            open={generateStateValueProp($state, [
                              "dialog4",
                              "open"
                            ])}
                            title={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ku2Rn
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0W2Rm
                                  )}
                                >
                                  {
                                    "\u0648\u06cc\u062c\u062a \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bbtwq
                                  )}
                                >
                                  {
                                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u06a9\u0627\u0645\u067e\u0648\u0646\u0646\u062a \u06cc\u0627 \u0627\u0633\u06a9\u0631\u06cc\u067e\u062a \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u067e\u0632\u0634\u06a9"
                                  }
                                </div>
                              </div>
                            }
                            trigger={
                              <Paziresh24Button
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xgGCe
                                    )}
                                  >
                                    {
                                      "\u0648\u06cc\u062c\u062a \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                                    }
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.paziresh24Button___1M496
                                )}
                                outline={true}
                                showStartIcon={true}
                                size={"compact"}
                                startIcon={
                                  <Icon21Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__lHbr
                                    )}
                                    role={"img"}
                                  />
                                }
                              />
                            }
                          />

                          <Paziresh24Button
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ztRjl
                                )}
                              >
                                {
                                  "\u0648\u06cc\u062c\u062a \u062f\u0627\u0634\u0628\u0648\u0631\u062f"
                                }
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__draNg
                            )}
                            outline={true}
                            showStartIcon={true}
                            size={"compact"}
                            startIcon={
                              <Icon21Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__olQpX
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ro906
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qiZ1O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gWuc2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2Vm6V
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pTao
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oTp88
                                )}
                              >
                                {
                                  "\u0648\u06cc\u062c\u062a \u0647\u0627\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yolYu
                              )}
                            >
                              {
                                "\u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u0646\u062f \u0628\u062e\u0634\u06cc \u0631\u0627 \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0639\u0645\u0648\u0645\u06cc \u067e\u0632\u0634\u06a9 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u0646\u062f."
                              }
                            </div>
                          </div>
                          <Paziresh24Button
                            children2={
                              "\u062a\u0645\u0627\u0633 \u0628\u0627\u0645\u0627"
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__vsGE
                            )}
                            color={"softSand"}
                            link={"https://t.me/amirhbeigi"}
                            showStartIcon={true}
                            startIcon={
                              <Icon48Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__v2Fwt
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
                <ApiRequest
                  data-plasmic-name={"userPageRequest"}
                  data-plasmic-override={overrides.userPageRequest}
                  className={classNames("__wab_instance", sty.userPageRequest)}
                  errorDisplay={null}
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "userPageRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "userPageRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "userPageRequest",
                      "data"
                    ]).apply(null, eventArgs);

                    (async data => {
                      const $steps = {};

                      $steps["updateIntialData"] =
                        Object.keys($state.userPageRequest.data)?.length > 0
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["intialData"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateIntialData"] != null &&
                        typeof $steps["updateIntialData"] === "object" &&
                        typeof $steps["updateIntialData"].then === "function"
                      ) {
                        $steps["updateIntialData"] = await $steps[
                          "updateIntialData"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["userPageRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/features/user-page`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <ApiRequest
                  data-plasmic-name={"landingPageRequest"}
                  data-plasmic-override={overrides.landingPageRequest}
                  className={classNames(
                    "__wab_instance",
                    sty.landingPageRequest
                  )}
                  errorDisplay={null}
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "landingPageRequest",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "landingPageRequest",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "landingPageRequest",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["landingPageRequest"] = ref;
                  }}
                  url={(() => {
                    try {
                      return `https://hamdast.paziresh24.com/api/v1/apps/${$ctx.params.id}/features/landing-page`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                {(() => {
                  try {
                    return (
                      ($state.userPageRequest.loading ||
                        $state.landingPageRequest.loading) &&
                      !$state.intialData
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__od2GM)}
                  >
                    <Icon15Icon
                      className={classNames(projectcss.all, sty.svg__dDapO)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
            </Layout>
          </AuthProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "authProvider",
    "layout",
    "dialog3",
    "displayNameFa2",
    "description2",
    "embedSrc2",
    "dialog2",
    "landingTitle",
    "landingDescription",
    "landingFeatures",
    "landingButtonText",
    "dialog4",
    "landingTitle2",
    "landingDescription2",
    "landingFeatures2",
    "landingButtonText2",
    "userPageRequest",
    "landingPageRequest"
  ],
  embedHtml: ["embedHtml"],
  authProvider: [
    "authProvider",
    "layout",
    "dialog3",
    "displayNameFa2",
    "description2",
    "embedSrc2",
    "dialog2",
    "landingTitle",
    "landingDescription",
    "landingFeatures",
    "landingButtonText",
    "dialog4",
    "landingTitle2",
    "landingDescription2",
    "landingFeatures2",
    "landingButtonText2",
    "userPageRequest",
    "landingPageRequest"
  ],
  layout: [
    "layout",
    "dialog3",
    "displayNameFa2",
    "description2",
    "embedSrc2",
    "dialog2",
    "landingTitle",
    "landingDescription",
    "landingFeatures",
    "landingButtonText",
    "dialog4",
    "landingTitle2",
    "landingDescription2",
    "landingFeatures2",
    "landingButtonText2",
    "userPageRequest",
    "landingPageRequest"
  ],
  dialog3: ["dialog3", "displayNameFa2", "description2", "embedSrc2"],
  displayNameFa2: ["displayNameFa2"],
  description2: ["description2"],
  embedSrc2: ["embedSrc2"],
  dialog2: [
    "dialog2",
    "landingTitle",
    "landingDescription",
    "landingFeatures",
    "landingButtonText"
  ],
  landingTitle: ["landingTitle"],
  landingDescription: ["landingDescription"],
  landingFeatures: ["landingFeatures"],
  landingButtonText: ["landingButtonText"],
  dialog4: [
    "dialog4",
    "landingTitle2",
    "landingDescription2",
    "landingFeatures2",
    "landingButtonText2"
  ],
  landingTitle2: ["landingTitle2"],
  landingDescription2: ["landingDescription2"],
  landingFeatures2: ["landingFeatures2"],
  landingButtonText2: ["landingButtonText2"],
  userPageRequest: ["userPageRequest"],
  landingPageRequest: ["landingPageRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  authProvider: typeof AuthProvider;
  layout: typeof Layout;
  dialog3: typeof Paziresh24Modal;
  displayNameFa2: typeof Input;
  description2: typeof Input;
  embedSrc2: typeof Input;
  dialog2: typeof Paziresh24Modal;
  landingTitle: typeof Input;
  landingDescription: typeof TiptapWrapper;
  landingFeatures: typeof Input;
  landingButtonText: typeof Input;
  dialog4: typeof Paziresh24Modal;
  landingTitle2: typeof Input;
  landingDescription2: typeof TiptapWrapper;
  landingFeatures2: typeof Input;
  landingButtonText2: typeof Input;
  userPageRequest: typeof ApiRequest;
  landingPageRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuildFeatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuildFeatures__VariantsArgs;
    args?: PlasmicBuildFeatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuildFeatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBuildFeatures__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBuildFeatures__ArgProps,
          internalVariantPropNames: PlasmicBuildFeatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBuildFeatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuildFeatures";
  } else {
    func.displayName = `PlasmicBuildFeatures.${nodeName}`;
  }
  return func;
}

export const PlasmicBuildFeatures = Object.assign(
  // Top-level PlasmicBuildFeatures renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    authProvider: makeNodeComponent("authProvider"),
    layout: makeNodeComponent("layout"),
    dialog3: makeNodeComponent("dialog3"),
    displayNameFa2: makeNodeComponent("displayNameFa2"),
    description2: makeNodeComponent("description2"),
    embedSrc2: makeNodeComponent("embedSrc2"),
    dialog2: makeNodeComponent("dialog2"),
    landingTitle: makeNodeComponent("landingTitle"),
    landingDescription: makeNodeComponent("landingDescription"),
    landingFeatures: makeNodeComponent("landingFeatures"),
    landingButtonText: makeNodeComponent("landingButtonText"),
    dialog4: makeNodeComponent("dialog4"),
    landingTitle2: makeNodeComponent("landingTitle2"),
    landingDescription2: makeNodeComponent("landingDescription2"),
    landingFeatures2: makeNodeComponent("landingFeatures2"),
    landingButtonText2: makeNodeComponent("landingButtonText2"),
    userPageRequest: makeNodeComponent("userPageRequest"),
    landingPageRequest: makeNodeComponent("landingPageRequest"),

    // Metadata about props expected for PlasmicBuildFeatures
    internalVariantProps: PlasmicBuildFeatures__VariantProps,
    internalArgProps: PlasmicBuildFeatures__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "ویژگی ها",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBuildFeatures;
/* prettier-ignore-end */
